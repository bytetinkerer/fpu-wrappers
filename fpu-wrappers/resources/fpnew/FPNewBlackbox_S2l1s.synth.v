/* Generated by Yosys 0.15+70 (git sha1 48d7a6c47, clang 11.0.1-2 -fPIC -Os) */

module \$paramod$20b6cacf5002c1612604dc25108d3b58227d5c41\fpnew_opgroup_multifmt_slice_607F1_85D30 (clk_i, rst_ni, operands_i, is_boxed_i, rnd_mode_i, op_i, op_mod_i, src_fmt_i, dst_fmt_i, int_fmt_i, vectorial_op_i, tag_i, in_valid_i, in_ready_o, flush_i, result_o, status_o, extension_bit_o, tag_o, out_valid_o, out_ready_i
, busy_o);
  wire [31:0] _00_;
  wire [31:0] _01_;
  wire [31:0] _02_;
  wire [31:0] _03_;
  wire [31:0] _04_;
  wire [31:0] _05_;
  wire [63:0] _06_;
  wire [63:0] _07_;
  wire [31:0] _08_;
  wire [31:0] _09_;
  wire [63:0] _10_;
  wire [63:0] _11_;
  wire [31:0] _12_;
  wire [31:0] _13_;
  wire [31:0] _14_;
  wire [4:0] aux_data;
  wire [31:0] \boxed_2op.sv2v_autoblock_4.fmt ;
  output busy_o;
  wire busy_o;
  input clk_i;
  wire clk_i;
  wire [2:0] dst_fmt;
  input [2:0] dst_fmt_i;
  wire [2:0] dst_fmt_i;
  wire dst_fmt_is_int;
  wire dst_is_cpk;
  output extension_bit_o;
  wire extension_bit_o;
  input flush_i;
  wire flush_i;
  wire [319:0] fmt_slice_result;
  wire [31:0] \fpnew_pkg_fp_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7333$2749.$result ;
  wire [2:0] \fpnew_pkg_fp_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7333$3932.fmt ;
  wire [2:0] \fpnew_pkg_fp_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7333$3933.fmt ;
  wire [2:0] \fpnew_pkg_fp_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7334$3934.fmt ;
  wire [2:0] \fpnew_pkg_fp_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7334$3935.fmt ;
  wire [2:0] \fpnew_pkg_fp_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7466$3163.fmt ;
  wire [2:0] \fpnew_pkg_fp_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7466$3260.fmt ;
  wire [2:0] \fpnew_pkg_fp_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7466$3747.fmt ;
  wire [2:0] \fpnew_pkg_fp_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7466$3844.fmt ;
  wire \gen_num_lanes[0].active_lane.in_valid ;
  wire [63:0] \gen_num_lanes[0].active_lane.local_operands ;
  wire [31:0] \gen_num_lanes[0].active_lane.op_result ;
  wire [4:0] \gen_num_lanes[0].active_lane.op_status ;
  wire \gen_num_lanes[0].active_lane.out_ready ;
  wire \gen_num_lanes[0].active_lane.out_valid ;
  wire [31:0] \gen_num_lanes[0].active_lane.prepare_input.sv2v_autoblock_11.i ;
  wire [31:0] \gen_num_lanes[0].local_result ;
  wire \gen_num_lanes[1].active_lane.in_valid ;
  wire [63:0] \gen_num_lanes[1].active_lane.local_operands ;
  wire [31:0] \gen_num_lanes[1].active_lane.op_result ;
  wire [4:0] \gen_num_lanes[1].active_lane.op_status ;
  wire \gen_num_lanes[1].active_lane.out_ready ;
  wire \gen_num_lanes[1].active_lane.out_valid ;
  wire [31:0] \gen_num_lanes[1].active_lane.prepare_input.sv2v_autoblock_11.i ;
  wire [31:0] \gen_num_lanes[1].local_result ;
  wire [255:0] ifmt_slice_result;
  output in_ready_o;
  wire in_ready_o;
  input in_valid_i;
  wire in_valid_i;
  input [1:0] int_fmt_i;
  wire [1:0] int_fmt_i;
  wire [4:0] is_boxed_1op;
  wire [9:0] is_boxed_2op;
  input [9:0] is_boxed_i;
  wire [9:0] is_boxed_i;
  wire [9:0] lane_aux;
  wire [1:0] lane_busy;
  wire [1:0] lane_ext_bit;
  wire [1:0] lane_in_ready;
  wire [1:0] lane_out_valid;
  wire [9:0] lane_status;
  wire [3:0] lane_tags;
  input [3:0] op_i;
  wire [3:0] op_i;
  input op_mod_i;
  wire op_mod_i;
  input [127:0] operands_i;
  wire [127:0] operands_i;
  input out_ready_i;
  wire out_ready_i;
  output out_valid_o;
  wire out_valid_o;
  wire [31:0] \output_processing.sv2v_autoblock_12.i ;
  wire [4:0] \output_processing.temp_status ;
  wire [2:0] result_fmt;
  wire result_fmt_is_int;
  wire result_is_cpk;
  wire result_is_vector;
  output [63:0] result_o;
  wire [63:0] result_o;
  wire [1:0] result_vec_op;
  input [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_i;
  input rst_ni;
  wire rst_ni;
  input [2:0] src_fmt_i;
  wire [2:0] src_fmt_i;
  output [4:0] status_o;
  wire [4:0] status_o;
  input [1:0] tag_i;
  wire [1:0] tag_i;
  output [1:0] tag_o;
  wire [1:0] tag_o;
  wire [2:0] target_aux_d;
  wire vectorial_op;
  input vectorial_op_i;
  wire vectorial_op_i;
  assign _00_ = _02_ + 32'd1;
  assign _01_ = _03_ + 32'd1;
  assign _02_ = { _05_[31:6], 6'h00 } + 32'd63;
  assign _03_ = { _05_[31:6], 6'h00 } + 32'd31;
  assign _04_ = _08_ + _09_;
  assign \fpnew_pkg_fp_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7333$2749.$result  = _04_ + 32'd1;
  assign \gen_num_lanes[1].active_lane.in_valid  = in_valid_i & vectorial_op_i;
  assign \gen_num_lanes[1].active_lane.out_ready  = out_ready_i & lane_aux[3];
  assign lane_out_valid[1] = \gen_num_lanes[1].active_lane.out_valid  & lane_aux[3];
  assign status_o = lane_status[4:0] | lane_status[9:5];
  assign busy_o = | lane_busy;
  wire [255:0] _40_ = 256'h0000000000000000000000000000000000000000000000000000000000000000;
  assign _06_ = _40_[$signed({ 23'h000000, lane_aux[2:0], 6'h00 }) +: 64];
  wire [319:0] _41_ = { extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, \gen_num_lanes[1].local_result , \gen_num_lanes[0].local_result  };
  assign _07_ = _41_[$signed({ 23'h000000, lane_aux[2:0], 6'h00 }) +: 64];
  wire [319:0] _42_ = 320'h00000008000000170000000b00000034000000050000000a00000005000000020000000800000007;
  assign _09_ = _42_[$signed(_13_) +: 32];
  wire [319:0] _43_ = 320'h00000008000000170000000b00000034000000050000000a00000005000000020000000800000007;
  assign _08_ = _43_[$signed(_12_) +: 32];
  assign { _10_[63:32], \gen_num_lanes[1].active_lane.local_operands [31:0] } = operands_i[63:0] >> \fpnew_pkg_fp_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7333$2749.$result ;
  assign { _11_[63:32], \gen_num_lanes[1].active_lane.local_operands [63:32] } = operands_i[127:64] >> \fpnew_pkg_fp_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7333$2749.$result ;
  assign _12_ = _00_ - 32'd32;
  assign _13_ = _01_ - 32'd32;
  assign { _14_[31:26], _05_[31:6] } = 32'd4 - src_fmt_i;
  assign \gen_num_lanes[0].local_result  = \gen_num_lanes[0].active_lane.out_valid  ? \gen_num_lanes[0].active_lane.op_result  : { extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o };
  assign \gen_num_lanes[1].local_result  = lane_out_valid[1] ? \gen_num_lanes[1].active_lane.op_result  : { extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o };
  assign lane_status[4:0] = \gen_num_lanes[0].active_lane.out_valid  ? \gen_num_lanes[0].active_lane.op_status  : 5'h00;
  assign lane_status[9:5] = lane_out_valid[1] ? \gen_num_lanes[1].active_lane.op_status  : 5'h00;
  assign result_o = lane_aux[4] ? _06_ : _07_;
  \$paramod$70f437425597cba7e2ae98844296c2aa2fca4ba2\fpnew_divsqrt_multi_1A2E7_2C16F  \gen_num_lanes[0].active_lane.genblk1.lane_instance.i_fpnew_divsqrt_multi  (
    .aux_i({ 1'h0, vectorial_op_i, dst_fmt_i }),
    .aux_o(lane_aux[4:0]),
    .busy_o(lane_busy[0]),
    .clk_i(clk_i),
    .dst_fmt_i(dst_fmt_i),
    .extension_bit_o(extension_bit_o),
    .flush_i(flush_i),
    .in_ready_o(in_ready_o),
    .in_valid_i(in_valid_i),
    .is_boxed_i(is_boxed_i),
    .op_i(op_i),
    .operands_i({ operands_i[95:64], operands_i[31:0] }),
    .out_ready_i(out_ready_i),
    .out_valid_o(\gen_num_lanes[0].active_lane.out_valid ),
    .result_o(\gen_num_lanes[0].active_lane.op_result ),
    .rnd_mode_i(rnd_mode_i),
    .rst_ni(rst_ni),
    .status_o(\gen_num_lanes[0].active_lane.op_status ),
    .tag_i(tag_i),
    .tag_o(tag_o)
  );
  \$paramod$70f437425597cba7e2ae98844296c2aa2fca4ba2\fpnew_divsqrt_multi_1A2E7_2C16F  \gen_num_lanes[1].active_lane.genblk1.lane_instance.i_fpnew_divsqrt_multi  (
    .aux_i({ 1'h0, vectorial_op_i, dst_fmt_i }),
    .aux_o(lane_aux[9:5]),
    .busy_o(lane_busy[1]),
    .clk_i(clk_i),
    .dst_fmt_i(dst_fmt_i),
    .extension_bit_o(fmt_slice_result[287]),
    .flush_i(flush_i),
    .in_ready_o(lane_in_ready[1]),
    .in_valid_i(\gen_num_lanes[1].active_lane.in_valid ),
    .is_boxed_i(is_boxed_i),
    .op_i(op_i),
    .operands_i(\gen_num_lanes[1].active_lane.local_operands ),
    .out_ready_i(\gen_num_lanes[1].active_lane.out_ready ),
    .out_valid_o(\gen_num_lanes[1].active_lane.out_valid ),
    .result_o(\gen_num_lanes[1].active_lane.op_result ),
    .rnd_mode_i(rnd_mode_i),
    .rst_ni(rst_ni),
    .status_o(\gen_num_lanes[1].active_lane.op_status ),
    .tag_i(tag_i),
    .tag_o(lane_tags[3:2])
  );
  assign _05_[5:0] = 6'h00;
  assign _10_[31:0] = \gen_num_lanes[1].active_lane.local_operands [31:0];
  assign _11_[31:0] = \gen_num_lanes[1].active_lane.local_operands [63:32];
  assign _14_[25:0] = _05_[31:6];
  assign aux_data = { 1'h0, vectorial_op_i, dst_fmt_i };
  assign \boxed_2op.sv2v_autoblock_4.fmt  = 32'd5;
  assign dst_fmt = dst_fmt_i;
  assign dst_fmt_is_int = 1'h0;
  assign dst_is_cpk = 1'h0;
  assign { fmt_slice_result[319:288], fmt_slice_result[286:0] } = { extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, \gen_num_lanes[1].local_result , \gen_num_lanes[0].local_result  };
  assign \fpnew_pkg_fp_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7333$3932.fmt  = 3'hx;
  assign \fpnew_pkg_fp_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7333$3933.fmt  = 3'hx;
  assign \fpnew_pkg_fp_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7334$3934.fmt  = 3'hx;
  assign \fpnew_pkg_fp_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7334$3935.fmt  = 3'hx;
  assign \fpnew_pkg_fp_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7466$3163.fmt  = 3'hx;
  assign \fpnew_pkg_fp_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7466$3260.fmt  = 3'hx;
  assign \fpnew_pkg_fp_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7466$3747.fmt  = 3'hx;
  assign \fpnew_pkg_fp_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7466$3844.fmt  = 3'hx;
  assign \gen_num_lanes[0].active_lane.in_valid  = in_valid_i;
  assign \gen_num_lanes[0].active_lane.local_operands  = { operands_i[95:64], operands_i[31:0] };
  assign \gen_num_lanes[0].active_lane.out_ready  = out_ready_i;
  assign \gen_num_lanes[0].active_lane.prepare_input.sv2v_autoblock_11.i  = 32'd2;
  assign \gen_num_lanes[1].active_lane.prepare_input.sv2v_autoblock_11.i  = 32'd2;
  assign ifmt_slice_result = 256'h0000000000000000000000000000000000000000000000000000000000000000;
  assign is_boxed_1op = { is_boxed_i[8], is_boxed_i[6], is_boxed_i[4], is_boxed_i[2], is_boxed_i[0] };
  assign is_boxed_2op = is_boxed_i;
  assign lane_ext_bit = { fmt_slice_result[287], extension_bit_o };
  assign lane_in_ready[0] = in_ready_o;
  assign lane_out_valid[0] = \gen_num_lanes[0].active_lane.out_valid ;
  assign lane_tags[1:0] = tag_o;
  assign out_valid_o = \gen_num_lanes[0].active_lane.out_valid ;
  assign \output_processing.sv2v_autoblock_12.i  = 32'd2;
  assign \output_processing.temp_status  = status_o;
  assign result_fmt = lane_aux[2:0];
  assign result_fmt_is_int = lane_aux[4];
  assign result_is_cpk = 1'h0;
  assign result_is_vector = lane_aux[3];
  assign result_vec_op = 2'h0;
  assign target_aux_d[0] = 1'h0;
  assign vectorial_op = vectorial_op_i;
endmodule

module \$paramod$23409113d3d81e12fc976ffc5bb52de58b20bb16\fpnew_opgroup_block_A94B6_B7406 (clk_i, rst_ni, operands_i, is_boxed_i, rnd_mode_i, op_i, op_mod_i, src_fmt_i, dst_fmt_i, int_fmt_i, vectorial_op_i, tag_i, in_valid_i, in_ready_o, flush_i, result_o, status_o, extension_bit_o, tag_o, out_valid_o, out_ready_i
, busy_o);
  wire [31:0] _00_;
  wire _01_;
  wire _02_;
  wire [1:0] _03_;
  wire [31:0] _04_;
  wire [71:0] arbiter_output;
  output busy_o;
  wire busy_o;
  input clk_i;
  wire clk_i;
  input [2:0] dst_fmt_i;
  wire [2:0] dst_fmt_i;
  output extension_bit_o;
  wire extension_bit_o;
  input flush_i;
  wire flush_i;
  wire [4:0] fmt_busy;
  wire [4:0] fmt_in_ready;
  wire [4:0] fmt_out_ready;
  wire [4:0] fmt_out_valid;
  wire [359:0] fmt_outputs;
  wire \gen_merged_slice.in_valid ;
  output in_ready_o;
  wire in_ready_o;
  input in_valid_i;
  wire in_valid_i;
  input [1:0] int_fmt_i;
  wire [1:0] int_fmt_i;
  input [9:0] is_boxed_i;
  wire [9:0] is_boxed_i;
  input [3:0] op_i;
  wire [3:0] op_i;
  input op_mod_i;
  wire op_mod_i;
  input [127:0] operands_i;
  wire [127:0] operands_i;
  input out_ready_i;
  wire out_ready_i;
  output out_valid_o;
  wire out_valid_o;
  output [63:0] result_o;
  wire [63:0] result_o;
  input [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_i;
  input rst_ni;
  wire rst_ni;
  input [2:0] src_fmt_i;
  wire [2:0] src_fmt_i;
  output [4:0] status_o;
  wire [4:0] status_o;
  input [1:0] tag_i;
  wire [1:0] tag_i;
  output [1:0] tag_o;
  wire [1:0] tag_o;
  input vectorial_op_i;
  wire vectorial_op_i;
  assign in_ready_o = in_valid_i & _02_;
  assign \gen_merged_slice.in_valid  = in_valid_i & _01_;
  assign _01_ = _03_ == 2'h2;
  wire [4:0] _11_ = { 4'h0, fmt_in_ready[0] };
  assign _02_ = _11_[dst_fmt_i +: 1];
  wire [9:0] _12_ = 10'h2aa;
  assign _03_ = _12_[$signed({ _00_[31:1], 1'h0 }) +: 2];
  assign { _04_[31], _00_[31:1] } = 32'd4 - dst_fmt_i;
  \$paramod$20b6cacf5002c1612604dc25108d3b58227d5c41\fpnew_opgroup_multifmt_slice_607F1_85D30  \gen_merged_slice.i_multifmt_slice  (
    .busy_o(busy_o),
    .clk_i(clk_i),
    .dst_fmt_i(dst_fmt_i),
    .extension_bit_o(fmt_outputs[2]),
    .flush_i(flush_i),
    .in_ready_o(fmt_in_ready[0]),
    .in_valid_i(\gen_merged_slice.in_valid ),
    .int_fmt_i(int_fmt_i),
    .is_boxed_i(is_boxed_i),
    .op_i(op_i),
    .op_mod_i(op_mod_i),
    .operands_i(operands_i),
    .out_ready_i(fmt_out_ready[0]),
    .out_valid_o(fmt_out_valid[0]),
    .result_o(fmt_outputs[71:8]),
    .rnd_mode_i(rnd_mode_i),
    .rst_ni(rst_ni),
    .src_fmt_i(src_fmt_i),
    .status_o(fmt_outputs[7:3]),
    .tag_i(tag_i),
    .tag_o(fmt_outputs[1:0]),
    .vectorial_op_i(vectorial_op_i)
  );
  \$paramod$2d98b2ed91e87ed1e332161bf5d593baf43453be\rr_arb_tree_52163_F264E  i_arbiter (
    .clk_i(clk_i),
    .data_i({ 288'hfffffffffffffffffdfffffffffffffffffdfffffffffffffffffdfffffffffffffffffd, fmt_outputs[71:0] }),
    .data_o(arbiter_output),
    .flush_i(flush_i),
    .gnt_i(out_ready_i),
    .gnt_o(fmt_out_ready),
    .req_i({ 4'h0, fmt_out_valid[0] }),
    .req_o(out_valid_o),
    .rr_i(3'h0),
    .rst_ni(rst_ni)
  );
  assign _00_[0] = 1'h0;
  assign _04_[30:0] = _00_[31:1];
  assign extension_bit_o = arbiter_output[2];
  assign fmt_busy = { 4'h0, busy_o };
  assign fmt_in_ready[4:1] = 4'h0;
  assign fmt_out_valid[4:1] = 4'h0;
  assign fmt_outputs[359:72] = 288'hfffffffffffffffffdfffffffffffffffffdfffffffffffffffffdfffffffffffffffffd;
  assign result_o = arbiter_output[71:8];
  assign status_o = arbiter_output[7:3];
  assign tag_o = arbiter_output[1:0];
endmodule

module \$paramod$2d98b2ed91e87ed1e332161bf5d593baf43453be\rr_arb_tree_52163_F264E (clk_i, rst_ni, flush_i, rr_i, req_i, gnt_o, data_i, req_o, gnt_i, data_o, idx_o);
  wire [2:0] _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  input clk_i;
  wire clk_i;
  input [359:0] data_i;
  wire [359:0] data_i;
  output [71:0] data_o;
  wire [71:0] data_o;
  input flush_i;
  wire flush_i;
  wire [503:0] \gen_arbiter.data_nodes ;
  wire [2:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ;
  wire [4:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask ;
  wire [2:0] \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  wire \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ;
  wire [2:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  wire [4:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask ;
  wire [2:0] \gen_arbiter.gen_int_rr.rr_d ;
  wire \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  wire \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  wire \gen_arbiter.gen_levels[2].gen_level[0].sel ;
  wire \gen_arbiter.gen_levels[2].gen_level[1].sel ;
  wire [6:0] \gen_arbiter.gnt_nodes ;
  wire [20:0] \gen_arbiter.index_nodes ;
  wire [4:0] \gen_arbiter.req_d ;
  wire [6:0] \gen_arbiter.req_nodes ;
  reg [2:0] \gen_arbiter.rr_q ;
  input gnt_i;
  wire gnt_i;
  output [4:0] gnt_o;
  wire [4:0] gnt_o;
  output [2:0] idx_o;
  wire [2:0] idx_o;
  input [4:0] req_i;
  wire [4:0] req_i;
  output req_o;
  wire req_o;
  input [2:0] rr_i;
  wire [2:0] rr_i;
  input rst_ni;
  wire rst_ni;
  wire [2:0] \sv2v_cast_1BFE4$func$FPNewBlackbox_S2l1s.preprocessed.v:149$2522.inp ;
  wire [2:0] \sv2v_cast_1BFE4$func$FPNewBlackbox_S2l1s.preprocessed.v:149$2523.inp ;
  wire [2:0] \sv2v_cast_1BFE4$func$FPNewBlackbox_S2l1s.preprocessed.v:169$2506.$result ;
  wire [2:0] \sv2v_cast_1BFE4$func$FPNewBlackbox_S2l1s.preprocessed.v:169$2507.$result ;
  wire [2:0] \sv2v_cast_1BFE4$func$FPNewBlackbox_S2l1s.preprocessed.v:169$2516.inp ;
  wire [2:0] \sv2v_cast_1BFE4$func$FPNewBlackbox_S2l1s.preprocessed.v:169$2517.inp ;
  wire [2:0] \sv2v_cast_1BFE4$func$FPNewBlackbox_S2l1s.preprocessed.v:169$2518.inp ;
  wire [2:0] \sv2v_cast_1BFE4$func$FPNewBlackbox_S2l1s.preprocessed.v:169$2519.inp ;
  wire [2:0] \sv2v_cast_1BFE4$func$FPNewBlackbox_S2l1s.preprocessed.v:169$2520.inp ;
  wire [2:0] \sv2v_cast_1BFE4$func$FPNewBlackbox_S2l1s.preprocessed.v:169$2521.inp ;
  assign _01_ = req_i[1] & \gen_arbiter.rr_q [0];
  assign _02_ = req_i[3] & \gen_arbiter.rr_q [0];
  assign gnt_o[0] = \gen_arbiter.gnt_nodes [3] & _19_;
  assign gnt_o[2] = \gen_arbiter.gnt_nodes [4] & _20_;
  assign gnt_o[1] = \gen_arbiter.gnt_nodes [3] & \gen_arbiter.gen_levels[2].gen_level[0].sel ;
  assign gnt_o[3] = \gen_arbiter.gnt_nodes [4] & \gen_arbiter.gen_levels[2].gen_level[1].sel ;
  assign _03_ = req_i[4] & \gen_arbiter.rr_q [2];
  assign _04_ = \gen_arbiter.req_nodes [4] & \gen_arbiter.rr_q [1];
  assign \gen_arbiter.gnt_nodes [1] = gnt_i & _23_;
  assign \gen_arbiter.gnt_nodes [3] = \gen_arbiter.gnt_nodes [1] & _24_;
  assign gnt_o[4] = \gen_arbiter.gnt_nodes [2] & req_i[4];
  assign \gen_arbiter.gnt_nodes [2] = gnt_i & \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  assign \gen_arbiter.gnt_nodes [4] = \gen_arbiter.gnt_nodes [1] & \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.rr_q  <= 3'h0;
    else if (_05_) \gen_arbiter.rr_q  <= _00_;
  assign _05_ = | { _16_, flush_i };
  assign _06_ = 32'd0 > \gen_arbiter.rr_q ;
  assign _07_ = 32'd1 > \gen_arbiter.rr_q ;
  assign _08_ = 32'd2 > \gen_arbiter.rr_q ;
  assign _09_ = 32'd3 > \gen_arbiter.rr_q ;
  assign _10_ = 32'd4 > \gen_arbiter.rr_q ;
  assign _11_ = 32'd0 <= \gen_arbiter.rr_q ;
  assign _12_ = 32'd1 <= \gen_arbiter.rr_q ;
  assign _13_ = 32'd2 <= \gen_arbiter.rr_q ;
  assign _14_ = 32'd3 <= \gen_arbiter.rr_q ;
  assign _15_ = 32'd4 <= \gen_arbiter.rr_q ;
  assign _16_ = gnt_i && req_o;
  assign _17_ = ~ req_i[0];
  assign _18_ = ~ req_i[2];
  assign _19_ = ~ \gen_arbiter.gen_levels[2].gen_level[0].sel ;
  assign _20_ = ~ \gen_arbiter.gen_levels[2].gen_level[1].sel ;
  assign _21_ = ~ \gen_arbiter.req_nodes [1];
  assign _22_ = ~ \gen_arbiter.req_nodes [3];
  assign _23_ = ~ \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  assign _24_ = ~ \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  assign \gen_arbiter.req_nodes [3] = req_i[0] | req_i[1];
  assign \gen_arbiter.req_nodes [4] = req_i[2] | req_i[3];
  assign \gen_arbiter.gen_levels[2].gen_level[0].sel  = _17_ | _01_;
  assign \gen_arbiter.gen_levels[2].gen_level[1].sel  = _18_ | _02_;
  assign req_o = \gen_arbiter.req_nodes [1] | req_i[4];
  assign \gen_arbiter.req_nodes [1] = \gen_arbiter.req_nodes [3] | \gen_arbiter.req_nodes [4];
  assign \gen_arbiter.gen_levels[0].gen_level[0].sel  = _21_ | _03_;
  assign \gen_arbiter.gen_levels[1].gen_level[0].sel  = _22_ | _04_;
  assign _00_ = flush_i ? 3'h0 : \gen_arbiter.gen_int_rr.rr_d ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [0] = _06_ ? req_i[0] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [1] = _07_ ? req_i[1] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [2] = _08_ ? req_i[2] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3] = _09_ ? req_i[3] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [4] = _10_ ? req_i[4] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [0] = _11_ ? req_i[0] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [1] = _12_ ? req_i[1] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [2] = _13_ ? req_i[2] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3] = _14_ ? req_i[3] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [4] = _15_ ? req_i[4] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx  = \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty  ? \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx  : \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  assign \gen_arbiter.gen_int_rr.rr_d  = _16_ ? \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx  : 3'hx;
  assign \gen_arbiter.data_nodes [287:216] = \gen_arbiter.gen_levels[2].gen_level[0].sel  ? data_i[143:72] : data_i[71:0];
  assign \gen_arbiter.data_nodes [359:288] = \gen_arbiter.gen_levels[2].gen_level[1].sel  ? data_i[287:216] : data_i[215:144];
  assign idx_o = \gen_arbiter.gen_levels[0].gen_level[0].sel  ? { 1'h1, \sv2v_cast_1BFE4$func$FPNewBlackbox_S2l1s.preprocessed.v:169$2506.$result [1:0] } : { 1'h0, \sv2v_cast_1BFE4$func$FPNewBlackbox_S2l1s.preprocessed.v:169$2507.$result [1:0] };
  assign { \gen_arbiter.index_nodes [5], \sv2v_cast_1BFE4$func$FPNewBlackbox_S2l1s.preprocessed.v:169$2507.$result [1:0] } = \gen_arbiter.gen_levels[1].gen_level[0].sel  ? { 2'h1, \gen_arbiter.gen_levels[2].gen_level[1].sel  } : { 2'h0, \gen_arbiter.gen_levels[2].gen_level[0].sel  };
  assign { \gen_arbiter.index_nodes [8], \sv2v_cast_1BFE4$func$FPNewBlackbox_S2l1s.preprocessed.v:169$2506.$result [1:0] } = req_i[4] ? 3'h0 : 3'h2;
  assign data_o = \gen_arbiter.gen_levels[0].gen_level[0].sel  ? \gen_arbiter.data_nodes [215:144] : \gen_arbiter.data_nodes [143:72];
  assign \gen_arbiter.data_nodes [143:72] = \gen_arbiter.gen_levels[1].gen_level[0].sel  ? \gen_arbiter.data_nodes [359:288] : \gen_arbiter.data_nodes [287:216];
  assign \gen_arbiter.data_nodes [215:144] = req_i[4] ? data_i[359:288] : 72'h000000000000000000;
  \$paramod\lzc\WIDTH=32'00000000000000000000000000000101\MODE=1'0  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .in_i(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask )
  );
  \$paramod\lzc\WIDTH=32'00000000000000000000000000000101\MODE=1'0  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .empty_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .in_i(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask )
  );
  assign { \gen_arbiter.data_nodes [503:360], \gen_arbiter.data_nodes [71:0] } = { 72'h000000000000000000, data_i[359:288], data_o };
  assign { \gen_arbiter.gnt_nodes [5], \gen_arbiter.gnt_nodes [0] } = { gnt_o[4], gnt_i };
  assign { \gen_arbiter.index_nodes [20:9], \gen_arbiter.index_nodes [7:6], \gen_arbiter.index_nodes [4:0] } = { 8'h00, \gen_arbiter.gen_levels[2].gen_level[1].sel , 2'h0, \gen_arbiter.gen_levels[2].gen_level[0].sel , \sv2v_cast_1BFE4$func$FPNewBlackbox_S2l1s.preprocessed.v:169$2506.$result [1:0], \sv2v_cast_1BFE4$func$FPNewBlackbox_S2l1s.preprocessed.v:169$2507.$result [1:0], idx_o };
  assign \gen_arbiter.req_d  = req_i;
  assign { \gen_arbiter.req_nodes [6:5], \gen_arbiter.req_nodes [2], \gen_arbiter.req_nodes [0] } = { 1'h0, req_i[4], req_i[4], req_o };
  assign \sv2v_cast_1BFE4$func$FPNewBlackbox_S2l1s.preprocessed.v:149$2522.inp  = 3'hx;
  assign \sv2v_cast_1BFE4$func$FPNewBlackbox_S2l1s.preprocessed.v:149$2523.inp  = 3'hx;
  assign \sv2v_cast_1BFE4$func$FPNewBlackbox_S2l1s.preprocessed.v:169$2506.$result [2] = 1'h1;
  assign \sv2v_cast_1BFE4$func$FPNewBlackbox_S2l1s.preprocessed.v:169$2507.$result [2] = 1'h0;
  assign \sv2v_cast_1BFE4$func$FPNewBlackbox_S2l1s.preprocessed.v:169$2516.inp  = 3'hx;
  assign \sv2v_cast_1BFE4$func$FPNewBlackbox_S2l1s.preprocessed.v:169$2517.inp  = 3'hx;
  assign \sv2v_cast_1BFE4$func$FPNewBlackbox_S2l1s.preprocessed.v:169$2518.inp  = 3'hx;
  assign \sv2v_cast_1BFE4$func$FPNewBlackbox_S2l1s.preprocessed.v:169$2519.inp  = 3'hx;
  assign \sv2v_cast_1BFE4$func$FPNewBlackbox_S2l1s.preprocessed.v:169$2520.inp  = 3'hx;
  assign \sv2v_cast_1BFE4$func$FPNewBlackbox_S2l1s.preprocessed.v:169$2521.inp  = 3'hx;
endmodule

module \$paramod$33927d67db2764900ac78ba84de6c8e59d432344\lzc (in_i, cnt_o, empty_o);
  output [4:0] cnt_o;
  wire [4:0] cnt_o;
  output empty_o;
  wire empty_o;
  wire [31:0] \gen_lzc.flip_vector.sv2v_autoblock_1.i ;
  wire [23:0] \gen_lzc.in_tmp ;
  wire [119:0] \gen_lzc.index_lut ;
  wire [159:0] \gen_lzc.index_nodes ;
  wire [31:0] \gen_lzc.sel_nodes ;
  input [23:0] in_i;
  wire [23:0] in_i;
  assign empty_o = ~ \gen_lzc.sel_nodes [0];
  assign \gen_lzc.sel_nodes [15] = in_i[23] | in_i[22];
  assign \gen_lzc.sel_nodes [16] = in_i[21] | in_i[20];
  assign \gen_lzc.sel_nodes [17] = in_i[19] | in_i[18];
  assign \gen_lzc.sel_nodes [18] = in_i[17] | in_i[16];
  assign \gen_lzc.sel_nodes [19] = in_i[15] | in_i[14];
  assign \gen_lzc.sel_nodes [20] = in_i[13] | in_i[12];
  assign \gen_lzc.sel_nodes [21] = in_i[11] | in_i[10];
  assign \gen_lzc.sel_nodes [22] = in_i[9] | in_i[8];
  assign \gen_lzc.sel_nodes [23] = in_i[7] | in_i[6];
  assign \gen_lzc.sel_nodes [24] = in_i[5] | in_i[4];
  assign \gen_lzc.sel_nodes [25] = in_i[3] | in_i[2];
  assign \gen_lzc.sel_nodes [26] = in_i[1] | in_i[0];
  assign \gen_lzc.sel_nodes [0] = \gen_lzc.sel_nodes [1] | \gen_lzc.sel_nodes [2];
  assign \gen_lzc.sel_nodes [1] = \gen_lzc.sel_nodes [3] | \gen_lzc.sel_nodes [4];
  assign \gen_lzc.sel_nodes [3] = \gen_lzc.sel_nodes [7] | \gen_lzc.sel_nodes [8];
  assign \gen_lzc.sel_nodes [4] = \gen_lzc.sel_nodes [9] | \gen_lzc.sel_nodes [10];
  assign \gen_lzc.sel_nodes [2] = \gen_lzc.sel_nodes [11] | \gen_lzc.sel_nodes [12];
  assign \gen_lzc.sel_nodes [7] = \gen_lzc.sel_nodes [15] | \gen_lzc.sel_nodes [16];
  assign \gen_lzc.sel_nodes [8] = \gen_lzc.sel_nodes [17] | \gen_lzc.sel_nodes [18];
  assign \gen_lzc.sel_nodes [9] = \gen_lzc.sel_nodes [19] | \gen_lzc.sel_nodes [20];
  assign \gen_lzc.sel_nodes [10] = \gen_lzc.sel_nodes [21] | \gen_lzc.sel_nodes [22];
  assign \gen_lzc.sel_nodes [11] = \gen_lzc.sel_nodes [23] | \gen_lzc.sel_nodes [24];
  assign \gen_lzc.sel_nodes [12] = \gen_lzc.sel_nodes [25] | \gen_lzc.sel_nodes [26];
  assign \gen_lzc.index_nodes [79:75] = in_i[23] ? 5'h00 : 5'h01;
  assign \gen_lzc.index_nodes [84:80] = in_i[21] ? 5'h02 : 5'h03;
  assign \gen_lzc.index_nodes [89:85] = in_i[19] ? 5'h04 : 5'h05;
  assign \gen_lzc.index_nodes [94:90] = in_i[17] ? 5'h06 : 5'h07;
  assign \gen_lzc.index_nodes [99:95] = in_i[15] ? 5'h08 : 5'h09;
  assign \gen_lzc.index_nodes [104:100] = in_i[13] ? 5'h0a : 5'h0b;
  assign \gen_lzc.index_nodes [109:105] = in_i[11] ? 5'h0c : 5'h0d;
  assign \gen_lzc.index_nodes [114:110] = in_i[9] ? 5'h0e : 5'h0f;
  assign \gen_lzc.index_nodes [119:115] = in_i[7] ? 5'h10 : 5'h11;
  assign \gen_lzc.index_nodes [124:120] = in_i[5] ? 5'h12 : 5'h13;
  assign \gen_lzc.index_nodes [129:125] = in_i[3] ? 5'h14 : 5'h15;
  assign \gen_lzc.index_nodes [134:130] = in_i[1] ? 5'h16 : 5'h17;
  assign cnt_o = \gen_lzc.sel_nodes [1] ? \gen_lzc.index_nodes [9:5] : \gen_lzc.index_nodes [14:10];
  assign \gen_lzc.index_nodes [9:5] = \gen_lzc.sel_nodes [3] ? \gen_lzc.index_nodes [19:15] : \gen_lzc.index_nodes [24:20];
  assign \gen_lzc.index_nodes [14:10] = \gen_lzc.sel_nodes [2] ? \gen_lzc.index_nodes [29:25] : 5'h00;
  assign \gen_lzc.index_nodes [19:15] = \gen_lzc.sel_nodes [7] ? \gen_lzc.index_nodes [39:35] : \gen_lzc.index_nodes [44:40];
  assign \gen_lzc.index_nodes [24:20] = \gen_lzc.sel_nodes [9] ? \gen_lzc.index_nodes [49:45] : \gen_lzc.index_nodes [54:50];
  assign \gen_lzc.index_nodes [29:25] = \gen_lzc.sel_nodes [11] ? \gen_lzc.index_nodes [59:55] : \gen_lzc.index_nodes [64:60];
  assign \gen_lzc.index_nodes [39:35] = \gen_lzc.sel_nodes [15] ? \gen_lzc.index_nodes [79:75] : \gen_lzc.index_nodes [84:80];
  assign \gen_lzc.index_nodes [44:40] = \gen_lzc.sel_nodes [17] ? \gen_lzc.index_nodes [89:85] : \gen_lzc.index_nodes [94:90];
  assign \gen_lzc.index_nodes [49:45] = \gen_lzc.sel_nodes [19] ? \gen_lzc.index_nodes [99:95] : \gen_lzc.index_nodes [104:100];
  assign \gen_lzc.index_nodes [54:50] = \gen_lzc.sel_nodes [21] ? \gen_lzc.index_nodes [109:105] : \gen_lzc.index_nodes [114:110];
  assign \gen_lzc.index_nodes [59:55] = \gen_lzc.sel_nodes [23] ? \gen_lzc.index_nodes [119:115] : \gen_lzc.index_nodes [124:120];
  assign \gen_lzc.index_nodes [64:60] = \gen_lzc.sel_nodes [25] ? \gen_lzc.index_nodes [129:125] : \gen_lzc.index_nodes [134:130];
  assign \gen_lzc.flip_vector.sv2v_autoblock_1.i  = 32'd24;
  assign \gen_lzc.in_tmp  = { in_i[0], in_i[1], in_i[2], in_i[3], in_i[4], in_i[5], in_i[6], in_i[7], in_i[8], in_i[9], in_i[10], in_i[11], in_i[12], in_i[13], in_i[14], in_i[15], in_i[16], in_i[17], in_i[18], in_i[19], in_i[20], in_i[21], in_i[22], in_i[23] };
  assign \gen_lzc.index_lut  = 120'hbdab49ca307b9ac5a928398a418820;
  assign { \gen_lzc.index_nodes [154:135], \gen_lzc.index_nodes [74:65], \gen_lzc.index_nodes [34:30], \gen_lzc.index_nodes [4:0] } = { 35'h000000000, cnt_o };
  assign { \gen_lzc.sel_nodes [30:27], \gen_lzc.sel_nodes [14:13], \gen_lzc.sel_nodes [6:5] } = { 7'h00, \gen_lzc.sel_nodes [2] };
endmodule

module \$paramod$3dc9b54c1a715af223bba72fd88f9cd46ba20ed0\lzc (in_i, cnt_o, empty_o);
  output [5:0] cnt_o;
  wire [5:0] cnt_o;
  output empty_o;
  wire empty_o;
  wire [31:0] \gen_lzc.flip_vector.sv2v_autoblock_1.i ;
  wire [50:0] \gen_lzc.in_tmp ;
  wire [305:0] \gen_lzc.index_lut ;
  wire [383:0] \gen_lzc.index_nodes ;
  wire [63:0] \gen_lzc.sel_nodes ;
  input [50:0] in_i;
  wire [50:0] in_i;
  assign empty_o = ~ \gen_lzc.sel_nodes [0];
  assign \gen_lzc.sel_nodes [31] = in_i[50] | in_i[49];
  assign \gen_lzc.sel_nodes [32] = in_i[48] | in_i[47];
  assign \gen_lzc.sel_nodes [33] = in_i[46] | in_i[45];
  assign \gen_lzc.sel_nodes [34] = in_i[44] | in_i[43];
  assign \gen_lzc.sel_nodes [35] = in_i[42] | in_i[41];
  assign \gen_lzc.sel_nodes [36] = in_i[40] | in_i[39];
  assign \gen_lzc.sel_nodes [37] = in_i[38] | in_i[37];
  assign \gen_lzc.sel_nodes [38] = in_i[36] | in_i[35];
  assign \gen_lzc.sel_nodes [39] = in_i[34] | in_i[33];
  assign \gen_lzc.sel_nodes [40] = in_i[32] | in_i[31];
  assign \gen_lzc.sel_nodes [41] = in_i[30] | in_i[29];
  assign \gen_lzc.sel_nodes [42] = in_i[28] | in_i[27];
  assign \gen_lzc.sel_nodes [43] = in_i[26] | in_i[25];
  assign \gen_lzc.sel_nodes [44] = in_i[24] | in_i[23];
  assign \gen_lzc.sel_nodes [45] = in_i[22] | in_i[21];
  assign \gen_lzc.sel_nodes [46] = in_i[20] | in_i[19];
  assign \gen_lzc.sel_nodes [47] = in_i[18] | in_i[17];
  assign \gen_lzc.sel_nodes [48] = in_i[16] | in_i[15];
  assign \gen_lzc.sel_nodes [49] = in_i[14] | in_i[13];
  assign \gen_lzc.sel_nodes [50] = in_i[12] | in_i[11];
  assign \gen_lzc.sel_nodes [51] = in_i[10] | in_i[9];
  assign \gen_lzc.sel_nodes [52] = in_i[8] | in_i[7];
  assign \gen_lzc.sel_nodes [53] = in_i[6] | in_i[5];
  assign \gen_lzc.sel_nodes [54] = in_i[4] | in_i[3];
  assign \gen_lzc.sel_nodes [55] = in_i[2] | in_i[1];
  assign \gen_lzc.sel_nodes [0] = \gen_lzc.sel_nodes [1] | \gen_lzc.sel_nodes [2];
  assign \gen_lzc.sel_nodes [1] = \gen_lzc.sel_nodes [3] | \gen_lzc.sel_nodes [4];
  assign \gen_lzc.sel_nodes [2] = \gen_lzc.sel_nodes [5] | \gen_lzc.sel_nodes [6];
  assign \gen_lzc.sel_nodes [3] = \gen_lzc.sel_nodes [7] | \gen_lzc.sel_nodes [8];
  assign \gen_lzc.sel_nodes [4] = \gen_lzc.sel_nodes [9] | \gen_lzc.sel_nodes [10];
  assign \gen_lzc.sel_nodes [5] = \gen_lzc.sel_nodes [11] | \gen_lzc.sel_nodes [12];
  assign \gen_lzc.sel_nodes [7] = \gen_lzc.sel_nodes [15] | \gen_lzc.sel_nodes [16];
  assign \gen_lzc.sel_nodes [8] = \gen_lzc.sel_nodes [17] | \gen_lzc.sel_nodes [18];
  assign \gen_lzc.sel_nodes [9] = \gen_lzc.sel_nodes [19] | \gen_lzc.sel_nodes [20];
  assign \gen_lzc.sel_nodes [10] = \gen_lzc.sel_nodes [21] | \gen_lzc.sel_nodes [22];
  assign \gen_lzc.sel_nodes [11] = \gen_lzc.sel_nodes [23] | \gen_lzc.sel_nodes [24];
  assign \gen_lzc.sel_nodes [12] = \gen_lzc.sel_nodes [25] | \gen_lzc.sel_nodes [26];
  assign \gen_lzc.sel_nodes [15] = \gen_lzc.sel_nodes [31] | \gen_lzc.sel_nodes [32];
  assign \gen_lzc.sel_nodes [16] = \gen_lzc.sel_nodes [33] | \gen_lzc.sel_nodes [34];
  assign \gen_lzc.sel_nodes [17] = \gen_lzc.sel_nodes [35] | \gen_lzc.sel_nodes [36];
  assign \gen_lzc.sel_nodes [18] = \gen_lzc.sel_nodes [37] | \gen_lzc.sel_nodes [38];
  assign \gen_lzc.sel_nodes [19] = \gen_lzc.sel_nodes [39] | \gen_lzc.sel_nodes [40];
  assign \gen_lzc.sel_nodes [20] = \gen_lzc.sel_nodes [41] | \gen_lzc.sel_nodes [42];
  assign \gen_lzc.sel_nodes [21] = \gen_lzc.sel_nodes [43] | \gen_lzc.sel_nodes [44];
  assign \gen_lzc.sel_nodes [22] = \gen_lzc.sel_nodes [45] | \gen_lzc.sel_nodes [46];
  assign \gen_lzc.sel_nodes [23] = \gen_lzc.sel_nodes [47] | \gen_lzc.sel_nodes [48];
  assign \gen_lzc.sel_nodes [24] = \gen_lzc.sel_nodes [49] | \gen_lzc.sel_nodes [50];
  assign \gen_lzc.sel_nodes [25] = \gen_lzc.sel_nodes [51] | \gen_lzc.sel_nodes [52];
  assign \gen_lzc.sel_nodes [26] = \gen_lzc.sel_nodes [53] | \gen_lzc.sel_nodes [54];
  assign \gen_lzc.sel_nodes [6] = \gen_lzc.sel_nodes [55] | in_i[0];
  assign \gen_lzc.index_nodes [191:186] = in_i[50] ? 6'h00 : 6'h01;
  assign \gen_lzc.index_nodes [197:192] = in_i[48] ? 6'h02 : 6'h03;
  assign \gen_lzc.index_nodes [203:198] = in_i[46] ? 6'h04 : 6'h05;
  assign \gen_lzc.index_nodes [209:204] = in_i[44] ? 6'h06 : 6'h07;
  assign \gen_lzc.index_nodes [215:210] = in_i[42] ? 6'h08 : 6'h09;
  assign \gen_lzc.index_nodes [221:216] = in_i[40] ? 6'h0a : 6'h0b;
  assign \gen_lzc.index_nodes [227:222] = in_i[38] ? 6'h0c : 6'h0d;
  assign \gen_lzc.index_nodes [233:228] = in_i[36] ? 6'h0e : 6'h0f;
  assign \gen_lzc.index_nodes [239:234] = in_i[34] ? 6'h10 : 6'h11;
  assign \gen_lzc.index_nodes [245:240] = in_i[32] ? 6'h12 : 6'h13;
  assign \gen_lzc.index_nodes [251:246] = in_i[30] ? 6'h14 : 6'h15;
  assign \gen_lzc.index_nodes [257:252] = in_i[28] ? 6'h16 : 6'h17;
  assign \gen_lzc.index_nodes [263:258] = in_i[26] ? 6'h18 : 6'h19;
  assign \gen_lzc.index_nodes [269:264] = in_i[24] ? 6'h1a : 6'h1b;
  assign \gen_lzc.index_nodes [275:270] = in_i[22] ? 6'h1c : 6'h1d;
  assign \gen_lzc.index_nodes [281:276] = in_i[20] ? 6'h1e : 6'h1f;
  assign \gen_lzc.index_nodes [287:282] = in_i[18] ? 6'h20 : 6'h21;
  assign \gen_lzc.index_nodes [293:288] = in_i[16] ? 6'h22 : 6'h23;
  assign \gen_lzc.index_nodes [299:294] = in_i[14] ? 6'h24 : 6'h25;
  assign \gen_lzc.index_nodes [305:300] = in_i[12] ? 6'h26 : 6'h27;
  assign \gen_lzc.index_nodes [311:306] = in_i[10] ? 6'h28 : 6'h29;
  assign \gen_lzc.index_nodes [317:312] = in_i[8] ? 6'h2a : 6'h2b;
  assign \gen_lzc.index_nodes [323:318] = in_i[6] ? 6'h2c : 6'h2d;
  assign \gen_lzc.index_nodes [329:324] = in_i[4] ? 6'h2e : 6'h2f;
  assign \gen_lzc.index_nodes [335:330] = in_i[2] ? 6'h30 : 6'h31;
  assign cnt_o = \gen_lzc.sel_nodes [1] ? \gen_lzc.index_nodes [11:6] : \gen_lzc.index_nodes [17:12];
  assign \gen_lzc.index_nodes [11:6] = \gen_lzc.sel_nodes [3] ? \gen_lzc.index_nodes [23:18] : \gen_lzc.index_nodes [29:24];
  assign \gen_lzc.index_nodes [17:12] = \gen_lzc.sel_nodes [5] ? \gen_lzc.index_nodes [35:30] : \gen_lzc.index_nodes [41:36];
  assign \gen_lzc.index_nodes [23:18] = \gen_lzc.sel_nodes [7] ? \gen_lzc.index_nodes [47:42] : \gen_lzc.index_nodes [53:48];
  assign \gen_lzc.index_nodes [29:24] = \gen_lzc.sel_nodes [9] ? \gen_lzc.index_nodes [59:54] : \gen_lzc.index_nodes [65:60];
  assign \gen_lzc.index_nodes [35:30] = \gen_lzc.sel_nodes [11] ? \gen_lzc.index_nodes [71:66] : \gen_lzc.index_nodes [77:72];
  assign \gen_lzc.index_nodes [41:36] = \gen_lzc.sel_nodes [6] ? \gen_lzc.index_nodes [83:78] : 6'h00;
  assign \gen_lzc.index_nodes [47:42] = \gen_lzc.sel_nodes [15] ? \gen_lzc.index_nodes [95:90] : \gen_lzc.index_nodes [101:96];
  assign \gen_lzc.index_nodes [53:48] = \gen_lzc.sel_nodes [17] ? \gen_lzc.index_nodes [107:102] : \gen_lzc.index_nodes [113:108];
  assign \gen_lzc.index_nodes [59:54] = \gen_lzc.sel_nodes [19] ? \gen_lzc.index_nodes [119:114] : \gen_lzc.index_nodes [125:120];
  assign \gen_lzc.index_nodes [65:60] = \gen_lzc.sel_nodes [21] ? \gen_lzc.index_nodes [131:126] : \gen_lzc.index_nodes [137:132];
  assign \gen_lzc.index_nodes [71:66] = \gen_lzc.sel_nodes [23] ? \gen_lzc.index_nodes [143:138] : \gen_lzc.index_nodes [149:144];
  assign \gen_lzc.index_nodes [77:72] = \gen_lzc.sel_nodes [25] ? \gen_lzc.index_nodes [155:150] : \gen_lzc.index_nodes [161:156];
  assign \gen_lzc.index_nodes [95:90] = \gen_lzc.sel_nodes [31] ? \gen_lzc.index_nodes [191:186] : \gen_lzc.index_nodes [197:192];
  assign \gen_lzc.index_nodes [101:96] = \gen_lzc.sel_nodes [33] ? \gen_lzc.index_nodes [203:198] : \gen_lzc.index_nodes [209:204];
  assign \gen_lzc.index_nodes [107:102] = \gen_lzc.sel_nodes [35] ? \gen_lzc.index_nodes [215:210] : \gen_lzc.index_nodes [221:216];
  assign \gen_lzc.index_nodes [113:108] = \gen_lzc.sel_nodes [37] ? \gen_lzc.index_nodes [227:222] : \gen_lzc.index_nodes [233:228];
  assign \gen_lzc.index_nodes [119:114] = \gen_lzc.sel_nodes [39] ? \gen_lzc.index_nodes [239:234] : \gen_lzc.index_nodes [245:240];
  assign \gen_lzc.index_nodes [125:120] = \gen_lzc.sel_nodes [41] ? \gen_lzc.index_nodes [251:246] : \gen_lzc.index_nodes [257:252];
  assign \gen_lzc.index_nodes [131:126] = \gen_lzc.sel_nodes [43] ? \gen_lzc.index_nodes [263:258] : \gen_lzc.index_nodes [269:264];
  assign \gen_lzc.index_nodes [137:132] = \gen_lzc.sel_nodes [45] ? \gen_lzc.index_nodes [275:270] : \gen_lzc.index_nodes [281:276];
  assign \gen_lzc.index_nodes [143:138] = \gen_lzc.sel_nodes [47] ? \gen_lzc.index_nodes [287:282] : \gen_lzc.index_nodes [293:288];
  assign \gen_lzc.index_nodes [149:144] = \gen_lzc.sel_nodes [49] ? \gen_lzc.index_nodes [299:294] : \gen_lzc.index_nodes [305:300];
  assign \gen_lzc.index_nodes [155:150] = \gen_lzc.sel_nodes [51] ? \gen_lzc.index_nodes [311:306] : \gen_lzc.index_nodes [317:312];
  assign \gen_lzc.index_nodes [161:156] = \gen_lzc.sel_nodes [53] ? \gen_lzc.index_nodes [323:318] : \gen_lzc.index_nodes [329:324];
  assign \gen_lzc.index_nodes [83:78] = \gen_lzc.sel_nodes [55] ? \gen_lzc.index_nodes [335:330] : 6'h32;
  assign \gen_lzc.flip_vector.sv2v_autoblock_1.i  = 32'd51;
  assign \gen_lzc.in_tmp  = { in_i[0], in_i[1], in_i[2], in_i[3], in_i[4], in_i[5], in_i[6], in_i[7], in_i[8], in_i[9], in_i[10], in_i[11], in_i[12], in_i[13], in_i[14], in_i[15], in_i[16], in_i[17], in_i[18], in_i[19], in_i[20], in_i[21], in_i[22], in_i[23], in_i[24], in_i[25], in_i[26], in_i[27], in_i[28], in_i[29], in_i[30], in_i[31], in_i[32], in_i[33], in_i[34], in_i[35], in_i[36], in_i[37], in_i[38], in_i[39], in_i[40], in_i[41], in_i[42], in_i[43], in_i[44], in_i[45], in_i[46], in_i[47], in_i[48], in_i[49], in_i[50] };
  assign \gen_lzc.index_lut  = 306'h32c70beeb6caeaa689e69648e28607de75c6da6585d65544d24503ce34c2ca2481c61440c2040;
  assign { \gen_lzc.index_nodes [377:336], \gen_lzc.index_nodes [185:162], \gen_lzc.index_nodes [89:84], \gen_lzc.index_nodes [5:0] } = { 60'h000000000c80000, \gen_lzc.index_nodes [83:78], 6'h00, cnt_o };
  assign { \gen_lzc.sel_nodes [62:56], \gen_lzc.sel_nodes [30:27], \gen_lzc.sel_nodes [14:13] } = { 6'h00, in_i[0], 3'h0, \gen_lzc.sel_nodes [6], 1'h0, \gen_lzc.sel_nodes [6] };
endmodule

module \$paramod$5c562f9d610f5cf9622fb6ec28b843801178b640\fpnew_top_21317_11D0A (clk_i, rst_ni, operands_i, rnd_mode_i, op_i, op_mod_i, src_fmt_i, dst_fmt_i, int_fmt_i, vectorial_op_i, tag_i, in_valid_i, in_ready_o, flush_i, result_o, status_o, tag_o, out_valid_o, out_ready_i, busy_o);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire [4:0] _13_;
  wire _14_;
  wire [1:0] _15_;
  wire _16_;
  wire [3:0] _17_;
  wire _18_;
  wire _19_;
  wire [70:0] arbiter_output;
  output busy_o;
  wire busy_o;
  input clk_i;
  wire clk_i;
  input [2:0] dst_fmt_i;
  wire [2:0] dst_fmt_i;
  input flush_i;
  wire flush_i;
  wire [3:0] \fpnew_pkg_get_opgroup$func$FPNewBlackbox_S2l1s.preprocessed.v:7827$198.op ;
  wire [1:0] \fpnew_pkg_get_opgroup$func$FPNewBlackbox_S2l1s.preprocessed.v:7827$41.$result ;
  wire [3:0] \fpnew_pkg_get_opgroup$func$FPNewBlackbox_S2l1s.preprocessed.v:7876$214.op ;
  wire [3:0] \fpnew_pkg_get_opgroup$func$FPNewBlackbox_S2l1s.preprocessed.v:7876$230.op ;
  wire [3:0] \fpnew_pkg_get_opgroup$func$FPNewBlackbox_S2l1s.preprocessed.v:7876$246.op ;
  wire [3:0] \fpnew_pkg_get_opgroup$func$FPNewBlackbox_S2l1s.preprocessed.v:7876$262.op ;
  wire \gen_operation_groups[0].in_valid ;
  wire [14:0] \gen_operation_groups[0].input_boxed ;
  wire [31:0] \gen_operation_groups[0].slice_inputs.sv2v_autoblock_1.fmt ;
  wire \gen_operation_groups[1].in_valid ;
  wire [9:0] \gen_operation_groups[1].input_boxed ;
  wire [31:0] \gen_operation_groups[1].slice_inputs.sv2v_autoblock_1.fmt ;
  wire \gen_operation_groups[2].in_valid ;
  wire [9:0] \gen_operation_groups[2].input_boxed ;
  wire [31:0] \gen_operation_groups[2].slice_inputs.sv2v_autoblock_1.fmt ;
  wire \gen_operation_groups[3].in_valid ;
  wire [14:0] \gen_operation_groups[3].input_boxed ;
  wire [31:0] \gen_operation_groups[3].slice_inputs.sv2v_autoblock_1.fmt ;
  output in_ready_o;
  wire in_ready_o;
  input in_valid_i;
  wire in_valid_i;
  input [1:0] int_fmt_i;
  wire [1:0] int_fmt_i;
  wire [14:0] is_boxed;
  input [3:0] op_i;
  wire [3:0] op_i;
  input op_mod_i;
  wire op_mod_i;
  input [191:0] operands_i;
  wire [191:0] operands_i;
  wire [3:0] opgrp_busy;
  wire [3:0] opgrp_ext;
  wire [3:0] opgrp_in_ready;
  wire [3:0] opgrp_out_ready;
  wire [3:0] opgrp_out_valid;
  wire [283:0] opgrp_outputs;
  input out_ready_i;
  wire out_ready_i;
  output out_valid_o;
  wire out_valid_o;
  output [63:0] result_o;
  wire [63:0] result_o;
  input [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_i;
  input rst_ni;
  wire rst_ni;
  input [2:0] src_fmt_i;
  wire [2:0] src_fmt_i;
  output [4:0] status_o;
  wire [4:0] status_o;
  input [1:0] tag_i;
  wire [1:0] tag_i;
  output [1:0] tag_o;
  wire [1:0] tag_o;
  input vectorial_op_i;
  wire vectorial_op_i;
  assign in_ready_o = in_valid_i & _19_;
  assign \gen_operation_groups[0].in_valid  = in_valid_i & _09_;
  assign \gen_operation_groups[1].in_valid  = in_valid_i & _10_;
  assign \gen_operation_groups[2].in_valid  = in_valid_i & _11_;
  assign \gen_operation_groups[3].in_valid  = in_valid_i & _12_;
  assign _00_ = operands_i[63:32] == 32'd4294967295;
  assign _01_ = operands_i[127:96] == 32'd4294967295;
  assign _02_ = operands_i[191:160] == 32'd4294967295;
  assign _06_ = operands_i[63:8] == 56'hffffffffffffff;
  assign _07_ = operands_i[127:72] == 56'hffffffffffffff;
  assign _08_ = operands_i[191:136] == 56'hffffffffffffff;
  assign _03_ = operands_i[63:16] == 48'hffffffffffff;
  assign _04_ = operands_i[127:80] == 48'hffffffffffff;
  assign _05_ = operands_i[191:144] == 48'hffffffffffff;
  assign _09_ = ! \fpnew_pkg_get_opgroup$func$FPNewBlackbox_S2l1s.preprocessed.v:7827$41.$result ;
  assign _10_ = \fpnew_pkg_get_opgroup$func$FPNewBlackbox_S2l1s.preprocessed.v:7827$41.$result  == 2'h1;
  assign _11_ = \fpnew_pkg_get_opgroup$func$FPNewBlackbox_S2l1s.preprocessed.v:7827$41.$result  == 2'h2;
  assign _12_ = \fpnew_pkg_get_opgroup$func$FPNewBlackbox_S2l1s.preprocessed.v:7827$41.$result  == 2'h3;
  assign _14_ = | _13_;
  assign _18_ = | _17_;
  assign _16_ = | _15_;
  function [1:0] _41_;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _41_ = b[1:0];
      3'b?1?:
        _41_ = b[3:2];
      3'b1??:
        _41_ = b[5:4];
      default:
        _41_ = a;
    endcase
  endfunction
  assign \fpnew_pkg_get_opgroup$func$FPNewBlackbox_S2l1s.preprocessed.v:7827$41.$result  = _41_(2'h2, 6'h07, { _18_, _16_, _14_ });
  assign _13_[0] = op_i == 4'ha;
  assign _13_[1] = op_i == 4'hb;
  assign _13_[2] = op_i == 4'hc;
  assign _13_[3] = op_i == 4'hd;
  assign _13_[4] = op_i == 4'he;
  assign _15_[0] = op_i == 4'h4;
  assign _15_[1] = op_i == 4'h5;
  assign _17_[0] = ! op_i;
  assign _17_[1] = op_i == 4'h1;
  assign _17_[2] = op_i == 4'h2;
  assign _17_[3] = op_i == 4'h3;
  assign busy_o = | opgrp_busy;
  wire [3:0] _64_ = opgrp_in_ready;
  assign _19_ = _64_[\fpnew_pkg_get_opgroup$func$FPNewBlackbox_S2l1s.preprocessed.v:7827$41.$result  +: 1];
  assign \gen_operation_groups[0].input_boxed [0] = vectorial_op_i ? 1'h1 : _00_;
  assign \gen_operation_groups[0].input_boxed [1] = vectorial_op_i ? 1'h1 : _01_;
  assign \gen_operation_groups[0].input_boxed [2] = vectorial_op_i ? 1'h1 : _02_;
  assign \gen_operation_groups[0].input_boxed [9] = vectorial_op_i ? 1'h1 : _06_;
  assign \gen_operation_groups[0].input_boxed [10] = vectorial_op_i ? 1'h1 : _07_;
  assign \gen_operation_groups[0].input_boxed [11] = vectorial_op_i ? 1'h1 : _08_;
  assign \gen_operation_groups[0].input_boxed [12] = vectorial_op_i ? 1'h1 : _03_;
  assign \gen_operation_groups[0].input_boxed [13] = vectorial_op_i ? 1'h1 : _04_;
  assign \gen_operation_groups[0].input_boxed [14] = vectorial_op_i ? 1'h1 : _05_;
  \$paramod$72ba5c45156d9967735e5d7f231ed726a8170f73\fpnew_opgroup_block_A94B6_B7406  \gen_operation_groups[0].i_opgroup_block  (
    .busy_o(opgrp_busy[0]),
    .clk_i(clk_i),
    .dst_fmt_i(dst_fmt_i),
    .extension_bit_o(opgrp_ext[0]),
    .flush_i(flush_i),
    .in_ready_o(opgrp_in_ready[0]),
    .in_valid_i(\gen_operation_groups[0].in_valid ),
    .int_fmt_i(int_fmt_i),
    .is_boxed_i({ \gen_operation_groups[0].input_boxed [14:9], \gen_operation_groups[0].input_boxed [14:12], 3'h7, \gen_operation_groups[0].input_boxed [2:0] }),
    .op_i(op_i),
    .op_mod_i(op_mod_i),
    .operands_i(operands_i),
    .out_ready_i(opgrp_out_ready[0]),
    .out_valid_o(opgrp_out_valid[0]),
    .result_o(opgrp_outputs[70:7]),
    .rnd_mode_i(rnd_mode_i),
    .rst_ni(rst_ni),
    .src_fmt_i(src_fmt_i),
    .status_o(opgrp_outputs[6:2]),
    .tag_i(tag_i),
    .tag_o(opgrp_outputs[1:0]),
    .vectorial_op_i(vectorial_op_i)
  );
  \$paramod$23409113d3d81e12fc976ffc5bb52de58b20bb16\fpnew_opgroup_block_A94B6_B7406  \gen_operation_groups[1].i_opgroup_block  (
    .busy_o(opgrp_busy[1]),
    .clk_i(clk_i),
    .dst_fmt_i(dst_fmt_i),
    .extension_bit_o(opgrp_ext[1]),
    .flush_i(flush_i),
    .in_ready_o(opgrp_in_ready[1]),
    .in_valid_i(\gen_operation_groups[1].in_valid ),
    .int_fmt_i(int_fmt_i),
    .is_boxed_i({ \gen_operation_groups[0].input_boxed [13:12], \gen_operation_groups[0].input_boxed [10:9], \gen_operation_groups[0].input_boxed [13:12], 2'h3, \gen_operation_groups[0].input_boxed [1:0] }),
    .op_i(op_i),
    .op_mod_i(op_mod_i),
    .operands_i(operands_i[127:0]),
    .out_ready_i(opgrp_out_ready[1]),
    .out_valid_o(opgrp_out_valid[1]),
    .result_o(opgrp_outputs[141:78]),
    .rnd_mode_i(rnd_mode_i),
    .rst_ni(rst_ni),
    .src_fmt_i(src_fmt_i),
    .status_o(opgrp_outputs[77:73]),
    .tag_i(tag_i),
    .tag_o(opgrp_outputs[72:71]),
    .vectorial_op_i(vectorial_op_i)
  );
  \$paramod$d7bea08ed3d4f780db1801c11f4457098ad06b69\fpnew_opgroup_block_A94B6_B7406  \gen_operation_groups[2].i_opgroup_block  (
    .busy_o(opgrp_busy[2]),
    .clk_i(clk_i),
    .dst_fmt_i(dst_fmt_i),
    .extension_bit_o(opgrp_ext[2]),
    .flush_i(flush_i),
    .in_ready_o(opgrp_in_ready[2]),
    .in_valid_i(\gen_operation_groups[2].in_valid ),
    .int_fmt_i(int_fmt_i),
    .is_boxed_i({ \gen_operation_groups[0].input_boxed [13:12], \gen_operation_groups[0].input_boxed [10:9], \gen_operation_groups[0].input_boxed [13:12], 2'h3, \gen_operation_groups[0].input_boxed [1:0] }),
    .op_i(op_i),
    .op_mod_i(op_mod_i),
    .operands_i(operands_i[127:0]),
    .out_ready_i(opgrp_out_ready[2]),
    .out_valid_o(opgrp_out_valid[2]),
    .result_o(opgrp_outputs[212:149]),
    .rnd_mode_i(rnd_mode_i),
    .rst_ni(rst_ni),
    .src_fmt_i(src_fmt_i),
    .status_o(opgrp_outputs[148:144]),
    .tag_i(tag_i),
    .tag_o(opgrp_outputs[143:142]),
    .vectorial_op_i(vectorial_op_i)
  );
  \$paramod$c5a6ae4c95656295decaebc5a3a76e6fe788d2fd\fpnew_opgroup_block_A94B6_B7406  \gen_operation_groups[3].i_opgroup_block  (
    .busy_o(opgrp_busy[3]),
    .clk_i(clk_i),
    .dst_fmt_i(dst_fmt_i),
    .extension_bit_o(opgrp_ext[3]),
    .flush_i(flush_i),
    .in_ready_o(opgrp_in_ready[3]),
    .in_valid_i(\gen_operation_groups[3].in_valid ),
    .int_fmt_i(int_fmt_i),
    .is_boxed_i({ \gen_operation_groups[0].input_boxed [14:9], \gen_operation_groups[0].input_boxed [14:12], 3'h7, \gen_operation_groups[0].input_boxed [2:0] }),
    .op_i(op_i),
    .op_mod_i(op_mod_i),
    .operands_i(operands_i),
    .out_ready_i(opgrp_out_ready[3]),
    .out_valid_o(opgrp_out_valid[3]),
    .result_o(opgrp_outputs[283:220]),
    .rnd_mode_i(rnd_mode_i),
    .rst_ni(rst_ni),
    .src_fmt_i(src_fmt_i),
    .status_o(opgrp_outputs[219:215]),
    .tag_i(tag_i),
    .tag_o(opgrp_outputs[214:213]),
    .vectorial_op_i(vectorial_op_i)
  );
  \$paramod$c2409bf6d6fec6245b3dea150ba71180ba9a6bc5\rr_arb_tree_DE4E6_76EE6  i_arbiter (
    .clk_i(clk_i),
    .data_i(opgrp_outputs),
    .data_o(arbiter_output),
    .flush_i(flush_i),
    .gnt_i(out_ready_i),
    .gnt_o(opgrp_out_ready),
    .req_i(opgrp_out_valid),
    .req_o(out_valid_o),
    .rr_i(2'h0),
    .rst_ni(rst_ni)
  );
  assign \fpnew_pkg_get_opgroup$func$FPNewBlackbox_S2l1s.preprocessed.v:7827$198.op  = 4'hx;
  assign \fpnew_pkg_get_opgroup$func$FPNewBlackbox_S2l1s.preprocessed.v:7876$214.op  = 4'hx;
  assign \fpnew_pkg_get_opgroup$func$FPNewBlackbox_S2l1s.preprocessed.v:7876$230.op  = 4'hx;
  assign \fpnew_pkg_get_opgroup$func$FPNewBlackbox_S2l1s.preprocessed.v:7876$246.op  = 4'hx;
  assign \fpnew_pkg_get_opgroup$func$FPNewBlackbox_S2l1s.preprocessed.v:7876$262.op  = 4'hx;
  assign \gen_operation_groups[0].input_boxed [8:3] = { \gen_operation_groups[0].input_boxed [14:12], 3'h7 };
  assign \gen_operation_groups[0].slice_inputs.sv2v_autoblock_1.fmt  = 32'd5;
  assign \gen_operation_groups[1].input_boxed  = { \gen_operation_groups[0].input_boxed [13:12], \gen_operation_groups[0].input_boxed [10:9], \gen_operation_groups[0].input_boxed [13:12], 2'h3, \gen_operation_groups[0].input_boxed [1:0] };
  assign \gen_operation_groups[1].slice_inputs.sv2v_autoblock_1.fmt  = 32'd5;
  assign \gen_operation_groups[2].input_boxed  = { \gen_operation_groups[0].input_boxed [13:12], \gen_operation_groups[0].input_boxed [10:9], \gen_operation_groups[0].input_boxed [13:12], 2'h3, \gen_operation_groups[0].input_boxed [1:0] };
  assign \gen_operation_groups[2].slice_inputs.sv2v_autoblock_1.fmt  = 32'd5;
  assign \gen_operation_groups[3].input_boxed  = { \gen_operation_groups[0].input_boxed [14:9], \gen_operation_groups[0].input_boxed [14:12], 3'h7, \gen_operation_groups[0].input_boxed [2:0] };
  assign \gen_operation_groups[3].slice_inputs.sv2v_autoblock_1.fmt  = 32'd5;
  assign is_boxed = { \gen_operation_groups[0].input_boxed [14:9], \gen_operation_groups[0].input_boxed [14:12], 3'h7, \gen_operation_groups[0].input_boxed [2:0] };
  assign result_o = arbiter_output[70:7];
  assign status_o = arbiter_output[6:2];
  assign tag_o = arbiter_output[1:0];
endmodule

module \$paramod$62f5c6c40baf3ab700fec6049fa36a166c5bea61\fpnew_classifier (operands_i, is_boxed_i, info_o);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire \gen_num_values[0].is_boxed ;
  wire \gen_num_values[0].is_inf ;
  wire \gen_num_values[0].is_nan ;
  wire \gen_num_values[0].is_normal ;
  wire \gen_num_values[0].is_quiet ;
  wire \gen_num_values[0].is_signalling ;
  wire \gen_num_values[0].is_subnormal ;
  wire \gen_num_values[0].is_zero ;
  wire [31:0] \gen_num_values[0].value ;
  output [7:0] info_o;
  wire [7:0] info_o;
  input is_boxed_i;
  wire is_boxed_i;
  input [31:0] operands_i;
  wire [31:0] operands_i;
  assign _00_ = ! operands_i[30:23];
  assign _01_ = ! operands_i[22:0];
  assign _02_ = operands_i[30:23] == 8'hff;
  assign _03_ = ~ operands_i[22];
  assign _04_ = is_boxed_i && _12_;
  assign \gen_num_values[0].is_normal  = _04_ && _13_;
  assign \gen_num_values[0].is_zero  = _05_ && _01_;
  assign _05_ = is_boxed_i && _00_;
  assign \gen_num_values[0].is_subnormal  = _05_ && _09_;
  assign _06_ = _02_ && _01_;
  assign \gen_num_values[0].is_inf  = is_boxed_i && _06_;
  assign _07_ = _02_ && _14_;
  assign _08_ = is_boxed_i && \gen_num_values[0].is_nan ;
  assign \gen_num_values[0].is_signalling  = _08_ && _03_;
  assign \gen_num_values[0].is_quiet  = \gen_num_values[0].is_nan  && _11_;
  assign _09_ = ! \gen_num_values[0].is_zero ;
  assign _10_ = ! is_boxed_i;
  assign _11_ = ! \gen_num_values[0].is_signalling ;
  assign \gen_num_values[0].is_nan  = _10_ || _07_;
  assign _12_ = | operands_i[30:23];
  assign _13_ = operands_i[30:23] != 8'hff;
  assign _14_ = | operands_i[22:0];
  assign \gen_num_values[0].is_boxed  = is_boxed_i;
  assign \gen_num_values[0].value  = operands_i;
  assign info_o = { \gen_num_values[0].is_normal , \gen_num_values[0].is_subnormal , \gen_num_values[0].is_zero , \gen_num_values[0].is_inf , \gen_num_values[0].is_nan , \gen_num_values[0].is_signalling , \gen_num_values[0].is_quiet , is_boxed_i };
endmodule

module \$paramod$6ba5978208388c95aa7566a97f5babad3e109cc5\fpnew_opgroup_fmt_slice_E368D_75924 (clk_i, rst_ni, operands_i, is_boxed_i, rnd_mode_i, op_i, op_mod_i, vectorial_op_i, tag_i, in_valid_i, in_ready_o, flush_i, result_o, status_o, extension_bit_o, tag_o, out_valid_o, out_ready_i, busy_o);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  output busy_o;
  wire busy_o;
  input clk_i;
  wire clk_i;
  output extension_bit_o;
  wire extension_bit_o;
  input flush_i;
  wire flush_i;
  wire \gen_num_lanes[0].active_lane.in_valid ;
  wire [63:0] \gen_num_lanes[0].active_lane.local_operands ;
  wire [31:0] \gen_num_lanes[0].active_lane.op_result ;
  wire [4:0] \gen_num_lanes[0].active_lane.op_status ;
  wire \gen_num_lanes[0].active_lane.out_ready ;
  wire \gen_num_lanes[0].active_lane.out_valid ;
  wire [31:0] \gen_num_lanes[0].active_lane.prepare_input.sv2v_autoblock_1.i ;
  wire [31:0] \gen_num_lanes[0].local_result ;
  wire \gen_num_lanes[0].local_sign ;
  wire \gen_num_lanes[1].active_lane.in_valid ;
  wire [63:0] \gen_num_lanes[1].active_lane.local_operands ;
  wire [31:0] \gen_num_lanes[1].active_lane.op_result ;
  wire [4:0] \gen_num_lanes[1].active_lane.op_status ;
  wire \gen_num_lanes[1].active_lane.out_ready ;
  wire \gen_num_lanes[1].active_lane.out_valid ;
  wire [31:0] \gen_num_lanes[1].active_lane.prepare_input.sv2v_autoblock_1.i ;
  wire [31:0] \gen_num_lanes[1].local_result ;
  wire \gen_num_lanes[1].local_sign ;
  output in_ready_o;
  wire in_ready_o;
  input in_valid_i;
  wire in_valid_i;
  input [1:0] is_boxed_i;
  wire [1:0] is_boxed_i;
  wire [1:0] lane_busy;
  wire [19:0] lane_class_mask;
  wire [1:0] lane_ext_bit;
  wire [1:0] lane_in_ready;
  wire [1:0] lane_is_class;
  wire [1:0] lane_out_valid;
  wire [9:0] lane_status;
  wire [3:0] lane_tags;
  wire [1:0] lane_vectorial;
  input [3:0] op_i;
  wire [3:0] op_i;
  input op_mod_i;
  wire op_mod_i;
  input [127:0] operands_i;
  wire [127:0] operands_i;
  input out_ready_i;
  wire out_ready_i;
  output out_valid_o;
  wire out_valid_o;
  wire [31:0] \output_processing.sv2v_autoblock_2.i ;
  wire [4:0] \output_processing.temp_status ;
  wire result_is_class;
  wire result_is_vector;
  output [63:0] result_o;
  wire [63:0] result_o;
  input [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_i;
  input rst_ni;
  wire rst_ni;
  wire [63:0] slice_class_result;
  wire [63:0] slice_regular_result;
  wire [63:0] slice_result;
  wire [63:0] slice_vec_class_result;
  output [4:0] status_o;
  wire [4:0] status_o;
  input [1:0] tag_i;
  wire [1:0] tag_i;
  output [1:0] tag_o;
  wire [1:0] tag_o;
  wire vectorial_op;
  input vectorial_op_i;
  wire vectorial_op_i;
  assign \gen_num_lanes[1].active_lane.in_valid  = in_valid_i & vectorial_op_i;
  assign \gen_num_lanes[1].active_lane.out_ready  = out_ready_i & result_is_vector;
  assign lane_out_valid[1] = \gen_num_lanes[1].active_lane.out_valid  & result_is_vector;
  assign _06_ = lane_class_mask[19:10] == 10'h004;
  assign _07_ = lane_class_mask[19:10] == 10'h008;
  assign _08_ = lane_class_mask[9:0] == 10'h080;
  assign _00_ = lane_class_mask[9:0] == 10'h001;
  assign _09_ = lane_class_mask[9:0] == 10'h040;
  assign _01_ = lane_class_mask[9:0] == 10'h002;
  assign _10_ = lane_class_mask[9:0] == 10'h020;
  assign _02_ = lane_class_mask[9:0] == 10'h004;
  assign _11_ = lane_class_mask[9:0] == 10'h010;
  assign _03_ = lane_class_mask[9:0] == 10'h008;
  assign slice_vec_class_result[4] = lane_class_mask[9:0] == 10'h100;
  assign slice_vec_class_result[5] = lane_class_mask[9:0] == 10'h200;
  assign _12_ = lane_class_mask[19:10] == 10'h080;
  assign _04_ = lane_class_mask[19:10] == 10'h001;
  assign _13_ = lane_class_mask[19:10] == 10'h040;
  assign _05_ = lane_class_mask[19:10] == 10'h002;
  assign _14_ = lane_class_mask[19:10] == 10'h020;
  assign _15_ = lane_class_mask[19:10] == 10'h010;
  assign slice_vec_class_result[12] = lane_class_mask[19:10] == 10'h100;
  assign slice_vec_class_result[13] = lane_class_mask[19:10] == 10'h200;
  assign _16_ = _00_ || _01_;
  assign _17_ = _16_ || _02_;
  assign \gen_num_lanes[0].local_sign  = _17_ || _03_;
  assign _18_ = _04_ || _05_;
  assign _19_ = _18_ || _06_;
  assign \gen_num_lanes[1].local_sign  = _19_ || _07_;
  assign slice_vec_class_result[0] = _08_ || _00_;
  assign slice_vec_class_result[1] = _09_ || _01_;
  assign slice_vec_class_result[2] = _10_ || _02_;
  assign slice_vec_class_result[3] = _11_ || _03_;
  assign slice_vec_class_result[8] = _12_ || _04_;
  assign slice_vec_class_result[9] = _13_ || _05_;
  assign slice_vec_class_result[10] = _14_ || _06_;
  assign slice_vec_class_result[11] = _15_ || _07_;
  assign slice_vec_class_result[6] = ~ \gen_num_lanes[0].local_sign ;
  assign slice_vec_class_result[14] = ~ \gen_num_lanes[1].local_sign ;
  assign status_o = lane_status[4:0] | lane_status[9:5];
  assign busy_o = | lane_busy;
  assign \gen_num_lanes[0].local_result  = \gen_num_lanes[0].active_lane.out_valid  ? \gen_num_lanes[0].active_lane.op_result  : { extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o };
  assign \gen_num_lanes[1].local_result  = lane_out_valid[1] ? \gen_num_lanes[1].active_lane.op_result  : { extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o };
  assign lane_status[4:0] = \gen_num_lanes[0].active_lane.out_valid  ? \gen_num_lanes[0].active_lane.op_status  : 5'h00;
  assign lane_status[9:5] = lane_out_valid[1] ? \gen_num_lanes[1].active_lane.op_status  : 5'h00;
  assign slice_class_result = result_is_vector ? { 48'h000000000000, \gen_num_lanes[1].local_sign , slice_vec_class_result[14:8], \gen_num_lanes[0].local_sign , slice_vec_class_result[6:0] } : { 54'h00000000000000, lane_class_mask[9:0] };
  assign result_o = result_is_class ? slice_class_result : { \gen_num_lanes[1].local_result , \gen_num_lanes[0].local_result  };
  \$paramod$e29e543669871b34681ea2ce24e8ecb683df94c9\fpnew_noncomp_8EF6A_8033C  \gen_num_lanes[0].active_lane.genblk1.genblk1.lane_instance.i_noncomp  (
    .aux_i(vectorial_op_i),
    .aux_o(result_is_vector),
    .busy_o(lane_busy[0]),
    .class_mask_o(lane_class_mask[9:0]),
    .clk_i(clk_i),
    .extension_bit_o(extension_bit_o),
    .flush_i(flush_i),
    .in_ready_o(in_ready_o),
    .in_valid_i(in_valid_i),
    .is_boxed_i(is_boxed_i),
    .is_class_o(result_is_class),
    .op_i(op_i),
    .op_mod_i(op_mod_i),
    .operands_i({ operands_i[95:64], operands_i[31:0] }),
    .out_ready_i(out_ready_i),
    .out_valid_o(\gen_num_lanes[0].active_lane.out_valid ),
    .result_o(\gen_num_lanes[0].active_lane.op_result ),
    .rnd_mode_i(rnd_mode_i),
    .rst_ni(rst_ni),
    .status_o(\gen_num_lanes[0].active_lane.op_status ),
    .tag_i(tag_i),
    .tag_o(tag_o)
  );
  \$paramod$e29e543669871b34681ea2ce24e8ecb683df94c9\fpnew_noncomp_8EF6A_8033C  \gen_num_lanes[1].active_lane.genblk1.genblk1.lane_instance.i_noncomp  (
    .aux_i(vectorial_op_i),
    .aux_o(lane_vectorial[1]),
    .busy_o(lane_busy[1]),
    .class_mask_o(lane_class_mask[19:10]),
    .clk_i(clk_i),
    .extension_bit_o(lane_ext_bit[1]),
    .flush_i(flush_i),
    .in_ready_o(lane_in_ready[1]),
    .in_valid_i(\gen_num_lanes[1].active_lane.in_valid ),
    .is_boxed_i(is_boxed_i),
    .is_class_o(lane_is_class[1]),
    .op_i(op_i),
    .op_mod_i(op_mod_i),
    .operands_i({ operands_i[127:96], operands_i[63:32] }),
    .out_ready_i(\gen_num_lanes[1].active_lane.out_ready ),
    .out_valid_o(\gen_num_lanes[1].active_lane.out_valid ),
    .result_o(\gen_num_lanes[1].active_lane.op_result ),
    .rnd_mode_i(rnd_mode_i),
    .rst_ni(rst_ni),
    .status_o(\gen_num_lanes[1].active_lane.op_status ),
    .tag_i(tag_i),
    .tag_o(lane_tags[3:2])
  );
  assign \gen_num_lanes[0].active_lane.in_valid  = in_valid_i;
  assign \gen_num_lanes[0].active_lane.local_operands  = { operands_i[95:64], operands_i[31:0] };
  assign \gen_num_lanes[0].active_lane.out_ready  = out_ready_i;
  assign \gen_num_lanes[0].active_lane.prepare_input.sv2v_autoblock_1.i  = 32'd2;
  assign \gen_num_lanes[1].active_lane.local_operands  = { operands_i[127:96], operands_i[63:32] };
  assign \gen_num_lanes[1].active_lane.prepare_input.sv2v_autoblock_1.i  = 32'd2;
  assign lane_ext_bit[0] = extension_bit_o;
  assign lane_in_ready[0] = in_ready_o;
  assign lane_is_class[0] = result_is_class;
  assign lane_out_valid[0] = \gen_num_lanes[0].active_lane.out_valid ;
  assign lane_tags[1:0] = tag_o;
  assign lane_vectorial[0] = result_is_vector;
  assign out_valid_o = \gen_num_lanes[0].active_lane.out_valid ;
  assign \output_processing.sv2v_autoblock_2.i  = 32'd2;
  assign \output_processing.temp_status  = status_o;
  assign slice_regular_result = { \gen_num_lanes[1].local_result , \gen_num_lanes[0].local_result  };
  assign slice_result = { \gen_num_lanes[1].local_result , \gen_num_lanes[0].local_result  };
  assign { slice_vec_class_result[63:15], slice_vec_class_result[7] } = { 48'h000000000000, \gen_num_lanes[1].local_sign , \gen_num_lanes[0].local_sign  };
  assign vectorial_op = vectorial_op_i;
endmodule

module \$paramod$70f437425597cba7e2ae98844296c2aa2fca4ba2\fpnew_divsqrt_multi_1A2E7_2C16F (clk_i, rst_ni, operands_i, is_boxed_i, rnd_mode_i, op_i, dst_fmt_i, tag_i, aux_i, in_valid_i, in_ready_o, flush_i, result_o, status_o, extension_bit_o, tag_o, aux_o, out_valid_o, out_ready_i, busy_o);
  wire _00_;
  wire _01_;
  wire [1:0] _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire [1:0] _07_;
  wire _08_;
  wire _09_;
  wire [1:0] _10_;
  wire _11_;
  wire [1:0] _12_;
  wire [1:0] _13_;
  wire [1:0] _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  wire _35_;
  wire _36_;
  wire [31:0] adjusted_result;
  input [4:0] aux_i;
  wire [4:0] aux_i;
  output [4:0] aux_o;
  wire [4:0] aux_o;
  output busy_o;
  wire busy_o;
  input clk_i;
  wire clk_i;
  wire data_is_held;
  wire div_valid;
  wire [1:0] divsqrt_fmt;
  wire [127:0] divsqrt_operands;
  input [2:0] dst_fmt_i;
  wire [2:0] dst_fmt_i;
  wire [2:0] dst_fmt_q;
  output extension_bit_o;
  wire extension_bit_o;
  input flush_i;
  wire flush_i;
  wire \gen_output_pipeline[0].reg_ena ;
  reg [31:0] held_result_q;
  reg [4:0] held_status_q;
  wire hold_result;
  wire in_ready;
  output in_ready_o;
  wire in_ready_o;
  input in_valid_i;
  wire in_valid_i;
  wire in_valid_q;
  wire [4:0] inp_pipe_aux_q;
  wire [2:0] inp_pipe_dst_fmt_q;
  wire [3:0] inp_pipe_op_q;
  wire [63:0] inp_pipe_operands_q;
  wire inp_pipe_ready;
  wire [2:0] inp_pipe_rnd_mode_q;
  wire [1:0] inp_pipe_tag_q;
  wire inp_pipe_valid_q;
  wire input_is_fp8;
  input [9:0] is_boxed_i;
  wire [9:0] is_boxed_i;
  input [3:0] op_i;
  wire [3:0] op_i;
  wire [3:0] op_q;
  wire op_starting;
  input [63:0] operands_i;
  wire [63:0] operands_i;
  wire [63:0] operands_q;
  wire [9:0] out_pipe_aux_q;
  wire [0:1] out_pipe_ready;
  wire [63:0] out_pipe_result_q;
  wire [9:0] out_pipe_status_q;
  wire [3:0] out_pipe_tag_q;
  wire [0:1] out_pipe_valid_q;
  wire out_ready;
  input out_ready_i;
  wire out_ready_i;
  wire out_valid;
  output out_valid_o;
  wire out_valid_o;
  reg [4:0] result_aux_q;
  wire [31:0] result_d;
  wire result_is_fp8_q;
  output [31:0] result_o;
  wire [31:0] result_o;
  reg [1:0] result_tag_q;
  input [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_q;
  input rst_ni;
  wire rst_ni;
  wire sqrt_valid;
  wire [1:0] state_d;
  reg [1:0] state_q;
  wire [4:0] status_d;
  output [4:0] status_o;
  wire [4:0] status_o;
  wire [2:1] sv2v_tmp_20175;
  wire [5:1] sv2v_tmp_22101;
  wire [5:1] sv2v_tmp_2BF73;
  wire [5:1] sv2v_tmp_2ED07;
  wire [4:1] sv2v_tmp_4BFFB;
  wire [3:1] sv2v_tmp_54055;
  wire [32:1] sv2v_tmp_6C30D;
  wire sv2v_tmp_73AEA;
  wire [2:1] sv2v_tmp_74963;
  wire [64:1] sv2v_tmp_83757;
  wire [3:1] sv2v_tmp_857E9;
  wire sv2v_tmp_D06FD;
  input [1:0] tag_i;
  wire [1:0] tag_i;
  output [1:0] tag_o;
  wire [1:0] tag_o;
  wire unit_busy;
  wire unit_done;
  wire unit_ready;
  wire [63:0] unit_result;
  wire [4:0] unit_status;
  assign _15_ = in_valid_i & _25_;
  assign _16_ = _15_ & in_ready;
  assign div_valid = _16_ & _28_;
  assign _17_ = in_valid_i & _27_;
  assign _18_ = _17_ & in_ready;
  assign sqrt_valid = _18_ & _28_;
  assign \gen_output_pipeline[0].reg_ena  = out_ready & out_valid;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) state_q <= 2'h0;
    else if (_23_) state_q <= state_d;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) result_tag_q <= 2'h0;
    else if (op_starting) result_tag_q <= tag_i;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) result_aux_q <= 5'h00;
    else if (op_starting) result_aux_q <= aux_i;
  always @(posedge clk_i)
    if (hold_result) held_result_q <= unit_result[31:0];
  always @(posedge clk_i)
    if (hold_result) held_status_q <= unit_status;
  reg [4:0] _49_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _49_ <= 5'h00;
    else if (\gen_output_pipeline[0].reg_ena ) _49_ <= status_d;
  assign out_pipe_status_q[4:0] = _49_;
  reg \out_pipe_valid_q_reg[0] ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \out_pipe_valid_q_reg[0]  <= 1'h0;
    else if (_22_) \out_pipe_valid_q_reg[0]  <= _00_;
  assign out_pipe_valid_q[1] = \out_pipe_valid_q_reg[0] ;
  reg [4:0] _51_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _51_ <= 5'h00;
    else if (\gen_output_pipeline[0].reg_ena ) _51_ <= result_aux_q;
  assign out_pipe_aux_q[4:0] = _51_;
  reg [31:0] _52_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _52_ <= 32'd0;
    else if (\gen_output_pipeline[0].reg_ena ) _52_ <= result_d;
  assign out_pipe_result_q[31:0] = _52_;
  reg [1:0] _53_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _53_ <= 2'h0;
    else if (\gen_output_pipeline[0].reg_ena ) _53_ <= result_tag_q;
  assign out_pipe_tag_q[1:0] = _53_;
  assign _19_ = { _31_, unit_done, flush_i } != 3'h4;
  assign _20_ = { _32_, _26_, flush_i } != 3'h4;
  assign _21_ = { _30_, out_ready, flush_i } != 3'h4;
  assign _22_ = | { out_ready, flush_i };
  assign _23_ = & { _20_, _21_, _19_ };
  assign _24_ = | { _31_, _30_ };
  assign _25_ = op_i == 4'h4;
  assign _26_ = in_valid_i && unit_ready;
  assign _27_ = op_i != 4'h4;
  assign _28_ = ~ flush_i;
  assign _29_ = ~ out_pipe_valid_q[1];
  assign op_starting = div_valid | sqrt_valid;
  assign out_ready = out_ready_i | _29_;
  assign state_d = flush_i ? 2'h0 : _02_;
  assign out_valid = flush_i ? 1'h0 : _01_;
  assign unit_busy = flush_i ? 1'h0 : _03_;
  assign _14_ = out_ready ? _13_ : 2'hx;
  assign _09_ = out_ready ? _11_ : 1'h0;
  assign _13_ = _26_ ? 2'h1 : 2'h0;
  assign _11_ = _26_ ? 1'h1 : 1'h0;
  assign _12_ = out_ready ? _13_ : 2'h2;
  assign _08_ = out_ready ? 1'h0 : 1'h1;
  assign _10_ = unit_done ? _12_ : 2'hx;
  assign _04_ = unit_done ? _08_ : 1'h0;
  assign _05_ = unit_done ? _09_ : 1'h0;
  assign _06_ = unit_done ? 1'h1 : 1'h0;
  assign _07_ = _26_ ? 2'h1 : 2'hx;
  function [1:0] _81_;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _81_ = b[1:0];
      3'b?1?:
        _81_ = b[3:2];
      3'b1??:
        _81_ = b[5:4];
      default:
        _81_ = a;
    endcase
  endfunction
  assign _02_ = _81_(2'h0, { _07_, _10_, _14_ }, { _32_, _31_, _30_ });
  function [0:0] _82_;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _82_ = b[0:0];
      3'b?1?:
        _82_ = b[1:1];
      3'b1??:
        _82_ = b[2:2];
      default:
        _82_ = a;
    endcase
  endfunction
  assign in_ready = _82_(1'h0, { 1'h1, _05_, _09_ }, { _32_, _31_, _30_ });
  assign _32_ = ! state_q;
  assign _03_ = _24_ ? 1'h1 : 1'h0;
  assign data_is_held = _30_ ? 1'h1 : 1'h0;
  assign hold_result = _31_ ? _04_ : 1'h0;
  function [0:0] _87_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _87_ = b[0:0];
      2'b1?:
        _87_ = b[1:1];
      default:
        _87_ = a;
    endcase
  endfunction
  assign _01_ = _87_(1'h0, { _06_, 1'h1 }, { _31_, _30_ });
  assign _30_ = state_q == 2'h2;
  assign _31_ = state_q == 2'h1;
  function [1:0] _90_;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _90_ = b[1:0];
      3'b?1?:
        _90_ = b[3:2];
      3'b1??:
        _90_ = b[5:4];
      default:
        _90_ = a;
    endcase
  endfunction
  assign divsqrt_fmt = _90_(2'h2, 6'h07, { _35_, _34_, _33_ });
  assign _33_ = dst_fmt_i == 3'h4;
  assign _34_ = dst_fmt_i == 3'h1;
  assign _35_ = ! dst_fmt_i;
  assign busy_o = | { unit_busy, out_valid, out_pipe_valid_q[1], in_valid_i };
  assign result_d = data_is_held ? held_result_q : unit_result[31:0];
  assign status_d = data_is_held ? held_status_q : unit_status;
  assign _36_ = out_ready ? out_valid : 1'hx;
  assign _00_ = flush_i ? 1'h0 : _36_;
  div_sqrt_top_mvp i_divsqrt_lei (
    .Clk_CI(clk_i),
    .Div_start_SI(div_valid),
    .Done_SO(unit_done),
    .Fflags_SO(unit_status),
    .Format_sel_SI(divsqrt_fmt),
    .Kill_SI(flush_i),
    .Operand_a_DI({ 32'h00000000, operands_i[31:0] }),
    .Operand_b_DI({ 32'h00000000, operands_i[63:32] }),
    .Precision_ctl_SI(6'h00),
    .RM_SI(rnd_mode_i),
    .Ready_SO(unit_ready),
    .Result_DO(unit_result),
    .Rst_RBI(rst_ni),
    .Sqrt_start_SI(sqrt_valid)
  );
  assign adjusted_result = unit_result[31:0];
  assign aux_o = out_pipe_aux_q[4:0];
  assign divsqrt_operands = { 32'h00000000, operands_i[63:32], 32'h00000000, operands_i[31:0] };
  assign dst_fmt_q = dst_fmt_i;
  assign extension_bit_o = 1'h1;
  assign in_ready_o = in_ready;
  assign in_valid_q = in_valid_i;
  assign inp_pipe_aux_q = aux_i;
  assign inp_pipe_dst_fmt_q = dst_fmt_i;
  assign inp_pipe_op_q = op_i;
  assign inp_pipe_operands_q = operands_i;
  assign inp_pipe_ready = in_ready;
  assign inp_pipe_rnd_mode_q = rnd_mode_i;
  assign inp_pipe_tag_q = tag_i;
  assign inp_pipe_valid_q = in_valid_i;
  assign input_is_fp8 = 1'h0;
  assign op_q = op_i;
  assign operands_q = operands_i;
  assign out_pipe_aux_q[9:5] = result_aux_q;
  assign out_pipe_ready = { out_ready, out_ready_i };
  assign out_pipe_result_q[63:32] = result_d;
  assign out_pipe_status_q[9:5] = status_d;
  assign out_pipe_tag_q[3:2] = result_tag_q;
  assign out_pipe_valid_q[0] = out_valid;
  assign out_valid_o = out_pipe_valid_q[1];
  assign result_is_fp8_q = 1'h0;
  assign result_o = out_pipe_result_q[31:0];
  assign rnd_mode_q = rnd_mode_i;
  assign status_o = out_pipe_status_q[4:0];
  assign sv2v_tmp_20175 = result_tag_q;
  assign sv2v_tmp_22101 = aux_i;
  assign sv2v_tmp_2BF73 = result_aux_q;
  assign sv2v_tmp_2ED07 = status_d;
  assign sv2v_tmp_4BFFB = op_i;
  assign sv2v_tmp_54055 = dst_fmt_i;
  assign sv2v_tmp_6C30D = result_d;
  assign sv2v_tmp_73AEA = in_valid_i;
  assign sv2v_tmp_74963 = tag_i;
  assign sv2v_tmp_83757 = operands_i;
  assign sv2v_tmp_857E9 = rnd_mode_i;
  assign sv2v_tmp_D06FD = out_valid;
  assign tag_o = out_pipe_tag_q[1:0];
endmodule

module \$paramod$72ba5c45156d9967735e5d7f231ed726a8170f73\fpnew_opgroup_block_A94B6_B7406 (clk_i, rst_ni, operands_i, is_boxed_i, rnd_mode_i, op_i, op_mod_i, src_fmt_i, dst_fmt_i, int_fmt_i, vectorial_op_i, tag_i, in_valid_i, in_ready_o, flush_i, result_o, status_o, extension_bit_o, tag_o, out_valid_o, out_ready_i
, busy_o);
  wire _0_;
  wire _1_;
  wire [71:0] arbiter_output;
  output busy_o;
  wire busy_o;
  input clk_i;
  wire clk_i;
  input [2:0] dst_fmt_i;
  wire [2:0] dst_fmt_i;
  output extension_bit_o;
  wire extension_bit_o;
  input flush_i;
  wire flush_i;
  wire [4:0] fmt_busy;
  wire [4:0] fmt_in_ready;
  wire [4:0] fmt_out_ready;
  wire [4:0] fmt_out_valid;
  wire [359:0] fmt_outputs;
  wire \gen_parallel_slices[0].active_format.in_valid ;
  output in_ready_o;
  wire in_ready_o;
  input in_valid_i;
  wire in_valid_i;
  input [1:0] int_fmt_i;
  wire [1:0] int_fmt_i;
  input [14:0] is_boxed_i;
  wire [14:0] is_boxed_i;
  input [3:0] op_i;
  wire [3:0] op_i;
  input op_mod_i;
  wire op_mod_i;
  input [191:0] operands_i;
  wire [191:0] operands_i;
  input out_ready_i;
  wire out_ready_i;
  output out_valid_o;
  wire out_valid_o;
  output [63:0] result_o;
  wire [63:0] result_o;
  input [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_i;
  input rst_ni;
  wire rst_ni;
  input [2:0] src_fmt_i;
  wire [2:0] src_fmt_i;
  output [4:0] status_o;
  wire [4:0] status_o;
  input [1:0] tag_i;
  wire [1:0] tag_i;
  output [1:0] tag_o;
  wire [1:0] tag_o;
  input vectorial_op_i;
  wire vectorial_op_i;
  assign in_ready_o = in_valid_i & _1_;
  assign \gen_parallel_slices[0].active_format.in_valid  = in_valid_i & _0_;
  assign _0_ = ! dst_fmt_i;
  wire [4:0] _6_ = { 4'h0, fmt_in_ready[0] };
  assign _1_ = _6_[dst_fmt_i +: 1];
  \$paramod$ca28389d3767f3d8e311b7cb6f630f24efabb5e2\fpnew_opgroup_fmt_slice_E368D_75924  \gen_parallel_slices[0].active_format.i_fmt_slice  (
    .busy_o(busy_o),
    .clk_i(clk_i),
    .extension_bit_o(fmt_outputs[2]),
    .flush_i(flush_i),
    .in_ready_o(fmt_in_ready[0]),
    .in_valid_i(\gen_parallel_slices[0].active_format.in_valid ),
    .is_boxed_i(is_boxed_i[2:0]),
    .op_i(op_i),
    .op_mod_i(op_mod_i),
    .operands_i(operands_i),
    .out_ready_i(fmt_out_ready[0]),
    .out_valid_o(fmt_out_valid[0]),
    .result_o(fmt_outputs[71:8]),
    .rnd_mode_i(rnd_mode_i),
    .rst_ni(rst_ni),
    .status_o(fmt_outputs[7:3]),
    .tag_i(tag_i),
    .tag_o(fmt_outputs[1:0]),
    .vectorial_op_i(vectorial_op_i)
  );
  \$paramod$2d98b2ed91e87ed1e332161bf5d593baf43453be\rr_arb_tree_52163_F264E  i_arbiter (
    .clk_i(clk_i),
    .data_i({ 288'hfffffffffffffffffdfffffffffffffffffdfffffffffffffffffdfffffffffffffffffd, fmt_outputs[71:0] }),
    .data_o(arbiter_output),
    .flush_i(flush_i),
    .gnt_i(out_ready_i),
    .gnt_o(fmt_out_ready),
    .req_i({ 4'h0, fmt_out_valid[0] }),
    .req_o(out_valid_o),
    .rr_i(3'h0),
    .rst_ni(rst_ni)
  );
  assign extension_bit_o = arbiter_output[2];
  assign fmt_busy = { 4'h0, busy_o };
  assign fmt_in_ready[4:1] = 4'h0;
  assign fmt_out_valid[4:1] = 4'h0;
  assign fmt_outputs[359:72] = 288'hfffffffffffffffffdfffffffffffffffffdfffffffffffffffffdfffffffffffffffffd;
  assign result_o = arbiter_output[71:8];
  assign status_o = arbiter_output[7:3];
  assign tag_o = arbiter_output[1:0];
endmodule

module \$paramod$85706ecd625e0110cf3fb9a4d880c019350a6cdb\fpnew_classifier (operands_i, is_boxed_i, info_o);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire \gen_num_values[0].is_boxed ;
  wire \gen_num_values[0].is_inf ;
  wire \gen_num_values[0].is_nan ;
  wire \gen_num_values[0].is_normal ;
  wire \gen_num_values[0].is_quiet ;
  wire \gen_num_values[0].is_signalling ;
  wire \gen_num_values[0].is_subnormal ;
  wire \gen_num_values[0].is_zero ;
  wire [31:0] \gen_num_values[0].value ;
  wire \gen_num_values[1].is_boxed ;
  wire \gen_num_values[1].is_inf ;
  wire \gen_num_values[1].is_nan ;
  wire \gen_num_values[1].is_normal ;
  wire \gen_num_values[1].is_quiet ;
  wire \gen_num_values[1].is_signalling ;
  wire \gen_num_values[1].is_subnormal ;
  wire \gen_num_values[1].is_zero ;
  wire [31:0] \gen_num_values[1].value ;
  output [15:0] info_o;
  wire [15:0] info_o;
  input [1:0] is_boxed_i;
  wire [1:0] is_boxed_i;
  input [63:0] operands_i;
  wire [63:0] operands_i;
  assign _00_ = ! operands_i[30:23];
  assign _02_ = ! operands_i[62:55];
  assign _01_ = ! operands_i[22:0];
  assign _03_ = ! operands_i[54:32];
  assign _04_ = operands_i[30:23] == 8'hff;
  assign _05_ = operands_i[62:55] == 8'hff;
  assign _06_ = ~ operands_i[22];
  assign _07_ = ~ operands_i[54];
  assign _08_ = is_boxed_i[0] && _24_;
  assign \gen_num_values[0].is_normal  = _08_ && _25_;
  assign _09_ = is_boxed_i[1] && _26_;
  assign \gen_num_values[1].is_normal  = _09_ && _27_;
  assign \gen_num_values[0].is_zero  = _10_ && _01_;
  assign \gen_num_values[1].is_zero  = _11_ && _03_;
  assign _10_ = is_boxed_i[0] && _00_;
  assign \gen_num_values[0].is_subnormal  = _10_ && _18_;
  assign _11_ = is_boxed_i[1] && _02_;
  assign \gen_num_values[1].is_subnormal  = _11_ && _19_;
  assign _12_ = _04_ && _01_;
  assign \gen_num_values[0].is_inf  = is_boxed_i[0] && _12_;
  assign _13_ = _05_ && _03_;
  assign \gen_num_values[1].is_inf  = is_boxed_i[1] && _13_;
  assign _14_ = _04_ && _28_;
  assign _15_ = _05_ && _29_;
  assign _16_ = is_boxed_i[0] && \gen_num_values[0].is_nan ;
  assign \gen_num_values[0].is_signalling  = _16_ && _06_;
  assign _17_ = is_boxed_i[1] && \gen_num_values[1].is_nan ;
  assign \gen_num_values[1].is_signalling  = _17_ && _07_;
  assign \gen_num_values[0].is_quiet  = \gen_num_values[0].is_nan  && _22_;
  assign \gen_num_values[1].is_quiet  = \gen_num_values[1].is_nan  && _23_;
  assign _18_ = ! \gen_num_values[0].is_zero ;
  assign _19_ = ! \gen_num_values[1].is_zero ;
  assign _20_ = ! is_boxed_i[0];
  assign _21_ = ! is_boxed_i[1];
  assign _22_ = ! \gen_num_values[0].is_signalling ;
  assign _23_ = ! \gen_num_values[1].is_signalling ;
  assign \gen_num_values[0].is_nan  = _20_ || _14_;
  assign \gen_num_values[1].is_nan  = _21_ || _15_;
  assign _24_ = | operands_i[30:23];
  assign _25_ = operands_i[30:23] != 8'hff;
  assign _26_ = | operands_i[62:55];
  assign _27_ = operands_i[62:55] != 8'hff;
  assign _28_ = | operands_i[22:0];
  assign _29_ = | operands_i[54:32];
  assign \gen_num_values[0].is_boxed  = is_boxed_i[0];
  assign \gen_num_values[0].value  = operands_i[31:0];
  assign \gen_num_values[1].is_boxed  = is_boxed_i[1];
  assign \gen_num_values[1].value  = operands_i[63:32];
  assign info_o = { \gen_num_values[1].is_normal , \gen_num_values[1].is_subnormal , \gen_num_values[1].is_zero , \gen_num_values[1].is_inf , \gen_num_values[1].is_nan , \gen_num_values[1].is_signalling , \gen_num_values[1].is_quiet , is_boxed_i[1], \gen_num_values[0].is_normal , \gen_num_values[0].is_subnormal , \gen_num_values[0].is_zero , \gen_num_values[0].is_inf , \gen_num_values[0].is_nan , \gen_num_values[0].is_signalling , \gen_num_values[0].is_quiet , is_boxed_i[0] };
endmodule

module \$paramod$8a3e6a0dc9f2fe8ecb54aa644130f5a8b9a2e1d9\fpnew_cast_multi_BB75A_A18A7 (clk_i, rst_ni, operands_i, is_boxed_i, rnd_mode_i, op_i, op_mod_i, src_fmt_i, dst_fmt_i, int_fmt_i, tag_i, aux_i, in_valid_i, in_ready_o, flush_i, result_o, status_o, extension_bit_o, tag_o, aux_o, out_valid_o
, out_ready_i, busy_o);
  wire [31:0] _000_;
  wire _001_;
  wire [4:0] _002_;
  wire [8:0] _003_;
  wire [31:0] _004_;
  wire _005_;
  wire [48:0] _006_;
  wire [4:0] _007_;
  wire [8:0] _008_;
  wire _009_;
  wire [4:0] _010_;
  wire [8:0] _011_;
  wire [4:0] _012_;
  wire [4:0] _013_;
  wire [31:0] _014_;
  wire [31:0] _015_;
  wire [31:0] _016_;
  wire [31:0] _017_;
  wire [31:0] _018_;
  wire [31:0] _019_;
  wire [31:0] _020_;
  wire [31:0] _021_;
  wire [31:0] _022_;
  wire [31:0] _023_;
  wire [31:0] _024_;
  wire [31:0] _025_;
  wire [8:0] _026_;
  wire [31:0] _027_;
  wire [31:0] _028_;
  wire [31:0] _029_;
  wire [31:0] _030_;
  wire [31:0] _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire [31:0] _046_;
  wire [31:0] _047_;
  wire [31:0] _048_;
  wire [23:0] _049_;
  wire [31:0] _050_;
  wire [31:0] _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire [31:0] _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire [23:0] _071_;
  wire _072_;
  wire [31:0] _073_;
  wire [31:0] _074_;
  wire [31:0] _075_;
  wire [31:0] _076_;
  wire [31:0] _077_;
  wire [31:0] _078_;
  wire [31:0] _079_;
  wire [31:0] _080_;
  wire [31:0] _081_;
  wire [31:0] _082_;
  wire [31:0] _083_;
  wire [31:0] _084_;
  wire [31:0] _085_;
  wire [31:0] _086_;
  wire [31:0] _087_;
  wire [31:0] _088_;
  wire [31:0] _089_;
  wire [8:0] _090_;
  wire [8:0] _091_;
  wire [31:0] _092_;
  wire [31:0] _093_;
  wire [31:0] _094_;
  wire [31:0] _095_;
  wire [31:0] _096_;
  wire [31:0] _097_;
  wire [31:0] _098_;
  wire _099_;
  input [4:0] aux_i;
  wire [4:0] aux_i;
  output [4:0] aux_o;
  wire [4:0] aux_o;
  output busy_o;
  wire busy_o;
  input clk_i;
  wire clk_i;
  wire [4:0] denorm_shamt;
  wire [8:0] destination_exp;
  wire [8:0] destination_exp_q;
  wire [48:0] destination_mant;
  input [2:0] dst_fmt_i;
  wire [2:0] dst_fmt_i;
  wire [2:0] dst_fmt_q;
  wire [2:0] dst_fmt_q2;
  wire dst_is_int;
  wire dst_is_int_q;
  wire [23:0] encoded_mant;
  wire extension_bit;
  output extension_bit_o;
  wire extension_bit_o;
  wire [8:0] final_exp;
  wire [-1:0] final_int;
  wire [22:0] final_mant;
  input flush_i;
  wire flush_i;
  wire [44:0] fmt_exponent;
  wire [119:0] fmt_mantissa;
  wire [4:0] fmt_of_after_round;
  wire [159:0] fmt_pre_round_abs;
  wire [159:0] fmt_result;
  wire [44:0] fmt_shift_compensation;
  wire [4:0] fmt_sign;
  wire [159:0] fmt_special_result;
  wire [4:0] fmt_uf_after_round;
  wire [8:0] fp_input_exp;
  wire [4:0] fp_regular_status;
  wire [31:0] fp_result;
  wire fp_result_is_special;
  wire [1:0] fp_round_sticky_bits;
  wire [31:0] fp_special_result;
  wire [4:0] fp_special_status;
  wire [4:0] fp_status;
  wire [31:0] \fpnew_pkg_bias$func$FPNewBlackbox_S2l1s.preprocessed.v:3749$4279.$result ;
  wire [2:0] \fpnew_pkg_bias$func$FPNewBlackbox_S2l1s.preprocessed.v:3749$4419.fmt ;
  wire [31:0] \fpnew_pkg_bias$func$FPNewBlackbox_S2l1s.preprocessed.v:3776$4280.$result ;
  wire [2:0] \fpnew_pkg_bias$func$FPNewBlackbox_S2l1s.preprocessed.v:3776$4420.fmt ;
  wire [2:0] \fpnew_pkg_exp_bits$func$FPNewBlackbox_S2l1s.preprocessed.v:3985$4293.fmt ;
  wire [2:0] \fpnew_pkg_exp_bits$func$FPNewBlackbox_S2l1s.preprocessed.v:3986$4294.fmt ;
  wire [1:0] \fpnew_pkg_int_width$func$FPNewBlackbox_S2l1s.preprocessed.v:3976$4287.ifmt ;
  wire [2:0] \fpnew_pkg_man_bits$func$FPNewBlackbox_S2l1s.preprocessed.v:3970$4286.fmt ;
  wire [2:0] \fpnew_pkg_man_bits$func$FPNewBlackbox_S2l1s.preprocessed.v:3990$4295.fmt ;
  wire [2:0] \fpnew_pkg_man_bits$func$FPNewBlackbox_S2l1s.preprocessed.v:3995$4296.fmt ;
  wire [2:0] \fpnew_pkg_man_bits$func$FPNewBlackbox_S2l1s.preprocessed.v:3997$4297.fmt ;
  wire \gen_inside_pipeline[0].reg_ena ;
  wire [32:1] \gen_int_res_sign_ext[0].inactive_format.sv2v_tmp_F6FA8 ;
  wire [32:1] \gen_int_res_sign_ext[1].inactive_format.sv2v_tmp_F6FA8 ;
  wire [32:1] \gen_int_res_sign_ext[2].inactive_format.sv2v_tmp_F6FA8 ;
  wire [32:1] \gen_int_res_sign_ext[3].inactive_format.sv2v_tmp_F6FA8 ;
  wire [32:1] \gen_res_assemble[1].inactive_format.sv2v_tmp_C33E0 ;
  wire [32:1] \gen_res_assemble[2].inactive_format.sv2v_tmp_C33E0 ;
  wire [32:1] \gen_res_assemble[3].inactive_format.sv2v_tmp_C33E0 ;
  wire [32:1] \gen_res_assemble[4].inactive_format.sv2v_tmp_C33E0 ;
  wire [24:1] \gen_sign_extend_int[0].inactive_format.sv2v_tmp_5B946 ;
  wire [24:1] \gen_sign_extend_int[1].inactive_format.sv2v_tmp_5B946 ;
  wire [24:1] \gen_sign_extend_int[2].inactive_format.sv2v_tmp_5B946 ;
  wire [24:1] \gen_sign_extend_int[3].inactive_format.sv2v_tmp_5B946 ;
  wire \gen_sign_inject[1].inactive_format.sv2v_tmp_4A747 ;
  wire [32:1] \gen_sign_inject[1].inactive_format.sv2v_tmp_649FB ;
  wire \gen_sign_inject[1].inactive_format.sv2v_tmp_90681 ;
  wire \gen_sign_inject[2].inactive_format.sv2v_tmp_4A747 ;
  wire [32:1] \gen_sign_inject[2].inactive_format.sv2v_tmp_649FB ;
  wire \gen_sign_inject[2].inactive_format.sv2v_tmp_90681 ;
  wire \gen_sign_inject[3].inactive_format.sv2v_tmp_4A747 ;
  wire [32:1] \gen_sign_inject[3].inactive_format.sv2v_tmp_649FB ;
  wire \gen_sign_inject[3].inactive_format.sv2v_tmp_90681 ;
  wire \gen_sign_inject[4].inactive_format.sv2v_tmp_4A747 ;
  wire [32:1] \gen_sign_inject[4].inactive_format.sv2v_tmp_649FB ;
  wire \gen_sign_inject[4].inactive_format.sv2v_tmp_90681 ;
  wire [31:0] \gen_special_results[0].active_format.special_results.special_res ;
  wire [32:1] \gen_special_results[1].inactive_format.sv2v_tmp_B718F ;
  wire [32:1] \gen_special_results[2].inactive_format.sv2v_tmp_B718F ;
  wire [32:1] \gen_special_results[3].inactive_format.sv2v_tmp_B718F ;
  wire [32:1] \gen_special_results[4].inactive_format.sv2v_tmp_B718F ;
  wire [32:1] \gen_special_results_int[0].inactive_format.sv2v_tmp_99B6D ;
  wire [32:1] \gen_special_results_int[1].inactive_format.sv2v_tmp_99B6D ;
  wire [32:1] \gen_special_results_int[2].inactive_format.sv2v_tmp_99B6D ;
  wire [32:1] \gen_special_results_int[3].inactive_format.sv2v_tmp_99B6D ;
  wire [95:0] ifmt_input_val;
  wire [127:0] ifmt_pre_round_abs;
  wire [127:0] ifmt_special_result;
  output in_ready_o;
  wire in_ready_o;
  input in_valid_i;
  wire in_valid_i;
  wire [39:0] info;
  wire [7:0] info_q;
  wire [4:0] inp_pipe_aux_q;
  wire [2:0] inp_pipe_dst_fmt_q;
  wire [1:0] inp_pipe_int_fmt_q;
  wire [4:0] inp_pipe_is_boxed_q;
  wire inp_pipe_op_mod_q;
  wire [3:0] inp_pipe_op_q;
  wire [31:0] inp_pipe_operands_q;
  wire inp_pipe_ready;
  wire [2:0] inp_pipe_rnd_mode_q;
  wire [2:0] inp_pipe_src_fmt_q;
  wire [1:0] inp_pipe_tag_q;
  wire inp_pipe_valid_q;
  wire [8:0] input_exp;
  wire [8:0] input_exp_q;
  wire [23:0] input_mant;
  wire [23:0] input_mant_q;
  wire input_sign;
  wire input_sign_q;
  input [1:0] int_fmt_i;
  wire [1:0] int_fmt_i;
  wire [1:0] int_fmt_q;
  wire [1:0] int_fmt_q2;
  wire [8:0] int_input_exp;
  wire [23:0] int_mantissa;
  wire [4:0] int_regular_status;
  wire [31:0] int_result;
  wire int_result_is_special;
  wire [1:0] int_round_sticky_bits;
  wire int_sign;
  wire [31:0] int_special_result;
  wire [4:0] int_special_status;
  wire [4:0] int_status;
  wire [23:0] int_value;
  input [4:0] is_boxed_i;
  wire [4:0] is_boxed_i;
  wire [4:0] is_boxed_q;
  wire mant_is_zero;
  wire mant_is_zero_q;
  wire [9:0] mid_pipe_aux_q;
  wire [17:0] mid_pipe_dest_exp_q;
  wire [5:0] mid_pipe_dst_fmt_q;
  wire [0:1] mid_pipe_dst_is_int_q;
  wire [15:0] mid_pipe_info_q;
  wire [17:0] mid_pipe_input_exp_q;
  wire [47:0] mid_pipe_input_mant_q;
  wire [0:1] mid_pipe_input_sign_q;
  wire [3:0] mid_pipe_int_fmt_q;
  wire [0:1] mid_pipe_mant_zero_q;
  wire [0:1] mid_pipe_op_mod_q;
  wire [0:1] mid_pipe_ready;
  wire [5:0] mid_pipe_rnd_mode_q;
  wire [5:0] mid_pipe_src_fmt_q;
  wire [0:1] mid_pipe_src_is_int_q;
  wire [3:0] mid_pipe_tag_q;
  wire [0:1] mid_pipe_valid_q;
  wire of_after_round;
  wire of_before_round;
  input [3:0] op_i;
  wire [3:0] op_i;
  input op_mod_i;
  wire op_mod_i;
  wire op_mod_q;
  wire op_mod_q2;
  input [31:0] operands_i;
  wire [31:0] operands_i;
  wire [31:0] operands_q;
  wire [4:0] out_pipe_aux_q;
  wire out_pipe_ext_bit_q;
  wire out_pipe_ready;
  wire [31:0] out_pipe_result_q;
  wire [4:0] out_pipe_status_q;
  wire [1:0] out_pipe_tag_q;
  wire out_pipe_valid_q;
  input out_ready_i;
  wire out_ready_i;
  output out_valid_o;
  wire out_valid_o;
  wire [31:0] pre_round_abs;
  wire [48:0] preshift_mant;
  wire [4:0] renorm_shamt;
  wire [5:0] renorm_shamt_sgn;
  wire [31:0] result_d;
  output [31:0] result_o;
  wire [31:0] result_o;
  wire result_true_zero;
  input [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_q;
  wire [1:0] round_sticky_bits;
  wire [31:0] rounded_abs;
  wire [31:0] rounded_int_res;
  wire rounded_int_res_zero;
  wire rounded_sign;
  input rst_ni;
  wire rst_ni;
  wire [8:0] src_bias;
  wire [8:0] src_exp;
  input [2:0] src_fmt_i;
  wire [2:0] src_fmt_i;
  wire [2:0] src_fmt_q;
  wire [2:0] src_fmt_q2;
  wire src_is_int;
  wire src_is_int_q;
  wire [8:0] src_offset;
  wire [8:0] src_subnormal;
  wire [4:0] status_d;
  output [4:0] status_o;
  wire [4:0] status_o;
  wire [2:1] sv2v_tmp_03C65;
  wire [5:1] sv2v_tmp_14D79;
  wire [2:1] sv2v_tmp_18FC5;
  wire sv2v_tmp_25EE6;
  wire [2:1] sv2v_tmp_2AE08;
  wire [3:1] sv2v_tmp_32E16;
  wire [24:1] sv2v_tmp_3BE44;
  wire sv2v_tmp_3D9F8;
  wire sv2v_tmp_3DFAC;
  wire [32:1] sv2v_tmp_4086F;
  wire sv2v_tmp_4351A;
  wire [3:1] sv2v_tmp_45ED9;
  wire [8:1] sv2v_tmp_48E57;
  wire sv2v_tmp_4E95C;
  wire [3:1] sv2v_tmp_6AF63;
  wire [32:1] sv2v_tmp_6E45B;
  wire sv2v_tmp_73AEA;
  wire sv2v_tmp_88AB6;
  wire sv2v_tmp_8F736;
  wire [9:1] sv2v_tmp_9AB08;
  wire [4:1] sv2v_tmp_AD1FB;
  wire [2:1] sv2v_tmp_B46A2;
  wire [5:1] sv2v_tmp_B7C45;
  wire [5:1] sv2v_tmp_C23AE;
  wire [5:1] sv2v_tmp_C47E1;
  wire [2:1] sv2v_tmp_CA55F;
  wire sv2v_tmp_CB10A;
  wire [3:1] sv2v_tmp_CB295;
  wire sv2v_tmp_D1C37;
  wire [5:1] sv2v_tmp_D4403;
  wire [3:1] sv2v_tmp_DE9EA;
  wire [9:1] sv2v_tmp_F626F;
  wire [3:1] sv2v_tmp_FC1E4;
  input [1:0] tag_i;
  wire [1:0] tag_i;
  output [1:0] tag_o;
  wire [1:0] tag_o;
  wire uf_after_round;
  assign _018_ = _021_ + 32'd1;
  assign _017_ = _022_ + 32'd1;
  assign _019_ = _023_ + 32'd1;
  assign _020_ = _024_ + 32'd1;
  assign _021_ = { _046_[31:6], 6'h00 } + 32'd63;
  assign _022_ = { _046_[31:6], 6'h00 } + 32'd31;
  assign _023_ = { _047_[31:6], 6'h00 } + 32'd63;
  assign _024_ = { _048_[31:6], 6'h00 } + 32'd63;
  assign _025_ = { 26'h0000000, src_fmt_i, 3'h0 } + 32'd6;
  assign _026_ = src_exp + { 8'h00, src_subnormal[0] };
  assign fp_input_exp = _091_ + src_offset;
  assign { _027_[31:9], mid_pipe_dest_exp_q[17:9] } = $signed(input_exp) + $signed(\fpnew_pkg_bias$func$FPNewBlackbox_S2l1s.preprocessed.v:3776$4280.$result );
  assign _028_ = _095_ + mid_pipe_op_mod_q[1];
  assign _029_ = _093_[4:0] + 32'd1;
  assign _030_ = _093_[4:0] + 32'd2;
  assign _031_ = _030_ + _000_;
  assign int_sign = int_value[23] & _052_;
  assign \gen_inside_pipeline[0].reg_ena  = in_ready_o & in_valid_i;
  assign _032_ = mid_pipe_src_is_int_q[1] & mid_pipe_mant_zero_q[1];
  assign fp_result_is_special = _054_ & _059_;
  assign _033_ = mid_pipe_input_sign_q[1] & mid_pipe_op_mod_q[1];
  assign _034_ = _033_ & _056_;
  assign fp_regular_status[4] = mid_pipe_src_is_int_q[1] & _063_;
  assign fp_regular_status[2] = _054_ & _035_;
  assign fp_regular_status[1] = uf_after_round & fp_regular_status[0];
  assign _035_ = _057_ & _063_;
  reg [8:0] _126_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _126_ <= 9'h000;
    else if (\gen_inside_pipeline[0].reg_ena ) _126_ <= input_exp;
  assign mid_pipe_input_exp_q[8:0] = _126_;
  reg \mid_pipe_src_is_int_q_reg[0] ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \mid_pipe_src_is_int_q_reg[0]  <= 1'h0;
    else if (\gen_inside_pipeline[0].reg_ena ) \mid_pipe_src_is_int_q_reg[0]  <= src_is_int;
  assign mid_pipe_src_is_int_q[1] = \mid_pipe_src_is_int_q_reg[0] ;
  reg \mid_pipe_dst_is_int_q_reg[0] ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \mid_pipe_dst_is_int_q_reg[0]  <= 1'h0;
    else if (\gen_inside_pipeline[0].reg_ena ) \mid_pipe_dst_is_int_q_reg[0]  <= dst_is_int;
  assign mid_pipe_dst_is_int_q[1] = \mid_pipe_dst_is_int_q_reg[0] ;
  reg \mid_pipe_input_sign_q_reg[0] ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \mid_pipe_input_sign_q_reg[0]  <= 1'h0;
    else if (\gen_inside_pipeline[0].reg_ena ) \mid_pipe_input_sign_q_reg[0]  <= input_sign;
  assign mid_pipe_input_sign_q[1] = \mid_pipe_input_sign_q_reg[0] ;
  reg \mid_pipe_valid_q_reg[0] ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \mid_pipe_valid_q_reg[0]  <= 1'h0;
    else if (_036_) \mid_pipe_valid_q_reg[0]  <= _001_;
  assign mid_pipe_valid_q[1] = \mid_pipe_valid_q_reg[0] ;
  reg [7:0] _131_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _131_ <= 8'h00;
    else if (\gen_inside_pipeline[0].reg_ena ) _131_ <= sv2v_tmp_48E57;
  assign mid_pipe_info_q[7:0] = _131_;
  reg \mid_pipe_mant_zero_q_reg[0] ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \mid_pipe_mant_zero_q_reg[0]  <= 1'h0;
    else if (\gen_inside_pipeline[0].reg_ena ) \mid_pipe_mant_zero_q_reg[0]  <= mant_is_zero;
  assign mid_pipe_mant_zero_q[1] = \mid_pipe_mant_zero_q_reg[0] ;
  reg \mid_pipe_op_mod_q_reg[0] ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \mid_pipe_op_mod_q_reg[0]  <= 1'h0;
    else if (\gen_inside_pipeline[0].reg_ena ) \mid_pipe_op_mod_q_reg[0]  <= op_mod_i;
  assign mid_pipe_op_mod_q[1] = \mid_pipe_op_mod_q_reg[0] ;
  reg [2:0] _134_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _134_ <= 3'h0;
    else if (\gen_inside_pipeline[0].reg_ena ) _134_ <= rnd_mode_i;
  assign mid_pipe_rnd_mode_q[2:0] = _134_;
  reg [2:0] _135_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _135_ <= 3'h0;
    else if (\gen_inside_pipeline[0].reg_ena ) _135_ <= dst_fmt_i;
  assign mid_pipe_dst_fmt_q[2:0] = _135_;
  reg [1:0] _136_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _136_ <= 2'h0;
    else if (\gen_inside_pipeline[0].reg_ena ) _136_ <= int_fmt_i;
  assign mid_pipe_int_fmt_q[1:0] = _136_;
  reg [1:0] _137_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _137_ <= 2'h0;
    else if (\gen_inside_pipeline[0].reg_ena ) _137_ <= tag_i;
  assign mid_pipe_tag_q[1:0] = _137_;
  reg [4:0] _138_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _138_ <= 5'h00;
    else if (\gen_inside_pipeline[0].reg_ena ) _138_ <= aux_i;
  assign mid_pipe_aux_q[4:0] = _138_;
  reg [23:0] _139_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _139_ <= 24'h000000;
    else if (\gen_inside_pipeline[0].reg_ena ) _139_ <= input_mant;
  assign mid_pipe_input_mant_q[23:0] = _139_;
  reg [8:0] _140_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _140_ <= 9'h000;
    else if (\gen_inside_pipeline[0].reg_ena ) _140_ <= mid_pipe_dest_exp_q[17:9];
  assign mid_pipe_dest_exp_q[8:0] = _140_;
  assign _036_ = | { in_ready_o, flush_i };
  assign src_is_int = op_i == 4'hc;
  assign dst_is_int = op_i == 4'hb;
  assign fmt_uf_after_round[0] = ! rounded_abs[30:23];
  assign fmt_of_after_round[0] = rounded_abs[30:23] == 8'hff;
  assign rounded_int_res_zero = ! rounded_int_res;
  assign _037_ = $signed(mid_pipe_input_exp_q[8:0]) >= $signed(_028_);
  assign _038_ = $signed(mid_pipe_dest_exp_q[8:0]) >= $signed(_096_);
  assign _039_ = $signed(mid_pipe_dest_exp_q[8:0]) >= $signed(_050_);
  assign _040_ = _054_ && mid_pipe_info_q[4];
  assign _041_ = _044_ && _039_;
  assign _042_ = _038_ || _040_;
  assign _043_ = $signed(mid_pipe_input_exp_q[8:0]) < $signed(32'd4294967295);
  assign _044_ = $signed(mid_pipe_dest_exp_q[8:0]) < $signed(32'd1);
  assign _045_ = $signed(mid_pipe_dest_exp_q[8:0]) < $signed(_050_);
  assign _014_[31:3] = int_fmt_i * 29'h00000003;
  assign _015_[31:3] = src_fmt_i * 29'h00000003;
  assign _016_ = src_fmt_i * 32'd9;
  assign _049_ = - int_value;
  assign _050_ = - $signed(_000_);
  assign _051_ = - rounded_abs;
  assign _052_ = ~ op_mod_i;
  assign _053_ = ~ mid_pipe_valid_q[1];
  assign _055_ = ~ mid_pipe_info_q[0];
  assign _056_ = ~ rounded_int_res_zero;
  assign _054_ = ~ mid_pipe_src_is_int_q[1];
  assign _057_ = ~ mid_pipe_info_q[4];
  assign in_ready_o = out_ready_i | _053_;
  assign _058_ = mid_pipe_info_q[5] | mid_pipe_info_q[3];
  assign _059_ = _058_ | _055_;
  assign _060_ = mid_pipe_info_q[3] | mid_pipe_info_q[4];
  assign _061_ = _060_ | of_before_round;
  assign _062_ = _061_ | _055_;
  assign int_result_is_special = _062_ | _034_;
  assign _063_ = of_before_round | of_after_round;
  assign _064_ = _070_ | _035_;
  assign _013_ = _045_ ? _031_[4:0] : _093_[4:0];
  assign _011_ = _045_ ? 9'h000 : mid_pipe_dest_exp_q[8:0];
  assign _012_ = _041_ ? _098_[4:0] : _013_;
  assign _008_ = _041_ ? 9'h000 : _011_;
  assign _009_ = _042_ ? 1'h1 : 1'h0;
  assign _006_ = _042_ ? 49'h1ffffffffffff : { mid_pipe_input_mant_q[23:0], 25'h0000000 };
  assign _003_ = _042_ ? _097_[8:0] : _008_;
  assign _010_ = _042_ ? _093_[4:0] : _012_;
  assign _007_ = _043_ ? 5'h01 : _094_[4:0];
  assign _005_ = _037_ ? 1'h1 : 1'h0;
  assign _002_ = _037_ ? 5'h00 : _007_;
  function [31:0] _188_;
    input [31:0] a;
    input [127:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _188_ = b[31:0];
      4'b??1?:
        _188_ = b[63:32];
      4'b?1??:
        _188_ = b[95:64];
      4'b1???:
        _188_ = b[127:96];
      default:
        _188_ = a;
    endcase
  endfunction
  assign _065_ = _188_(32'hxxxxxxxx, 128'h00000008000000100000002000000040, { _069_, _068_, _067_, _066_ });
  assign _066_ = mid_pipe_int_fmt_q[1:0] == 2'h3;
  assign _067_ = mid_pipe_int_fmt_q[1:0] == 2'h2;
  assign _068_ = mid_pipe_int_fmt_q[1:0] == 2'h1;
  assign _069_ = ! mid_pipe_int_fmt_q[1:0];
  assign _004_ = mid_pipe_dst_is_int_q[1] ? _065_ : 32'hxxxxxxxx;
  assign of_before_round = mid_pipe_dst_is_int_q[1] ? _005_ : _009_;
  assign denorm_shamt = mid_pipe_dst_is_int_q[1] ? _002_ : _010_;
  assign preshift_mant = mid_pipe_dst_is_int_q[1] ? { mid_pipe_input_mant_q[23:0], 25'h0000000 } : _006_;
  assign final_exp = mid_pipe_dst_is_int_q[1] ? mid_pipe_dest_exp_q[8:0] : _003_;
  assign fp_round_sticky_bits[0] = | destination_mant[23:0];
  assign int_round_sticky_bits[0] = | destination_mant[47:0];
  assign _070_ = | destination_mant[24:0];
  assign int_regular_status[0] = | destination_mant;
  assign busy_o = | { mid_pipe_valid_q[1], in_valid_i };
  wire [95:0] _264_ = 96'hffffffffffffffffffffffff;
  assign int_value = _264_[$signed({ _014_[31:3], 3'h0 }) +: 24];
  wire [119:0] _265_ = { 96'hffffffffffffffffffffffff, fmt_mantissa[23], operands_i[22:0] };
  assign _071_ = _265_[$signed({ _015_[31:3], 3'h0 }) +: 24];
  wire [44:0] _266_ = { 37'h1ffffffffe, operands_i[30:23] };
  assign src_exp = _266_[$signed(_016_) +: 9];
  wire [39:0] _267_ = { 32'hffffffff, fmt_mantissa[23], info[6:0] };
  assign src_subnormal[0] = _267_[$signed(_025_) +: 1];
  wire [44:0] _268_ = 45'h1ffffffffe00;
  assign src_offset = _268_[$signed(_016_) +: 9];
  wire [4:0] _269_ = { 4'hf, operands_i[31] };
  assign _072_ = _269_[src_fmt_i +: 1];
  wire [39:0] _270_ = { 32'hffffffff, fmt_mantissa[23], info[6:0] };
  assign sv2v_tmp_48E57 = _270_[$signed({ 26'h0000000, src_fmt_i, 3'h0 }) +: 8];
  wire [319:0] _271_ = 320'h00000008000000170000000b00000034000000050000000a00000005000000020000000800000007;
  assign _073_ = _271_[$signed(_082_) +: 32];
  wire [319:0] _272_ = 320'h00000008000000170000000b00000034000000050000000a00000005000000020000000800000007;
  assign _000_ = _272_[$signed(_081_) +: 32];
  wire [159:0] _273_ = { 129'h1fffffffffffffffffffffffffffffffe, final_exp[7:0], destination_mant[47:25] };
  assign _074_ = _273_[$signed({ 24'h000000, mid_pipe_dst_fmt_q[2:0], 5'h00 }) +: 32];
  wire [4:0] _274_ = { 4'hf, fmt_uf_after_round[0] };
  assign uf_after_round = _274_[mid_pipe_dst_fmt_q[2:0] +: 1];
  wire [4:0] _275_ = { 4'hf, fmt_of_after_round[0] };
  assign of_after_round = _275_[mid_pipe_dst_fmt_q[2:0] +: 1];
  wire [159:0] _276_ = { 128'hffffffffffffffffffffffffffffffff, \gen_special_results[0].active_format.special_results.special_res  };
  assign fp_special_result = _276_[$signed({ 24'h000000, mid_pipe_dst_fmt_q[2:0], 5'h00 }) +: 32];
  wire [127:0] _277_ = 128'hffffffffffffffffffffffffffffffff;
  assign int_special_result = _277_[$signed({ 25'h0000000, mid_pipe_int_fmt_q[1:0], 5'h00 }) +: 32];
  wire [159:0] _278_ = { 128'hffffffffffffffffffffffffffffffff, fmt_result[31:0] };
  assign _075_ = _278_[$signed({ 24'h000000, mid_pipe_dst_fmt_q[2:0], 5'h00 }) +: 32];
  wire [319:0] _279_ = 320'h00000008000000170000000b00000034000000050000000a00000005000000020000000800000007;
  assign _076_ = _279_[$signed(_083_) +: 32];
  wire [319:0] _280_ = 320'h00000008000000170000000b00000034000000050000000a00000005000000020000000800000007;
  assign _077_ = _280_[$signed(_084_) +: 32];
  assign _078_ = $signed(32'd1) << _087_;
  assign _079_ = $signed(32'd1) << _089_;
  assign input_mant = encoded_mant << renorm_shamt;
  assign _080_ = $signed(32'd1) << _073_;
  assign destination_mant = preshift_mant >> denorm_shamt;
  assign _082_ = _018_ - 32'd32;
  assign _081_ = _017_ - 32'd32;
  assign _083_ = _019_ - 32'd32;
  assign _084_ = _020_ - 32'd32;
  assign { _085_[31:26], _046_[31:6] } = 32'd4 - mid_pipe_dst_fmt_q[2:0];
  assign { _086_[31:26], _047_[31:6] } = 32'd4 - src_fmt_i;
  assign _087_ = _076_ - 32'd1;
  assign \fpnew_pkg_bias$func$FPNewBlackbox_S2l1s.preprocessed.v:3749$4279.$result  = $signed(_078_) - $signed(32'd1);
  assign { _088_[31:26], _048_[31:6] } = 32'd4 - dst_fmt_i;
  assign _089_ = _077_ - 32'd1;
  assign \fpnew_pkg_bias$func$FPNewBlackbox_S2l1s.preprocessed.v:3776$4280.$result  = $signed(_079_) - $signed(32'd1);
  assign _090_ = _026_ - \fpnew_pkg_bias$func$FPNewBlackbox_S2l1s.preprocessed.v:3749$4279.$result [8:0];
  assign _091_ = _090_ - { 1'h0, renorm_shamt };
  assign { _092_[31:9], int_input_exp } = 32'd23 - { 1'h0, renorm_shamt };
  assign _093_ = 32'd23 - _000_;
  assign _094_ = 32'd4294967295 - mid_pipe_input_exp_q[8:0];
  assign _095_ = _004_ - 32'd1;
  assign _096_ = $signed(_080_) - $signed(32'd1);
  assign _097_ = $signed(_080_) - $signed(32'd2);
  assign _098_ = _029_ - mid_pipe_dest_exp_q[8:0];
  assign int_mantissa = int_sign ? _049_ : int_value;
  assign encoded_mant = src_is_int ? int_mantissa : _071_;
  assign input_sign = src_is_int ? int_sign : _072_;
  assign input_exp = src_is_int ? int_input_exp : fp_input_exp;
  assign _099_ = in_ready_o ? in_valid_i : 1'hx;
  assign _001_ = flush_i ? 1'h0 : _099_;
  assign round_sticky_bits = mid_pipe_dst_is_int_q[1] ? { destination_mant[48], int_round_sticky_bits[0] } : { destination_mant[24], fp_round_sticky_bits[0] };
  assign pre_round_abs = mid_pipe_dst_is_int_q[1] ? int_special_result : _074_;
  assign fmt_result[31:0] = _032_ ? 32'd0 : { rounded_sign, rounded_abs[30:0] };
  assign rounded_int_res = rounded_sign ? _051_ : rounded_abs;
  assign \gen_special_results[0].active_format.special_results.special_res  = mid_pipe_info_q[5] ? { mid_pipe_input_sign_q[1], 31'h00000000 } : 32'd2143289344;
  assign fp_regular_status[0] = mid_pipe_src_is_int_q[1] ? _070_ : _064_;
  assign fp_result = fp_result_is_special ? fp_special_result : _075_;
  assign fp_status = fp_result_is_special ? { mid_pipe_info_q[2], 4'h0 } : { fp_regular_status[4], 1'h0, fp_regular_status[2:0] };
  assign int_result = int_result_is_special ? int_special_result : rounded_int_res;
  assign int_status = int_result_is_special ? 5'h10 : { 4'h0, int_regular_status[0] };
  assign result_o = mid_pipe_dst_is_int_q[1] ? int_result : fp_result;
  assign status_o = mid_pipe_dst_is_int_q[1] ? int_status : fp_status;
  assign extension_bit_o = mid_pipe_dst_is_int_q[1] ? int_result[31] : 1'h1;
  \$paramod$62f5c6c40baf3ab700fec6049fa36a166c5bea61\fpnew_classifier  \fmt_init_inputs[0].active_format.i_fpnew_classifier  (
    .info_o({ fmt_mantissa[23], info[6:0] }),
    .is_boxed_i(is_boxed_i[0]),
    .operands_i(operands_i)
  );
  \$paramod\fpnew_rounding\AbsWidth=32'00000000000000000000000000100000  i_fpnew_rounding (
    .abs_rounded_o(rounded_abs),
    .abs_value_i(pre_round_abs),
    .effective_subtraction_i(1'h0),
    .exact_zero_o(result_true_zero),
    .rnd_mode_i(mid_pipe_rnd_mode_q[2:0]),
    .round_sticky_bits_i(round_sticky_bits),
    .sign_i(mid_pipe_input_sign_q[1]),
    .sign_o(rounded_sign)
  );
  \$paramod$33927d67db2764900ac78ba84de6c8e59d432344\lzc  i_lzc (
    .cnt_o(renorm_shamt),
    .empty_o(mant_is_zero),
    .in_i(encoded_mant)
  );
  assign _014_[2:0] = 3'h0;
  assign _015_[2:0] = 3'h0;
  assign _027_[8:0] = mid_pipe_dest_exp_q[17:9];
  assign _046_[5:0] = 6'h00;
  assign _047_[5:0] = 6'h00;
  assign _048_[5:0] = 6'h00;
  assign _085_[25:0] = _046_[31:6];
  assign _086_[25:0] = _047_[31:6];
  assign _088_[25:0] = _048_[31:6];
  assign _092_[8:0] = int_input_exp;
  assign aux_o = mid_pipe_aux_q[4:0];
  assign destination_exp = mid_pipe_dest_exp_q[17:9];
  assign destination_exp_q = mid_pipe_dest_exp_q[8:0];
  assign dst_fmt_q = dst_fmt_i;
  assign dst_fmt_q2 = mid_pipe_dst_fmt_q[2:0];
  assign dst_is_int_q = mid_pipe_dst_is_int_q[1];
  assign extension_bit = extension_bit_o;
  assign final_int = 2'h0;
  assign final_mant = destination_mant[47:25];
  assign fmt_exponent = { 37'h1ffffffffe, operands_i[30:23] };
  assign { fmt_mantissa[119:24], fmt_mantissa[22:0] } = { 96'hffffffffffffffffffffffff, operands_i[22:0] };
  assign fmt_of_after_round[4:1] = 4'hf;
  assign fmt_pre_round_abs = { 129'h1fffffffffffffffffffffffffffffffe, final_exp[7:0], destination_mant[47:25] };
  assign fmt_result[159:32] = 128'hffffffffffffffffffffffffffffffff;
  assign fmt_shift_compensation = 45'h1ffffffffe00;
  assign fmt_sign = { 4'hf, operands_i[31] };
  assign fmt_special_result = { 128'hffffffffffffffffffffffffffffffff, \gen_special_results[0].active_format.special_results.special_res  };
  assign fmt_uf_after_round[4:1] = 4'hf;
  assign fp_regular_status[3] = 1'h0;
  assign fp_round_sticky_bits[1] = destination_mant[24];
  assign fp_special_status = { mid_pipe_info_q[2], 4'h0 };
  assign \fpnew_pkg_bias$func$FPNewBlackbox_S2l1s.preprocessed.v:3749$4419.fmt  = 3'hx;
  assign \fpnew_pkg_bias$func$FPNewBlackbox_S2l1s.preprocessed.v:3776$4420.fmt  = 3'hx;
  assign \fpnew_pkg_exp_bits$func$FPNewBlackbox_S2l1s.preprocessed.v:3985$4293.fmt  = 3'hx;
  assign \fpnew_pkg_exp_bits$func$FPNewBlackbox_S2l1s.preprocessed.v:3986$4294.fmt  = 3'hx;
  assign \fpnew_pkg_int_width$func$FPNewBlackbox_S2l1s.preprocessed.v:3976$4287.ifmt  = 2'hx;
  assign \fpnew_pkg_man_bits$func$FPNewBlackbox_S2l1s.preprocessed.v:3970$4286.fmt  = 3'hx;
  assign \fpnew_pkg_man_bits$func$FPNewBlackbox_S2l1s.preprocessed.v:3990$4295.fmt  = 3'hx;
  assign \fpnew_pkg_man_bits$func$FPNewBlackbox_S2l1s.preprocessed.v:3995$4296.fmt  = 3'hx;
  assign \fpnew_pkg_man_bits$func$FPNewBlackbox_S2l1s.preprocessed.v:3997$4297.fmt  = 3'hx;
  assign \gen_int_res_sign_ext[0].inactive_format.sv2v_tmp_F6FA8  = 32'd4294967295;
  assign \gen_int_res_sign_ext[1].inactive_format.sv2v_tmp_F6FA8  = 32'd4294967295;
  assign \gen_int_res_sign_ext[2].inactive_format.sv2v_tmp_F6FA8  = 32'd4294967295;
  assign \gen_int_res_sign_ext[3].inactive_format.sv2v_tmp_F6FA8  = 32'd4294967295;
  assign \gen_res_assemble[1].inactive_format.sv2v_tmp_C33E0  = 32'd4294967295;
  assign \gen_res_assemble[2].inactive_format.sv2v_tmp_C33E0  = 32'd4294967295;
  assign \gen_res_assemble[3].inactive_format.sv2v_tmp_C33E0  = 32'd4294967295;
  assign \gen_res_assemble[4].inactive_format.sv2v_tmp_C33E0  = 32'd4294967295;
  assign \gen_sign_extend_int[0].inactive_format.sv2v_tmp_5B946  = 24'hffffff;
  assign \gen_sign_extend_int[1].inactive_format.sv2v_tmp_5B946  = 24'hffffff;
  assign \gen_sign_extend_int[2].inactive_format.sv2v_tmp_5B946  = 24'hffffff;
  assign \gen_sign_extend_int[3].inactive_format.sv2v_tmp_5B946  = 24'hffffff;
  assign \gen_sign_inject[1].inactive_format.sv2v_tmp_4A747  = 1'h1;
  assign \gen_sign_inject[1].inactive_format.sv2v_tmp_649FB  = 32'd4294967295;
  assign \gen_sign_inject[1].inactive_format.sv2v_tmp_90681  = 1'h1;
  assign \gen_sign_inject[2].inactive_format.sv2v_tmp_4A747  = 1'h1;
  assign \gen_sign_inject[2].inactive_format.sv2v_tmp_649FB  = 32'd4294967295;
  assign \gen_sign_inject[2].inactive_format.sv2v_tmp_90681  = 1'h1;
  assign \gen_sign_inject[3].inactive_format.sv2v_tmp_4A747  = 1'h1;
  assign \gen_sign_inject[3].inactive_format.sv2v_tmp_649FB  = 32'd4294967295;
  assign \gen_sign_inject[3].inactive_format.sv2v_tmp_90681  = 1'h1;
  assign \gen_sign_inject[4].inactive_format.sv2v_tmp_4A747  = 1'h1;
  assign \gen_sign_inject[4].inactive_format.sv2v_tmp_649FB  = 32'd4294967295;
  assign \gen_sign_inject[4].inactive_format.sv2v_tmp_90681  = 1'h1;
  assign \gen_special_results[1].inactive_format.sv2v_tmp_B718F  = 32'd4294967295;
  assign \gen_special_results[2].inactive_format.sv2v_tmp_B718F  = 32'd4294967295;
  assign \gen_special_results[3].inactive_format.sv2v_tmp_B718F  = 32'd4294967295;
  assign \gen_special_results[4].inactive_format.sv2v_tmp_B718F  = 32'd4294967295;
  assign \gen_special_results_int[0].inactive_format.sv2v_tmp_99B6D  = 32'd4294967295;
  assign \gen_special_results_int[1].inactive_format.sv2v_tmp_99B6D  = 32'd4294967295;
  assign \gen_special_results_int[2].inactive_format.sv2v_tmp_99B6D  = 32'd4294967295;
  assign \gen_special_results_int[3].inactive_format.sv2v_tmp_99B6D  = 32'd4294967295;
  assign ifmt_input_val = 96'hffffffffffffffffffffffff;
  assign ifmt_pre_round_abs = 128'hffffffffffffffffffffffffffffffff;
  assign ifmt_special_result = 128'hffffffffffffffffffffffffffffffff;
  assign info[39:7] = { 32'hffffffff, fmt_mantissa[23] };
  assign info_q = mid_pipe_info_q[7:0];
  assign inp_pipe_aux_q = aux_i;
  assign inp_pipe_dst_fmt_q = dst_fmt_i;
  assign inp_pipe_int_fmt_q = int_fmt_i;
  assign inp_pipe_is_boxed_q = is_boxed_i;
  assign inp_pipe_op_mod_q = op_mod_i;
  assign inp_pipe_op_q = op_i;
  assign inp_pipe_operands_q = operands_i;
  assign inp_pipe_ready = in_ready_o;
  assign inp_pipe_rnd_mode_q = rnd_mode_i;
  assign inp_pipe_src_fmt_q = src_fmt_i;
  assign inp_pipe_tag_q = tag_i;
  assign inp_pipe_valid_q = in_valid_i;
  assign input_exp_q = mid_pipe_input_exp_q[8:0];
  assign input_mant_q = mid_pipe_input_mant_q[23:0];
  assign input_sign_q = mid_pipe_input_sign_q[1];
  assign int_fmt_q = int_fmt_i;
  assign int_fmt_q2 = mid_pipe_int_fmt_q[1:0];
  assign int_regular_status[4:1] = 4'h0;
  assign int_round_sticky_bits[1] = destination_mant[48];
  assign int_special_status = 5'h10;
  assign is_boxed_q = is_boxed_i;
  assign mant_is_zero_q = mid_pipe_mant_zero_q[1];
  assign mid_pipe_aux_q[9:5] = aux_i;
  assign mid_pipe_dst_fmt_q[5:3] = dst_fmt_i;
  assign mid_pipe_dst_is_int_q[0] = dst_is_int;
  assign mid_pipe_info_q[15:8] = sv2v_tmp_48E57;
  assign mid_pipe_input_exp_q[17:9] = input_exp;
  assign mid_pipe_input_mant_q[47:24] = input_mant;
  assign mid_pipe_input_sign_q[0] = input_sign;
  assign mid_pipe_int_fmt_q[3:2] = int_fmt_i;
  assign mid_pipe_mant_zero_q[0] = mant_is_zero;
  assign mid_pipe_op_mod_q[0] = op_mod_i;
  assign mid_pipe_ready = { in_ready_o, out_ready_i };
  assign mid_pipe_rnd_mode_q[5:3] = rnd_mode_i;
  assign mid_pipe_src_fmt_q[5:3] = src_fmt_i;
  assign mid_pipe_src_is_int_q[0] = src_is_int;
  assign mid_pipe_tag_q[3:2] = tag_i;
  assign mid_pipe_valid_q[0] = in_valid_i;
  assign op_mod_q = op_mod_i;
  assign op_mod_q2 = mid_pipe_op_mod_q[1];
  assign operands_q = operands_i;
  assign out_pipe_aux_q = mid_pipe_aux_q[4:0];
  assign out_pipe_ext_bit_q = extension_bit_o;
  assign out_pipe_ready = out_ready_i;
  assign out_pipe_result_q = result_o;
  assign out_pipe_status_q = status_o;
  assign out_pipe_tag_q = mid_pipe_tag_q[1:0];
  assign out_pipe_valid_q = mid_pipe_valid_q[1];
  assign out_valid_o = mid_pipe_valid_q[1];
  assign renorm_shamt_sgn = { 1'h0, renorm_shamt };
  assign result_d = result_o;
  assign rnd_mode_q = mid_pipe_rnd_mode_q[2:0];
  assign src_bias = \fpnew_pkg_bias$func$FPNewBlackbox_S2l1s.preprocessed.v:3749$4279.$result [8:0];
  assign src_fmt_q = src_fmt_i;
  assign src_fmt_q2 = mid_pipe_src_fmt_q[2:0];
  assign src_is_int_q = mid_pipe_src_is_int_q[1];
  assign src_subnormal[8:1] = 8'h00;
  assign status_d = status_o;
  assign sv2v_tmp_03C65 = mid_pipe_tag_q[1:0];
  assign sv2v_tmp_14D79 = mid_pipe_aux_q[4:0];
  assign sv2v_tmp_18FC5 = tag_i;
  assign sv2v_tmp_25EE6 = mid_pipe_valid_q[1];
  assign sv2v_tmp_2AE08 = int_fmt_i;
  assign sv2v_tmp_32E16 = rnd_mode_i;
  assign sv2v_tmp_3BE44 = input_mant;
  assign sv2v_tmp_3D9F8 = src_is_int;
  assign sv2v_tmp_3DFAC = input_sign;
  assign sv2v_tmp_4086F = result_o;
  assign sv2v_tmp_4351A = mant_is_zero;
  assign sv2v_tmp_45ED9 = rnd_mode_i;
  assign sv2v_tmp_4E95C = dst_is_int;
  assign sv2v_tmp_6AF63 = dst_fmt_i;
  assign sv2v_tmp_6E45B = operands_i;
  assign sv2v_tmp_73AEA = in_valid_i;
  assign sv2v_tmp_88AB6 = op_mod_i;
  assign sv2v_tmp_8F736 = extension_bit_o;
  assign sv2v_tmp_9AB08 = input_exp;
  assign sv2v_tmp_AD1FB = op_i;
  assign sv2v_tmp_B46A2 = tag_i;
  assign sv2v_tmp_B7C45 = status_o;
  assign sv2v_tmp_C23AE = aux_i;
  assign sv2v_tmp_C47E1 = is_boxed_i;
  assign sv2v_tmp_CA55F = int_fmt_i;
  assign sv2v_tmp_CB10A = in_valid_i;
  assign sv2v_tmp_CB295 = src_fmt_i;
  assign sv2v_tmp_D1C37 = op_mod_i;
  assign sv2v_tmp_D4403 = aux_i;
  assign sv2v_tmp_DE9EA = src_fmt_i;
  assign sv2v_tmp_F626F = mid_pipe_dest_exp_q[17:9];
  assign sv2v_tmp_FC1E4 = dst_fmt_i;
  assign tag_o = mid_pipe_tag_q[1:0];
endmodule

module \$paramod$9bfc9a0daa8cb73cb4aad145c8d465ac6f5f5f03\fpnew_opgroup_multifmt_slice_607F1_85D30 (clk_i, rst_ni, operands_i, is_boxed_i, rnd_mode_i, op_i, op_mod_i, src_fmt_i, dst_fmt_i, int_fmt_i, vectorial_op_i, tag_i, in_valid_i, in_ready_o, flush_i, result_o, status_o, extension_bit_o, tag_o, out_valid_o, out_ready_i
, busy_o);
  wire [31:0] _000_;
  wire [31:0] _001_;
  wire [31:0] _002_;
  wire [31:0] _003_;
  wire [31:0] _004_;
  wire [31:0] _005_;
  wire [31:0] _006_;
  wire [31:0] _007_;
  wire [31:0] _008_;
  wire [31:0] _009_;
  wire [31:0] _010_;
  wire [31:0] _011_;
  wire [31:0] _012_;
  wire [31:0] _013_;
  wire [31:0] _014_;
  wire [31:0] _015_;
  wire [31:0] _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire [31:0] _023_;
  wire [31:0] _024_;
  wire [31:0] _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire [63:0] _030_;
  wire [63:0] _031_;
  wire [31:0] _032_;
  wire [31:0] _033_;
  wire [31:0] _034_;
  wire [31:0] _035_;
  wire [63:0] _036_;
  wire [63:0] _037_;
  wire [63:0] _038_;
  wire [31:0] _039_;
  wire [31:0] _040_;
  wire [31:0] _041_;
  wire [31:0] _042_;
  wire [31:0] _043_;
  wire [31:0] _044_;
  wire [4:0] aux_data;
  wire [31:0] \boxed_2op.sv2v_autoblock_4.fmt ;
  output busy_o;
  wire busy_o;
  input clk_i;
  wire clk_i;
  wire [2:0] dst_fmt;
  input [2:0] dst_fmt_i;
  wire [2:0] dst_fmt_i;
  wire dst_fmt_is_int;
  wire dst_is_cpk;
  output extension_bit_o;
  wire extension_bit_o;
  input flush_i;
  wire flush_i;
  wire [319:0] fmt_slice_result;
  wire [2:0] \fpnew_pkg_fp_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7333$2180.fmt ;
  wire [2:0] \fpnew_pkg_fp_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7333$2181.fmt ;
  wire [31:0] \fpnew_pkg_fp_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7333$588.$result ;
  wire [31:0] \fpnew_pkg_fp_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7333$589.$result ;
  wire [2:0] \fpnew_pkg_fp_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7334$2182.fmt ;
  wire [2:0] \fpnew_pkg_fp_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7334$2183.fmt ;
  wire [2:0] \fpnew_pkg_fp_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7466$1003.fmt ;
  wire [2:0] \fpnew_pkg_fp_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7466$1100.fmt ;
  wire [2:0] \fpnew_pkg_fp_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7466$1197.fmt ;
  wire [2:0] \fpnew_pkg_fp_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7466$1775.fmt ;
  wire [2:0] \fpnew_pkg_fp_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7466$1872.fmt ;
  wire [2:0] \fpnew_pkg_fp_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7466$1969.fmt ;
  wire [2:0] \fpnew_pkg_fp_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7473$1270.fmt ;
  wire [2:0] \fpnew_pkg_fp_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7473$2042.fmt ;
  wire [1:0] \fpnew_pkg_int_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7470$1231.ifmt ;
  wire [1:0] \fpnew_pkg_int_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7470$2003.ifmt ;
  wire \gen_num_lanes[0].active_lane.in_valid ;
  wire [95:0] \gen_num_lanes[0].active_lane.local_operands ;
  wire [31:0] \gen_num_lanes[0].active_lane.op_result ;
  wire [4:0] \gen_num_lanes[0].active_lane.op_status ;
  wire \gen_num_lanes[0].active_lane.out_ready ;
  wire \gen_num_lanes[0].active_lane.out_valid ;
  wire [31:0] \gen_num_lanes[0].active_lane.prepare_input.sv2v_autoblock_11.i ;
  wire [31:0] \gen_num_lanes[0].local_result ;
  wire \gen_num_lanes[1].active_lane.in_valid ;
  wire [95:0] \gen_num_lanes[1].active_lane.local_operands ;
  wire [31:0] \gen_num_lanes[1].active_lane.op_result ;
  wire [4:0] \gen_num_lanes[1].active_lane.op_status ;
  wire \gen_num_lanes[1].active_lane.out_ready ;
  wire \gen_num_lanes[1].active_lane.out_valid ;
  wire [31:0] \gen_num_lanes[1].active_lane.prepare_input.sv2v_autoblock_11.i ;
  wire [31:0] \gen_num_lanes[1].local_result ;
  wire [255:0] ifmt_slice_result;
  output in_ready_o;
  wire in_ready_o;
  input in_valid_i;
  wire in_valid_i;
  input [1:0] int_fmt_i;
  wire [1:0] int_fmt_i;
  wire [4:0] is_boxed_1op;
  wire [9:0] is_boxed_2op;
  input [14:0] is_boxed_i;
  wire [14:0] is_boxed_i;
  wire is_up_cast;
  wire [9:0] lane_aux;
  wire [1:0] lane_busy;
  wire [1:0] lane_ext_bit;
  wire [1:0] lane_in_ready;
  wire [1:0] lane_out_valid;
  wire [9:0] lane_status;
  wire [3:0] lane_tags;
  input [3:0] op_i;
  wire [3:0] op_i;
  input op_mod_i;
  wire op_mod_i;
  input [191:0] operands_i;
  wire [191:0] operands_i;
  input out_ready_i;
  wire out_ready_i;
  output out_valid_o;
  wire out_valid_o;
  wire [31:0] \output_processing.sv2v_autoblock_12.i ;
  wire [4:0] \output_processing.temp_status ;
  wire [2:0] result_fmt;
  wire result_fmt_is_int;
  wire result_is_vector;
  output [63:0] result_o;
  wire [63:0] result_o;
  input [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_i;
  input rst_ni;
  wire rst_ni;
  input [2:0] src_fmt_i;
  wire [2:0] src_fmt_i;
  output [4:0] status_o;
  wire [4:0] status_o;
  input [1:0] tag_i;
  wire [1:0] tag_i;
  output [1:0] tag_o;
  wire [1:0] tag_o;
  wire [2:0] target_aux_d;
  wire [5:0] \target_regs.byp_pipe_aux_q ;
  wire [0:1] \target_regs.byp_pipe_ready ;
  wire [0:1] \target_regs.byp_pipe_valid_q ;
  wire \target_regs.sv2v_tmp_49222 ;
  wire [3:1] \target_regs.sv2v_tmp_A0A5D ;
  wire vectorial_op;
  input vectorial_op_i;
  wire vectorial_op_i;
  assign _006_ = _010_ + 32'd1;
  assign _007_ = _011_ + 32'd1;
  assign _009_ = _014_ + 32'd1;
  assign _008_ = _013_ + 32'd1;
  assign _010_ = { _023_[31:6], 6'h00 } + 32'd63;
  assign _011_ = { _023_[31:6], 6'h00 } + 32'd31;
  assign _012_ = _032_ + _033_;
  assign \fpnew_pkg_fp_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7333$588.$result  = _012_ + 32'd1;
  assign _015_ = _034_ + _035_;
  assign \fpnew_pkg_fp_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7333$589.$result  = _015_ + 32'd1;
  assign _014_ = { _024_[31:6], 6'h00 } + 32'd31;
  assign _013_ = { _024_[31:6], 6'h00 } + 32'd63;
  assign _016_ = \fpnew_pkg_fp_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7333$589.$result  + 32'd16;
  assign lane_out_valid[1] = \gen_num_lanes[1].active_lane.out_valid  & lane_aux[3];
  assign \gen_num_lanes[1].active_lane.in_valid  = in_valid_i & vectorial_op_i;
  assign \gen_num_lanes[1].active_lane.out_ready  = out_ready_i & lane_aux[3];
  assign dst_fmt_is_int = op_i == 4'hb;
  assign _017_ = op_i == 4'hd;
  assign _018_ = op_i == 4'he;
  assign _019_ = op_i == 4'hc;
  assign _020_ = op_i == 4'ha;
  assign is_up_cast = \fpnew_pkg_fp_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7333$588.$result  > \fpnew_pkg_fp_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7333$589.$result ;
  assign _021_ = vectorial_op_i && op_mod_i;
  assign _022_ = _021_ && is_up_cast;
  assign dst_is_cpk = _017_ || _018_;
  assign status_o = lane_status[4:0] | lane_status[9:5];
  assign _005_ = dst_is_cpk ? operands_i[95:64] : _036_[31:0];
  assign _004_ = _022_ ? _038_[31:0] : _036_[31:0];
  assign _002_ = _020_ ? _004_ : _005_;
  function [31:0] _074_;
    input [31:0] a;
    input [127:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _074_ = b[31:0];
      4'b??1?:
        _074_ = b[63:32];
      4'b?1??:
        _074_ = b[95:64];
      4'b1???:
        _074_ = b[127:96];
      default:
        _074_ = a;
    endcase
  endfunction
  assign _025_ = _074_(32'hxxxxxxxx, 128'h00000008000000100000002000000040, { _029_, _028_, _027_, _026_ });
  assign _026_ = int_fmt_i == 2'h3;
  assign _000_ = _019_ ? _025_ : 32'hxxxxxxxx;
  assign \gen_num_lanes[1].active_lane.local_operands [31:0] = _019_ ? _037_[31:0] : _002_;
  assign _003_ = _022_ ? operands_i[47:16] : operands_i[31:0];
  assign _001_ = _020_ ? _003_ : operands_i[31:0];
  assign _027_ = int_fmt_i == 2'h2;
  assign _028_ = int_fmt_i == 2'h1;
  assign _029_ = ! int_fmt_i;
  assign \gen_num_lanes[0].active_lane.local_operands [31:0] = _019_ ? operands_i[31:0] : _001_;
  assign busy_o = | lane_busy;
  wire [255:0] _106_ = { 128'h00000000000000000000000000000000, ifmt_slice_result[127:96], 32'h00000000, ifmt_slice_result[63:16], 16'h0000 };
  assign _030_ = _106_[$signed({ 23'h000000, lane_aux[2:0], 6'h00 }) +: 64];
  wire [319:0] _107_ = { extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, \gen_num_lanes[1].local_result , \gen_num_lanes[0].local_result  };
  assign _031_ = _107_[$signed({ 23'h000000, lane_aux[2:0], 6'h00 }) +: 64];
  wire [319:0] _108_ = 320'h00000008000000170000000b00000034000000050000000a00000005000000020000000800000007;
  assign _032_ = _108_[$signed(_039_) +: 32];
  wire [319:0] _109_ = 320'h00000008000000170000000b00000034000000050000000a00000005000000020000000800000007;
  assign _033_ = _109_[$signed(_040_) +: 32];
  wire [319:0] _110_ = 320'h00000008000000170000000b00000034000000050000000a00000005000000020000000800000007;
  assign _035_ = _110_[$signed(_042_) +: 32];
  wire [319:0] _111_ = 320'h00000008000000170000000b00000034000000050000000a00000005000000020000000800000007;
  assign _034_ = _111_[$signed(_041_) +: 32];
  assign _036_ = operands_i[63:0] >> \fpnew_pkg_fp_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7333$589.$result ;
  assign _037_ = operands_i[63:0] >> _000_;
  assign _038_ = operands_i[63:0] >> _016_;
  assign _039_ = _006_ - 32'd32;
  assign _040_ = _007_ - 32'd32;
  assign _042_ = _009_ - 32'd32;
  assign _041_ = _008_ - 32'd32;
  assign { _043_[31:26], _023_[31:6] } = 32'd4 - dst_fmt_i;
  assign { _044_[31:26], _024_[31:6] } = 32'd4 - src_fmt_i;
  assign dst_fmt = dst_fmt_is_int ? { 1'h0, int_fmt_i } : dst_fmt_i;
  assign \gen_num_lanes[0].local_result  = \gen_num_lanes[0].active_lane.out_valid  ? \gen_num_lanes[0].active_lane.op_result  : { extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o };
  assign \gen_num_lanes[1].local_result  = lane_out_valid[1] ? \gen_num_lanes[1].active_lane.op_result  : { extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o };
  assign lane_status[4:0] = \gen_num_lanes[0].active_lane.out_valid  ? \gen_num_lanes[0].active_lane.op_status  : 5'h00;
  assign lane_status[9:5] = lane_out_valid[1] ? \gen_num_lanes[1].active_lane.op_status  : 5'h00;
  assign result_o = lane_aux[4] ? _030_ : _031_;
  \$paramod$8a3e6a0dc9f2fe8ecb54aa644130f5a8b9a2e1d9\fpnew_cast_multi_BB75A_A18A7  \gen_num_lanes[0].active_lane.genblk1.genblk1.genblk1.lane_instance.i_fpnew_cast_multi  (
    .aux_i({ dst_fmt_is_int, vectorial_op_i, dst_fmt }),
    .aux_o(lane_aux[4:0]),
    .busy_o(lane_busy[0]),
    .clk_i(clk_i),
    .dst_fmt_i(dst_fmt_i),
    .extension_bit_o(extension_bit_o),
    .flush_i(flush_i),
    .in_ready_o(in_ready_o),
    .in_valid_i(in_valid_i),
    .int_fmt_i(int_fmt_i),
    .is_boxed_i({ is_boxed_i[12], is_boxed_i[9], is_boxed_i[6], is_boxed_i[3], is_boxed_i[0] }),
    .op_i(op_i),
    .op_mod_i(op_mod_i),
    .operands_i(\gen_num_lanes[0].active_lane.local_operands [31:0]),
    .out_ready_i(out_ready_i),
    .out_valid_o(\gen_num_lanes[0].active_lane.out_valid ),
    .result_o(\gen_num_lanes[0].active_lane.op_result ),
    .rnd_mode_i(rnd_mode_i),
    .rst_ni(rst_ni),
    .src_fmt_i(src_fmt_i),
    .status_o(\gen_num_lanes[0].active_lane.op_status ),
    .tag_i(tag_i),
    .tag_o(tag_o)
  );
  \$paramod$8a3e6a0dc9f2fe8ecb54aa644130f5a8b9a2e1d9\fpnew_cast_multi_BB75A_A18A7  \gen_num_lanes[1].active_lane.genblk1.genblk1.genblk1.lane_instance.i_fpnew_cast_multi  (
    .aux_i({ dst_fmt_is_int, vectorial_op_i, dst_fmt }),
    .aux_o(lane_aux[9:5]),
    .busy_o(lane_busy[1]),
    .clk_i(clk_i),
    .dst_fmt_i(dst_fmt_i),
    .extension_bit_o(fmt_slice_result[287]),
    .flush_i(flush_i),
    .in_ready_o(lane_in_ready[1]),
    .in_valid_i(\gen_num_lanes[1].active_lane.in_valid ),
    .int_fmt_i(int_fmt_i),
    .is_boxed_i({ is_boxed_i[12], is_boxed_i[9], is_boxed_i[6], is_boxed_i[3], is_boxed_i[0] }),
    .op_i(op_i),
    .op_mod_i(op_mod_i),
    .operands_i(\gen_num_lanes[1].active_lane.local_operands [31:0]),
    .out_ready_i(\gen_num_lanes[1].active_lane.out_ready ),
    .out_valid_o(\gen_num_lanes[1].active_lane.out_valid ),
    .result_o(\gen_num_lanes[1].active_lane.op_result ),
    .rnd_mode_i(rnd_mode_i),
    .rst_ni(rst_ni),
    .src_fmt_i(src_fmt_i),
    .status_o(\gen_num_lanes[1].active_lane.op_status ),
    .tag_i(tag_i),
    .tag_o(lane_tags[3:2])
  );
  assign _023_[5:0] = 6'h00;
  assign _024_[5:0] = 6'h00;
  assign _043_[25:0] = _023_[31:6];
  assign _044_[25:0] = _024_[31:6];
  assign aux_data = { dst_fmt_is_int, vectorial_op_i, dst_fmt };
  assign \boxed_2op.sv2v_autoblock_4.fmt  = 32'd5;
  assign { fmt_slice_result[319:288], fmt_slice_result[286:0] } = { extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], fmt_slice_result[287], extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, \gen_num_lanes[1].local_result , \gen_num_lanes[0].local_result  };
  assign \fpnew_pkg_fp_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7333$2180.fmt  = 3'hx;
  assign \fpnew_pkg_fp_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7333$2181.fmt  = 3'hx;
  assign \fpnew_pkg_fp_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7334$2182.fmt  = 3'hx;
  assign \fpnew_pkg_fp_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7334$2183.fmt  = 3'hx;
  assign \fpnew_pkg_fp_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7466$1003.fmt  = 3'hx;
  assign \fpnew_pkg_fp_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7466$1100.fmt  = 3'hx;
  assign \fpnew_pkg_fp_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7466$1197.fmt  = 3'hx;
  assign \fpnew_pkg_fp_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7466$1775.fmt  = 3'hx;
  assign \fpnew_pkg_fp_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7466$1872.fmt  = 3'hx;
  assign \fpnew_pkg_fp_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7466$1969.fmt  = 3'hx;
  assign \fpnew_pkg_fp_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7473$1270.fmt  = 3'hx;
  assign \fpnew_pkg_fp_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7473$2042.fmt  = 3'hx;
  assign \fpnew_pkg_int_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7470$1231.ifmt  = 2'hx;
  assign \fpnew_pkg_int_width$func$FPNewBlackbox_S2l1s.preprocessed.v:7470$2003.ifmt  = 2'hx;
  assign \gen_num_lanes[0].active_lane.in_valid  = in_valid_i;
  assign \gen_num_lanes[0].active_lane.local_operands [95:32] = { operands_i[159:128], operands_i[95:64] };
  assign \gen_num_lanes[0].active_lane.out_ready  = out_ready_i;
  assign \gen_num_lanes[0].active_lane.prepare_input.sv2v_autoblock_11.i  = 32'd3;
  assign \gen_num_lanes[1].active_lane.prepare_input.sv2v_autoblock_11.i  = 32'd3;
  assign { ifmt_slice_result[255:128], ifmt_slice_result[95:64], ifmt_slice_result[15:0] } = 176'h00000000000000000000000000000000000000000000;
  assign is_boxed_1op = { is_boxed_i[12], is_boxed_i[9], is_boxed_i[6], is_boxed_i[3], is_boxed_i[0] };
  assign is_boxed_2op = { is_boxed_i[13:12], is_boxed_i[10:9], is_boxed_i[7:6], is_boxed_i[4:3], is_boxed_i[1:0] };
  assign lane_ext_bit = { fmt_slice_result[287], extension_bit_o };
  assign lane_in_ready[0] = in_ready_o;
  assign lane_out_valid[0] = \gen_num_lanes[0].active_lane.out_valid ;
  assign lane_tags[1:0] = tag_o;
  assign out_valid_o = \gen_num_lanes[0].active_lane.out_valid ;
  assign \output_processing.sv2v_autoblock_12.i  = 32'd2;
  assign \output_processing.temp_status  = status_o;
  assign result_fmt = lane_aux[2:0];
  assign result_fmt_is_int = lane_aux[4];
  assign result_is_vector = lane_aux[3];
  assign target_aux_d[0] = dst_is_cpk;
  assign \target_regs.byp_pipe_aux_q [3] = dst_is_cpk;
  assign \target_regs.byp_pipe_ready [1] = \gen_num_lanes[1].active_lane.out_ready ;
  assign \target_regs.byp_pipe_valid_q [0] = \gen_num_lanes[1].active_lane.in_valid ;
  assign \target_regs.sv2v_tmp_49222  = \gen_num_lanes[1].active_lane.in_valid ;
  assign \target_regs.sv2v_tmp_A0A5D [1] = dst_is_cpk;
  assign vectorial_op = vectorial_op_i;
endmodule

module \$paramod$aa198a329ffc044f9fef695fda54759a05728371\fpnew_classifier (operands_i, is_boxed_i, info_o);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire \gen_num_values[0].is_boxed ;
  wire \gen_num_values[0].is_inf ;
  wire \gen_num_values[0].is_nan ;
  wire \gen_num_values[0].is_normal ;
  wire \gen_num_values[0].is_quiet ;
  wire \gen_num_values[0].is_signalling ;
  wire \gen_num_values[0].is_subnormal ;
  wire \gen_num_values[0].is_zero ;
  wire [31:0] \gen_num_values[0].value ;
  wire \gen_num_values[1].is_boxed ;
  wire \gen_num_values[1].is_inf ;
  wire \gen_num_values[1].is_nan ;
  wire \gen_num_values[1].is_normal ;
  wire \gen_num_values[1].is_quiet ;
  wire \gen_num_values[1].is_signalling ;
  wire \gen_num_values[1].is_subnormal ;
  wire \gen_num_values[1].is_zero ;
  wire [31:0] \gen_num_values[1].value ;
  wire \gen_num_values[2].is_boxed ;
  wire \gen_num_values[2].is_inf ;
  wire \gen_num_values[2].is_nan ;
  wire \gen_num_values[2].is_normal ;
  wire \gen_num_values[2].is_quiet ;
  wire \gen_num_values[2].is_signalling ;
  wire \gen_num_values[2].is_subnormal ;
  wire \gen_num_values[2].is_zero ;
  wire [31:0] \gen_num_values[2].value ;
  output [23:0] info_o;
  wire [23:0] info_o;
  input [2:0] is_boxed_i;
  wire [2:0] is_boxed_i;
  input [95:0] operands_i;
  wire [95:0] operands_i;
  assign _000_ = ! operands_i[30:23];
  assign _002_ = ! operands_i[62:55];
  assign _004_ = ! operands_i[94:87];
  assign _001_ = ! operands_i[22:0];
  assign _003_ = ! operands_i[54:32];
  assign _005_ = ! operands_i[86:64];
  assign _006_ = operands_i[30:23] == 8'hff;
  assign _007_ = operands_i[62:55] == 8'hff;
  assign _008_ = operands_i[94:87] == 8'hff;
  assign _009_ = ~ operands_i[22];
  assign _010_ = ~ operands_i[54];
  assign _011_ = ~ operands_i[86];
  assign _012_ = is_boxed_i[0] && _036_;
  assign \gen_num_values[0].is_normal  = _012_ && _037_;
  assign _013_ = is_boxed_i[1] && _038_;
  assign \gen_num_values[1].is_normal  = _013_ && _039_;
  assign _014_ = is_boxed_i[2] && _040_;
  assign \gen_num_values[2].is_normal  = _014_ && _041_;
  assign \gen_num_values[0].is_zero  = _015_ && _001_;
  assign \gen_num_values[1].is_zero  = _016_ && _003_;
  assign \gen_num_values[2].is_zero  = _017_ && _005_;
  assign _015_ = is_boxed_i[0] && _000_;
  assign \gen_num_values[0].is_subnormal  = _015_ && _027_;
  assign _016_ = is_boxed_i[1] && _002_;
  assign \gen_num_values[1].is_subnormal  = _016_ && _028_;
  assign _017_ = is_boxed_i[2] && _004_;
  assign \gen_num_values[2].is_subnormal  = _017_ && _029_;
  assign _018_ = _006_ && _001_;
  assign \gen_num_values[0].is_inf  = is_boxed_i[0] && _018_;
  assign _019_ = _007_ && _003_;
  assign \gen_num_values[1].is_inf  = is_boxed_i[1] && _019_;
  assign _020_ = _008_ && _005_;
  assign \gen_num_values[2].is_inf  = is_boxed_i[2] && _020_;
  assign _021_ = _006_ && _042_;
  assign _022_ = _007_ && _043_;
  assign _023_ = _008_ && _044_;
  assign _024_ = is_boxed_i[0] && \gen_num_values[0].is_nan ;
  assign \gen_num_values[0].is_signalling  = _024_ && _009_;
  assign _025_ = is_boxed_i[1] && \gen_num_values[1].is_nan ;
  assign \gen_num_values[1].is_signalling  = _025_ && _010_;
  assign _026_ = is_boxed_i[2] && \gen_num_values[2].is_nan ;
  assign \gen_num_values[2].is_signalling  = _026_ && _011_;
  assign \gen_num_values[0].is_quiet  = \gen_num_values[0].is_nan  && _033_;
  assign \gen_num_values[1].is_quiet  = \gen_num_values[1].is_nan  && _034_;
  assign \gen_num_values[2].is_quiet  = \gen_num_values[2].is_nan  && _035_;
  assign _027_ = ! \gen_num_values[0].is_zero ;
  assign _028_ = ! \gen_num_values[1].is_zero ;
  assign _029_ = ! \gen_num_values[2].is_zero ;
  assign _030_ = ! is_boxed_i[0];
  assign _031_ = ! is_boxed_i[1];
  assign _032_ = ! is_boxed_i[2];
  assign _033_ = ! \gen_num_values[0].is_signalling ;
  assign _034_ = ! \gen_num_values[1].is_signalling ;
  assign _035_ = ! \gen_num_values[2].is_signalling ;
  assign \gen_num_values[0].is_nan  = _030_ || _021_;
  assign \gen_num_values[1].is_nan  = _031_ || _022_;
  assign \gen_num_values[2].is_nan  = _032_ || _023_;
  assign _036_ = | operands_i[30:23];
  assign _037_ = operands_i[30:23] != 8'hff;
  assign _038_ = | operands_i[62:55];
  assign _039_ = operands_i[62:55] != 8'hff;
  assign _040_ = | operands_i[94:87];
  assign _041_ = operands_i[94:87] != 8'hff;
  assign _042_ = | operands_i[22:0];
  assign _043_ = | operands_i[54:32];
  assign _044_ = | operands_i[86:64];
  assign \gen_num_values[0].is_boxed  = is_boxed_i[0];
  assign \gen_num_values[0].value  = operands_i[31:0];
  assign \gen_num_values[1].is_boxed  = is_boxed_i[1];
  assign \gen_num_values[1].value  = operands_i[63:32];
  assign \gen_num_values[2].is_boxed  = is_boxed_i[2];
  assign \gen_num_values[2].value  = operands_i[95:64];
  assign info_o = { \gen_num_values[2].is_normal , \gen_num_values[2].is_subnormal , \gen_num_values[2].is_zero , \gen_num_values[2].is_inf , \gen_num_values[2].is_nan , \gen_num_values[2].is_signalling , \gen_num_values[2].is_quiet , is_boxed_i[2], \gen_num_values[1].is_normal , \gen_num_values[1].is_subnormal , \gen_num_values[1].is_zero , \gen_num_values[1].is_inf , \gen_num_values[1].is_nan , \gen_num_values[1].is_signalling , \gen_num_values[1].is_quiet , is_boxed_i[1], \gen_num_values[0].is_normal , \gen_num_values[0].is_subnormal , \gen_num_values[0].is_zero , \gen_num_values[0].is_inf , \gen_num_values[0].is_nan , \gen_num_values[0].is_signalling , \gen_num_values[0].is_quiet , is_boxed_i[0] };
endmodule

module \$paramod$c2409bf6d6fec6245b3dea150ba71180ba9a6bc5\rr_arb_tree_DE4E6_76EE6 (clk_i, rst_ni, flush_i, rr_i, req_i, gnt_o, data_i, req_o, gnt_i, data_o, idx_o);
  wire [1:0] _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  input clk_i;
  wire clk_i;
  input [283:0] data_i;
  wire [283:0] data_i;
  output [70:0] data_o;
  wire [70:0] data_o;
  input flush_i;
  wire flush_i;
  wire [212:0] \gen_arbiter.data_nodes ;
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ;
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask ;
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx ;
  wire \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ;
  wire [1:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  wire [3:0] \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask ;
  wire [1:0] \gen_arbiter.gen_int_rr.rr_d ;
  wire \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  wire \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  wire \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  wire [2:0] \gen_arbiter.gnt_nodes ;
  wire [5:0] \gen_arbiter.index_nodes ;
  wire [3:0] \gen_arbiter.req_d ;
  wire [2:0] \gen_arbiter.req_nodes ;
  reg [1:0] \gen_arbiter.rr_q ;
  input gnt_i;
  wire gnt_i;
  output [3:0] gnt_o;
  wire [3:0] gnt_o;
  output [1:0] idx_o;
  wire [1:0] idx_o;
  input [3:0] req_i;
  wire [3:0] req_i;
  output req_o;
  wire req_o;
  input [1:0] rr_i;
  wire [1:0] rr_i;
  input rst_ni;
  wire rst_ni;
  wire [1:0] \sv2v_cast_71D7F$func$FPNewBlackbox_S2l1s.preprocessed.v:327$496.inp ;
  wire [1:0] \sv2v_cast_71D7F$func$FPNewBlackbox_S2l1s.preprocessed.v:327$497.inp ;
  wire [1:0] \sv2v_cast_71D7F$func$FPNewBlackbox_S2l1s.preprocessed.v:347$494.inp ;
  wire [1:0] \sv2v_cast_71D7F$func$FPNewBlackbox_S2l1s.preprocessed.v:347$495.inp ;
  assign _01_ = req_i[1] & \gen_arbiter.rr_q [0];
  assign _02_ = req_i[3] & \gen_arbiter.rr_q [0];
  assign gnt_o[0] = \gen_arbiter.gnt_nodes [1] & _16_;
  assign gnt_o[2] = \gen_arbiter.gnt_nodes [2] & _17_;
  assign gnt_o[1] = \gen_arbiter.gnt_nodes [1] & \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  assign gnt_o[3] = \gen_arbiter.gnt_nodes [2] & \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  assign _03_ = \gen_arbiter.req_nodes [2] & \gen_arbiter.rr_q [1];
  assign \gen_arbiter.gnt_nodes [1] = gnt_i & _19_;
  assign \gen_arbiter.gnt_nodes [2] = gnt_i & \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \gen_arbiter.rr_q  <= 2'h0;
    else if (_04_) \gen_arbiter.rr_q  <= _00_;
  assign _04_ = | { _13_, flush_i };
  assign _05_ = 32'd0 > \gen_arbiter.rr_q ;
  assign _06_ = 32'd1 > \gen_arbiter.rr_q ;
  assign _07_ = 32'd2 > \gen_arbiter.rr_q ;
  assign _08_ = 32'd3 > \gen_arbiter.rr_q ;
  assign _09_ = 32'd0 <= \gen_arbiter.rr_q ;
  assign _10_ = 32'd1 <= \gen_arbiter.rr_q ;
  assign _11_ = 32'd2 <= \gen_arbiter.rr_q ;
  assign _12_ = 32'd3 <= \gen_arbiter.rr_q ;
  assign _13_ = gnt_i && req_o;
  assign _14_ = ~ req_i[0];
  assign _15_ = ~ req_i[2];
  assign _16_ = ~ \gen_arbiter.gen_levels[1].gen_level[0].sel ;
  assign _17_ = ~ \gen_arbiter.gen_levels[1].gen_level[1].sel ;
  assign _18_ = ~ \gen_arbiter.req_nodes [1];
  assign _19_ = ~ \gen_arbiter.gen_levels[0].gen_level[0].sel ;
  assign \gen_arbiter.req_nodes [1] = req_i[0] | req_i[1];
  assign \gen_arbiter.req_nodes [2] = req_i[2] | req_i[3];
  assign \gen_arbiter.gen_levels[1].gen_level[0].sel  = _14_ | _01_;
  assign \gen_arbiter.gen_levels[1].gen_level[1].sel  = _15_ | _02_;
  assign req_o = \gen_arbiter.req_nodes [1] | \gen_arbiter.req_nodes [2];
  assign \gen_arbiter.gen_levels[0].gen_level[0].sel  = _18_ | _03_;
  assign _00_ = flush_i ? 2'h0 : \gen_arbiter.gen_int_rr.rr_d ;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [0] = _05_ ? req_i[0] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [1] = _06_ ? req_i[1] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [2] = _07_ ? req_i[2] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask [3] = _08_ ? req_i[3] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [0] = _09_ ? req_i[0] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [1] = _10_ ? req_i[1] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [2] = _11_ ? req_i[2] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask [3] = _12_ ? req_i[3] : 1'h0;
  assign \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx  = \gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty  ? \gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx  : \gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ;
  assign \gen_arbiter.gen_int_rr.rr_d  = _13_ ? \gen_arbiter.gen_int_rr.gen_fair_arb.next_idx  : 2'hx;
  assign \gen_arbiter.data_nodes [141:71] = \gen_arbiter.gen_levels[1].gen_level[0].sel  ? data_i[141:71] : data_i[70:0];
  assign \gen_arbiter.data_nodes [212:142] = \gen_arbiter.gen_levels[1].gen_level[1].sel  ? data_i[283:213] : data_i[212:142];
  assign idx_o = \gen_arbiter.gen_levels[0].gen_level[0].sel  ? { 1'h1, \gen_arbiter.gen_levels[1].gen_level[1].sel  } : { 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel  };
  assign data_o = \gen_arbiter.gen_levels[0].gen_level[0].sel  ? \gen_arbiter.data_nodes [212:142] : \gen_arbiter.data_nodes [141:71];
  \$paramod\lzc\WIDTH=32'00000000000000000000000000000100\MODE=1'0  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_lower  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_idx ),
    .in_i(\gen_arbiter.gen_int_rr.gen_fair_arb.lower_mask )
  );
  \$paramod\lzc\WIDTH=32'00000000000000000000000000000100\MODE=1'0  \gen_arbiter.gen_int_rr.gen_fair_arb.i_lzc_upper  (
    .cnt_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_idx ),
    .empty_o(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_empty ),
    .in_i(\gen_arbiter.gen_int_rr.gen_fair_arb.upper_mask )
  );
  assign \gen_arbiter.data_nodes [70:0] = data_o;
  assign \gen_arbiter.gnt_nodes [0] = gnt_i;
  assign \gen_arbiter.index_nodes  = { 1'h0, \gen_arbiter.gen_levels[1].gen_level[1].sel , 1'h0, \gen_arbiter.gen_levels[1].gen_level[0].sel , idx_o };
  assign \gen_arbiter.req_d  = req_i;
  assign \gen_arbiter.req_nodes [0] = req_o;
  assign \sv2v_cast_71D7F$func$FPNewBlackbox_S2l1s.preprocessed.v:327$496.inp  = 2'hx;
  assign \sv2v_cast_71D7F$func$FPNewBlackbox_S2l1s.preprocessed.v:327$497.inp  = 2'hx;
  assign \sv2v_cast_71D7F$func$FPNewBlackbox_S2l1s.preprocessed.v:347$494.inp  = 2'hx;
  assign \sv2v_cast_71D7F$func$FPNewBlackbox_S2l1s.preprocessed.v:347$495.inp  = 2'hx;
endmodule

module \$paramod$c5a6ae4c95656295decaebc5a3a76e6fe788d2fd\fpnew_opgroup_block_A94B6_B7406 (clk_i, rst_ni, operands_i, is_boxed_i, rnd_mode_i, op_i, op_mod_i, src_fmt_i, dst_fmt_i, int_fmt_i, vectorial_op_i, tag_i, in_valid_i, in_ready_o, flush_i, result_o, status_o, extension_bit_o, tag_o, out_valid_o, out_ready_i
, busy_o);
  wire [31:0] _00_;
  wire _01_;
  wire _02_;
  wire [1:0] _03_;
  wire [31:0] _04_;
  wire [71:0] arbiter_output;
  output busy_o;
  wire busy_o;
  input clk_i;
  wire clk_i;
  input [2:0] dst_fmt_i;
  wire [2:0] dst_fmt_i;
  output extension_bit_o;
  wire extension_bit_o;
  input flush_i;
  wire flush_i;
  wire [4:0] fmt_busy;
  wire [4:0] fmt_in_ready;
  wire [4:0] fmt_out_ready;
  wire [4:0] fmt_out_valid;
  wire [359:0] fmt_outputs;
  wire \gen_merged_slice.in_valid ;
  output in_ready_o;
  wire in_ready_o;
  input in_valid_i;
  wire in_valid_i;
  input [1:0] int_fmt_i;
  wire [1:0] int_fmt_i;
  input [14:0] is_boxed_i;
  wire [14:0] is_boxed_i;
  input [3:0] op_i;
  wire [3:0] op_i;
  input op_mod_i;
  wire op_mod_i;
  input [191:0] operands_i;
  wire [191:0] operands_i;
  input out_ready_i;
  wire out_ready_i;
  output out_valid_o;
  wire out_valid_o;
  output [63:0] result_o;
  wire [63:0] result_o;
  input [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_i;
  input rst_ni;
  wire rst_ni;
  input [2:0] src_fmt_i;
  wire [2:0] src_fmt_i;
  output [4:0] status_o;
  wire [4:0] status_o;
  input [1:0] tag_i;
  wire [1:0] tag_i;
  output [1:0] tag_o;
  wire [1:0] tag_o;
  input vectorial_op_i;
  wire vectorial_op_i;
  assign in_ready_o = in_valid_i & _02_;
  assign \gen_merged_slice.in_valid  = in_valid_i & _01_;
  assign _01_ = _03_ == 2'h2;
  wire [4:0] _11_ = { 4'h0, fmt_in_ready[0] };
  assign _02_ = _11_[dst_fmt_i +: 1];
  wire [9:0] _12_ = 10'h2aa;
  assign _03_ = _12_[$signed({ _00_[31:1], 1'h0 }) +: 2];
  assign { _04_[31], _00_[31:1] } = 32'd4 - dst_fmt_i;
  \$paramod$9bfc9a0daa8cb73cb4aad145c8d465ac6f5f5f03\fpnew_opgroup_multifmt_slice_607F1_85D30  \gen_merged_slice.i_multifmt_slice  (
    .busy_o(busy_o),
    .clk_i(clk_i),
    .dst_fmt_i(dst_fmt_i),
    .extension_bit_o(fmt_outputs[2]),
    .flush_i(flush_i),
    .in_ready_o(fmt_in_ready[0]),
    .in_valid_i(\gen_merged_slice.in_valid ),
    .int_fmt_i(int_fmt_i),
    .is_boxed_i(is_boxed_i),
    .op_i(op_i),
    .op_mod_i(op_mod_i),
    .operands_i(operands_i),
    .out_ready_i(fmt_out_ready[0]),
    .out_valid_o(fmt_out_valid[0]),
    .result_o(fmt_outputs[71:8]),
    .rnd_mode_i(rnd_mode_i),
    .rst_ni(rst_ni),
    .src_fmt_i(src_fmt_i),
    .status_o(fmt_outputs[7:3]),
    .tag_i(tag_i),
    .tag_o(fmt_outputs[1:0]),
    .vectorial_op_i(vectorial_op_i)
  );
  \$paramod$2d98b2ed91e87ed1e332161bf5d593baf43453be\rr_arb_tree_52163_F264E  i_arbiter (
    .clk_i(clk_i),
    .data_i({ 288'hfffffffffffffffffdfffffffffffffffffdfffffffffffffffffdfffffffffffffffffd, fmt_outputs[71:0] }),
    .data_o(arbiter_output),
    .flush_i(flush_i),
    .gnt_i(out_ready_i),
    .gnt_o(fmt_out_ready),
    .req_i({ 4'h0, fmt_out_valid[0] }),
    .req_o(out_valid_o),
    .rr_i(3'h0),
    .rst_ni(rst_ni)
  );
  assign _00_[0] = 1'h0;
  assign _04_[30:0] = _00_[31:1];
  assign extension_bit_o = arbiter_output[2];
  assign fmt_busy = { 4'h0, busy_o };
  assign fmt_in_ready[4:1] = 4'h0;
  assign fmt_out_valid[4:1] = 4'h0;
  assign fmt_outputs[359:72] = 288'hfffffffffffffffffdfffffffffffffffffdfffffffffffffffffdfffffffffffffffffd;
  assign result_o = arbiter_output[71:8];
  assign status_o = arbiter_output[7:3];
  assign tag_o = arbiter_output[1:0];
endmodule

module \$paramod$ca28389d3767f3d8e311b7cb6f630f24efabb5e2\fpnew_opgroup_fmt_slice_E368D_75924 (clk_i, rst_ni, operands_i, is_boxed_i, rnd_mode_i, op_i, op_mod_i, vectorial_op_i, tag_i, in_valid_i, in_ready_o, flush_i, result_o, status_o, extension_bit_o, tag_o, out_valid_o, out_ready_i, busy_o);
  output busy_o;
  wire busy_o;
  input clk_i;
  wire clk_i;
  output extension_bit_o;
  wire extension_bit_o;
  input flush_i;
  wire flush_i;
  wire \gen_num_lanes[0].active_lane.in_valid ;
  wire [95:0] \gen_num_lanes[0].active_lane.local_operands ;
  wire [31:0] \gen_num_lanes[0].active_lane.op_result ;
  wire [4:0] \gen_num_lanes[0].active_lane.op_status ;
  wire \gen_num_lanes[0].active_lane.out_ready ;
  wire \gen_num_lanes[0].active_lane.out_valid ;
  wire [31:0] \gen_num_lanes[0].active_lane.prepare_input.sv2v_autoblock_1.i ;
  wire [31:0] \gen_num_lanes[0].local_result ;
  wire \gen_num_lanes[0].local_sign ;
  wire \gen_num_lanes[1].active_lane.in_valid ;
  wire [95:0] \gen_num_lanes[1].active_lane.local_operands ;
  wire [31:0] \gen_num_lanes[1].active_lane.op_result ;
  wire [4:0] \gen_num_lanes[1].active_lane.op_status ;
  wire \gen_num_lanes[1].active_lane.out_ready ;
  wire \gen_num_lanes[1].active_lane.out_valid ;
  wire [31:0] \gen_num_lanes[1].active_lane.prepare_input.sv2v_autoblock_1.i ;
  wire [31:0] \gen_num_lanes[1].local_result ;
  wire \gen_num_lanes[1].local_sign ;
  output in_ready_o;
  wire in_ready_o;
  input in_valid_i;
  wire in_valid_i;
  input [2:0] is_boxed_i;
  wire [2:0] is_boxed_i;
  wire [1:0] lane_busy;
  wire [19:0] lane_class_mask;
  wire [1:0] lane_ext_bit;
  wire [1:0] lane_in_ready;
  wire [1:0] lane_is_class;
  wire [1:0] lane_out_valid;
  wire [9:0] lane_status;
  wire [3:0] lane_tags;
  wire [1:0] lane_vectorial;
  input [3:0] op_i;
  wire [3:0] op_i;
  input op_mod_i;
  wire op_mod_i;
  input [191:0] operands_i;
  wire [191:0] operands_i;
  input out_ready_i;
  wire out_ready_i;
  output out_valid_o;
  wire out_valid_o;
  wire [31:0] \output_processing.sv2v_autoblock_2.i ;
  wire [4:0] \output_processing.temp_status ;
  wire result_is_class;
  wire result_is_vector;
  output [63:0] result_o;
  wire [63:0] result_o;
  input [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_i;
  input rst_ni;
  wire rst_ni;
  wire [63:0] slice_regular_result;
  wire [63:0] slice_result;
  wire [63:0] slice_vec_class_result;
  output [4:0] status_o;
  wire [4:0] status_o;
  input [1:0] tag_i;
  wire [1:0] tag_i;
  output [1:0] tag_o;
  wire [1:0] tag_o;
  wire vectorial_op;
  input vectorial_op_i;
  wire vectorial_op_i;
  assign \gen_num_lanes[1].active_lane.in_valid  = in_valid_i & vectorial_op_i;
  assign \gen_num_lanes[1].active_lane.out_ready  = out_ready_i & result_is_vector;
  assign lane_out_valid[1] = \gen_num_lanes[1].active_lane.out_valid  & result_is_vector;
  assign status_o = lane_status[4:0] | lane_status[9:5];
  assign busy_o = | lane_busy;
  assign \gen_num_lanes[0].local_result  = \gen_num_lanes[0].active_lane.out_valid  ? \gen_num_lanes[0].active_lane.op_result  : { extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o };
  assign \gen_num_lanes[1].local_result  = lane_out_valid[1] ? \gen_num_lanes[1].active_lane.op_result  : { extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o, extension_bit_o };
  assign lane_status[4:0] = \gen_num_lanes[0].active_lane.out_valid  ? \gen_num_lanes[0].active_lane.op_status  : 5'h00;
  assign lane_status[9:5] = lane_out_valid[1] ? \gen_num_lanes[1].active_lane.op_status  : 5'h00;
  \$paramod$e29e543669871b34681ea2ce24e8ecb683df94c9\fpnew_fma_FC83A_5615B  \gen_num_lanes[0].active_lane.lane_instance.i_fma  (
    .aux_i(vectorial_op_i),
    .aux_o(result_is_vector),
    .busy_o(lane_busy[0]),
    .clk_i(clk_i),
    .extension_bit_o(extension_bit_o),
    .flush_i(flush_i),
    .in_ready_o(in_ready_o),
    .in_valid_i(in_valid_i),
    .is_boxed_i(is_boxed_i),
    .op_i(op_i),
    .op_mod_i(op_mod_i),
    .operands_i({ operands_i[159:128], operands_i[95:64], operands_i[31:0] }),
    .out_ready_i(out_ready_i),
    .out_valid_o(\gen_num_lanes[0].active_lane.out_valid ),
    .result_o(\gen_num_lanes[0].active_lane.op_result ),
    .rnd_mode_i(rnd_mode_i),
    .rst_ni(rst_ni),
    .status_o(\gen_num_lanes[0].active_lane.op_status ),
    .tag_i(tag_i),
    .tag_o(tag_o)
  );
  \$paramod$e29e543669871b34681ea2ce24e8ecb683df94c9\fpnew_fma_FC83A_5615B  \gen_num_lanes[1].active_lane.lane_instance.i_fma  (
    .aux_i(vectorial_op_i),
    .aux_o(lane_vectorial[1]),
    .busy_o(lane_busy[1]),
    .clk_i(clk_i),
    .extension_bit_o(lane_ext_bit[1]),
    .flush_i(flush_i),
    .in_ready_o(lane_in_ready[1]),
    .in_valid_i(\gen_num_lanes[1].active_lane.in_valid ),
    .is_boxed_i(is_boxed_i),
    .op_i(op_i),
    .op_mod_i(op_mod_i),
    .operands_i({ operands_i[191:160], operands_i[127:96], operands_i[63:32] }),
    .out_ready_i(\gen_num_lanes[1].active_lane.out_ready ),
    .out_valid_o(\gen_num_lanes[1].active_lane.out_valid ),
    .result_o(\gen_num_lanes[1].active_lane.op_result ),
    .rnd_mode_i(rnd_mode_i),
    .rst_ni(rst_ni),
    .status_o(\gen_num_lanes[1].active_lane.op_status ),
    .tag_i(tag_i),
    .tag_o(lane_tags[3:2])
  );
  assign \gen_num_lanes[0].active_lane.in_valid  = in_valid_i;
  assign \gen_num_lanes[0].active_lane.local_operands  = { operands_i[159:128], operands_i[95:64], operands_i[31:0] };
  assign \gen_num_lanes[0].active_lane.out_ready  = out_ready_i;
  assign \gen_num_lanes[0].active_lane.prepare_input.sv2v_autoblock_1.i  = 32'd3;
  assign \gen_num_lanes[0].local_sign  = 1'h1;
  assign \gen_num_lanes[1].active_lane.local_operands  = { operands_i[191:160], operands_i[127:96], operands_i[63:32] };
  assign \gen_num_lanes[1].active_lane.prepare_input.sv2v_autoblock_1.i  = 32'd3;
  assign \gen_num_lanes[1].local_sign  = 1'h1;
  assign lane_class_mask = 20'h00401;
  assign lane_ext_bit[0] = extension_bit_o;
  assign lane_in_ready[0] = in_ready_o;
  assign lane_is_class = 2'h0;
  assign lane_out_valid[0] = \gen_num_lanes[0].active_lane.out_valid ;
  assign lane_tags[1:0] = tag_o;
  assign lane_vectorial[0] = result_is_vector;
  assign out_valid_o = \gen_num_lanes[0].active_lane.out_valid ;
  assign \output_processing.sv2v_autoblock_2.i  = 32'd2;
  assign \output_processing.temp_status  = status_o;
  assign result_is_class = 1'h0;
  assign result_o = { \gen_num_lanes[1].local_result , \gen_num_lanes[0].local_result  };
  assign slice_regular_result = { \gen_num_lanes[1].local_result , \gen_num_lanes[0].local_result  };
  assign slice_result = { \gen_num_lanes[1].local_result , \gen_num_lanes[0].local_result  };
  assign slice_vec_class_result = 64'h0000000000008181;
  assign vectorial_op = vectorial_op_i;
endmodule

module \$paramod$d7bea08ed3d4f780db1801c11f4457098ad06b69\fpnew_opgroup_block_A94B6_B7406 (clk_i, rst_ni, operands_i, is_boxed_i, rnd_mode_i, op_i, op_mod_i, src_fmt_i, dst_fmt_i, int_fmt_i, vectorial_op_i, tag_i, in_valid_i, in_ready_o, flush_i, result_o, status_o, extension_bit_o, tag_o, out_valid_o, out_ready_i
, busy_o);
  wire _0_;
  wire _1_;
  wire [71:0] arbiter_output;
  output busy_o;
  wire busy_o;
  input clk_i;
  wire clk_i;
  input [2:0] dst_fmt_i;
  wire [2:0] dst_fmt_i;
  output extension_bit_o;
  wire extension_bit_o;
  input flush_i;
  wire flush_i;
  wire [4:0] fmt_busy;
  wire [4:0] fmt_in_ready;
  wire [4:0] fmt_out_ready;
  wire [4:0] fmt_out_valid;
  wire [359:0] fmt_outputs;
  wire \gen_parallel_slices[0].active_format.in_valid ;
  output in_ready_o;
  wire in_ready_o;
  input in_valid_i;
  wire in_valid_i;
  input [1:0] int_fmt_i;
  wire [1:0] int_fmt_i;
  input [9:0] is_boxed_i;
  wire [9:0] is_boxed_i;
  input [3:0] op_i;
  wire [3:0] op_i;
  input op_mod_i;
  wire op_mod_i;
  input [127:0] operands_i;
  wire [127:0] operands_i;
  input out_ready_i;
  wire out_ready_i;
  output out_valid_o;
  wire out_valid_o;
  output [63:0] result_o;
  wire [63:0] result_o;
  input [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_i;
  input rst_ni;
  wire rst_ni;
  input [2:0] src_fmt_i;
  wire [2:0] src_fmt_i;
  output [4:0] status_o;
  wire [4:0] status_o;
  input [1:0] tag_i;
  wire [1:0] tag_i;
  output [1:0] tag_o;
  wire [1:0] tag_o;
  input vectorial_op_i;
  wire vectorial_op_i;
  assign in_ready_o = in_valid_i & _1_;
  assign \gen_parallel_slices[0].active_format.in_valid  = in_valid_i & _0_;
  assign _0_ = ! dst_fmt_i;
  wire [4:0] _6_ = { 4'h0, fmt_in_ready[0] };
  assign _1_ = _6_[dst_fmt_i +: 1];
  \$paramod$6ba5978208388c95aa7566a97f5babad3e109cc5\fpnew_opgroup_fmt_slice_E368D_75924  \gen_parallel_slices[0].active_format.i_fmt_slice  (
    .busy_o(busy_o),
    .clk_i(clk_i),
    .extension_bit_o(fmt_outputs[2]),
    .flush_i(flush_i),
    .in_ready_o(fmt_in_ready[0]),
    .in_valid_i(\gen_parallel_slices[0].active_format.in_valid ),
    .is_boxed_i(is_boxed_i[1:0]),
    .op_i(op_i),
    .op_mod_i(op_mod_i),
    .operands_i(operands_i),
    .out_ready_i(fmt_out_ready[0]),
    .out_valid_o(fmt_out_valid[0]),
    .result_o(fmt_outputs[71:8]),
    .rnd_mode_i(rnd_mode_i),
    .rst_ni(rst_ni),
    .status_o(fmt_outputs[7:3]),
    .tag_i(tag_i),
    .tag_o(fmt_outputs[1:0]),
    .vectorial_op_i(vectorial_op_i)
  );
  \$paramod$2d98b2ed91e87ed1e332161bf5d593baf43453be\rr_arb_tree_52163_F264E  i_arbiter (
    .clk_i(clk_i),
    .data_i({ 288'hfffffffffffffffffdfffffffffffffffffdfffffffffffffffffdfffffffffffffffffd, fmt_outputs[71:0] }),
    .data_o(arbiter_output),
    .flush_i(flush_i),
    .gnt_i(out_ready_i),
    .gnt_o(fmt_out_ready),
    .req_i({ 4'h0, fmt_out_valid[0] }),
    .req_o(out_valid_o),
    .rr_i(3'h0),
    .rst_ni(rst_ni)
  );
  assign extension_bit_o = arbiter_output[2];
  assign fmt_busy = { 4'h0, busy_o };
  assign fmt_in_ready[4:1] = 4'h0;
  assign fmt_out_valid[4:1] = 4'h0;
  assign fmt_outputs[359:72] = 288'hfffffffffffffffffdfffffffffffffffffdfffffffffffffffffdfffffffffffffffffd;
  assign result_o = arbiter_output[71:8];
  assign status_o = arbiter_output[7:3];
  assign tag_o = arbiter_output[1:0];
endmodule

module \$paramod$e29e543669871b34681ea2ce24e8ecb683df94c9\fpnew_fma_FC83A_5615B (clk_i, rst_ni, operands_i, is_boxed_i, rnd_mode_i, op_i, op_mod_i, tag_i, aux_i, in_valid_i, in_ready_o, flush_i, result_o, status_o, extension_bit_o, tag_o, aux_o, out_valid_o, out_ready_i, busy_o);
  wire _000_;
  wire [6:0] _001_;
  wire [9:0] _002_;
  wire [24:0] _003_;
  wire [6:0] _004_;
  wire [9:0] _005_;
  wire _006_;
  wire [31:0] _007_;
  wire _008_;
  wire [50:0] _009_;
  wire [9:0] _010_;
  wire [24:0] _011_;
  wire _012_;
  wire [31:0] _013_;
  wire _014_;
  wire [50:0] _015_;
  wire [31:0] _016_;
  wire _017_;
  wire [31:0] _018_;
  wire [31:0] _019_;
  wire [31:0] _020_;
  wire [31:0] _021_;
  wire [31:0] _022_;
  wire [76:0] _023_;
  wire [31:0] _024_;
  wire [31:0] _025_;
  wire [31:0] _026_;
  wire [31:0] _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire [76:0] _054_;
  wire _055_;
  wire _056_;
  wire [75:0] _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire [31:0] _068_;
  wire [31:0] _069_;
  wire [31:0] _070_;
  wire [31:0] _071_;
  wire [31:0] _072_;
  wire [76:0] _073_;
  wire _074_;
  wire _075_;
  wire [31:0] _076_;
  wire _077_;
  wire [75:0] addend_after_shift;
  wire [6:0] addend_shamt;
  wire [6:0] addend_shamt_q;
  wire [75:0] addend_shifted;
  wire [23:0] addend_sticky_bits;
  wire any_operand_inf;
  wire any_operand_nan;
  input aux_i;
  wire aux_i;
  output aux_o;
  wire aux_o;
  output busy_o;
  wire busy_o;
  input clk_i;
  wire clk_i;
  wire effective_subtraction;
  wire effective_subtraction_q;
  wire [9:0] exponent_a;
  wire [9:0] exponent_addend;
  wire [9:0] exponent_b;
  wire [9:0] exponent_c;
  wire [9:0] exponent_difference;
  wire [9:0] exponent_difference_q;
  wire [9:0] exponent_product;
  wire [9:0] exponent_product_q;
  output extension_bit_o;
  wire extension_bit_o;
  wire [9:0] final_exponent;
  wire [24:0] final_mantissa;
  wire final_sign;
  wire final_sign_q;
  input flush_i;
  wire flush_i;
  wire \gen_inside_pipeline[0].reg_ena ;
  output in_ready_o;
  wire in_ready_o;
  input in_valid_i;
  wire in_valid_i;
  wire [7:0] info_a;
  wire [7:0] info_b;
  wire [7:0] info_c;
  wire [23:0] info_q;
  wire inject_carry_in;
  wire inp_pipe_aux_q;
  wire [2:0] inp_pipe_is_boxed_q;
  wire inp_pipe_op_mod_q;
  wire [3:0] inp_pipe_op_q;
  wire [95:0] inp_pipe_operands_q;
  wire inp_pipe_ready;
  wire [2:0] inp_pipe_rnd_mode_q;
  wire [1:0] inp_pipe_tag_q;
  wire inp_pipe_valid_q;
  input [2:0] is_boxed_i;
  wire [2:0] is_boxed_i;
  wire [5:0] leading_zero_count;
  wire [6:0] leading_zero_count_sgn;
  wire lzc_zeroes;
  wire [23:0] mantissa_a;
  wire [23:0] mantissa_b;
  wire [23:0] mantissa_c;
  wire [13:0] mid_pipe_add_shamt_q;
  wire [0:1] mid_pipe_aux_q;
  wire [0:1] mid_pipe_eff_sub_q;
  wire [19:0] mid_pipe_exp_diff_q;
  wire [19:0] mid_pipe_exp_prod_q;
  wire [0:1] mid_pipe_final_sign_q;
  wire [0:1] mid_pipe_ready;
  wire [0:1] mid_pipe_res_is_spec_q;
  wire [5:0] mid_pipe_rnd_mode_q;
  wire [63:0] mid_pipe_spec_res_q;
  wire [9:0] mid_pipe_spec_stat_q;
  wire [0:1] mid_pipe_sticky_q;
  wire [151:0] mid_pipe_sum_q;
  wire [3:0] mid_pipe_tag_q;
  wire [19:0] mid_pipe_tent_exp_q;
  wire [0:1] mid_pipe_valid_q;
  wire [6:0] norm_shamt;
  wire [9:0] normalized_exponent;
  wire of_after_round;
  wire of_before_round;
  input [3:0] op_i;
  wire [3:0] op_i;
  input op_mod_i;
  wire op_mod_i;
  wire [31:0] operand_a;
  wire [31:0] operand_b;
  wire [31:0] operand_c;
  input [95:0] operands_i;
  wire [95:0] operands_i;
  wire out_pipe_aux_q;
  wire out_pipe_ready;
  wire [31:0] out_pipe_result_q;
  wire [4:0] out_pipe_status_q;
  wire [1:0] out_pipe_tag_q;
  wire out_pipe_valid_q;
  input out_ready_i;
  wire out_ready_i;
  output out_valid_o;
  wire out_valid_o;
  wire [30:0] pre_round_abs;
  wire [7:0] pre_round_exponent;
  wire [22:0] pre_round_mantissa;
  wire pre_round_sign;
  wire [47:0] product;
  wire [75:0] product_shifted;
  wire [31:0] regular_result;
  wire [4:0] regular_status;
  wire [31:0] result_d;
  wire result_is_special;
  wire result_is_special_q;
  output [31:0] result_o;
  wire [31:0] result_o;
  wire result_zero;
  input [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_q;
  wire [1:0] round_sticky_bits;
  wire [30:0] rounded_abs;
  wire rounded_sign;
  input rst_ni;
  wire rst_ni;
  wire signalling_nan;
  wire [31:0] special_result;
  wire [31:0] special_result_q;
  wire [4:0] special_status;
  wire [4:0] special_status_q;
  wire [4:0] status_d;
  output [4:0] status_o;
  wire [4:0] status_o;
  wire sticky_after_norm;
  wire sticky_before_add;
  wire sticky_before_add_q;
  wire [75:0] sum;
  wire sum_carry;
  wire [50:0] sum_lower;
  wire [75:0] sum_q;
  wire [76:0] sum_raw;
  wire [76:0] sum_shifted;
  wire [50:0] sum_sticky_bits;
  wire [10:1] sv2v_tmp_00793;
  wire [32:1] sv2v_tmp_0252C;
  wire [2:1] sv2v_tmp_192AB;
  wire sv2v_tmp_25EE6;
  wire [5:1] sv2v_tmp_2A843;
  wire [10:1] sv2v_tmp_2D21E;
  wire [2:1] sv2v_tmp_36387;
  wire [32:1] sv2v_tmp_4A83E;
  wire sv2v_tmp_56A72;
  wire [2:1] sv2v_tmp_6DFE4;
  wire sv2v_tmp_6F5F7;
  wire sv2v_tmp_73AEA;
  wire sv2v_tmp_7DEC5;
  wire [7:1] sv2v_tmp_83404;
  wire sv2v_tmp_8D189;
  wire sv2v_tmp_9E262;
  wire [3:1] sv2v_tmp_A74E2;
  wire [10:1] sv2v_tmp_B4C85;
  wire [96:1] sv2v_tmp_BC8B9;
  wire sv2v_tmp_CB10A;
  wire [4:1] sv2v_tmp_CBA8F;
  wire sv2v_tmp_CDA0E;
  wire [76:1] sv2v_tmp_CEAB3;
  wire sv2v_tmp_D1C37;
  wire sv2v_tmp_D7BD0;
  wire [3:1] sv2v_tmp_E1339;
  wire [5:1] sv2v_tmp_EC01B;
  wire [3:1] sv2v_tmp_FE389;
  input [1:0] tag_i;
  wire [1:0] tag_i;
  output [1:0] tag_o;
  wire [1:0] tag_o;
  wire [9:0] tentative_exponent;
  wire [9:0] tentative_exponent_q;
  wire tentative_sign;
  wire uf_after_round;
  assign exponent_addend = $signed({ 2'h0, operand_c[30:23] }) + $signed({ 9'h000, _056_ });
  assign _020_ = { 2'h0, exponent_a[7:0] } + info_a[6];
  assign _021_ = _020_ + { 2'h0, operand_b[30:23] };
  assign _022_ = _021_ + info_b[6];
  assign _023_ = { 26'h0000000, product, 2'h0 } + addend_shifted;
  assign sum_raw = _023_ + inject_carry_in;
  assign _025_ = 32'd26 + leading_zero_count;
  assign _024_ = $signed(_070_) + $signed(32'd1);
  assign _026_ = $signed(32'd26) + $signed(mid_pipe_exp_prod_q[9:0]);
  assign _027_ = $signed(normalized_exponent) + $signed(32'd1);
  assign inject_carry_in = effective_subtraction & _058_;
  assign \gen_inside_pipeline[0].reg_ena  = in_ready_o & in_valid_i;
  assign regular_status[1] = uf_after_round & regular_status[0];
  reg [75:0] _091_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _091_ <= 76'h0000000000000000000;
    else if (\gen_inside_pipeline[0].reg_ena ) _091_ <= mid_pipe_sum_q[151:76];
  assign mid_pipe_sum_q[75:0] = _091_;
  reg \mid_pipe_valid_q_reg[0] ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \mid_pipe_valid_q_reg[0]  <= 1'h0;
    else if (_028_) \mid_pipe_valid_q_reg[0]  <= _000_;
  assign mid_pipe_valid_q[1] = \mid_pipe_valid_q_reg[0] ;
  reg \mid_pipe_eff_sub_q_reg[0] ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \mid_pipe_eff_sub_q_reg[0]  <= 1'h0;
    else if (\gen_inside_pipeline[0].reg_ena ) \mid_pipe_eff_sub_q_reg[0]  <= effective_subtraction;
  assign mid_pipe_eff_sub_q[1] = \mid_pipe_eff_sub_q_reg[0] ;
  reg \mid_pipe_sticky_q_reg[0] ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \mid_pipe_sticky_q_reg[0]  <= 1'h0;
    else if (\gen_inside_pipeline[0].reg_ena ) \mid_pipe_sticky_q_reg[0]  <= sticky_before_add;
  assign mid_pipe_sticky_q[1] = \mid_pipe_sticky_q_reg[0] ;
  reg \mid_pipe_final_sign_q_reg[0] ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \mid_pipe_final_sign_q_reg[0]  <= 1'h0;
    else if (\gen_inside_pipeline[0].reg_ena ) \mid_pipe_final_sign_q_reg[0]  <= final_sign;
  assign mid_pipe_final_sign_q[1] = \mid_pipe_final_sign_q_reg[0] ;
  reg [9:0] _096_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _096_ <= 10'h000;
    else if (\gen_inside_pipeline[0].reg_ena ) _096_ <= exponent_product;
  assign mid_pipe_exp_prod_q[9:0] = _096_;
  reg [9:0] _097_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _097_ <= 10'h000;
    else if (\gen_inside_pipeline[0].reg_ena ) _097_ <= exponent_difference;
  assign mid_pipe_exp_diff_q[9:0] = _097_;
  reg [6:0] _098_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _098_ <= 7'h00;
    else if (\gen_inside_pipeline[0].reg_ena ) _098_ <= addend_shamt;
  assign mid_pipe_add_shamt_q[6:0] = _098_;
  reg [9:0] _099_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _099_ <= 10'h000;
    else if (\gen_inside_pipeline[0].reg_ena ) _099_ <= sv2v_tmp_B4C85;
  assign mid_pipe_tent_exp_q[9:0] = _099_;
  reg \mid_pipe_aux_q_reg[0] ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \mid_pipe_aux_q_reg[0]  <= 1'h0;
    else if (\gen_inside_pipeline[0].reg_ena ) \mid_pipe_aux_q_reg[0]  <= aux_i;
  assign mid_pipe_aux_q[1] = \mid_pipe_aux_q_reg[0] ;
  reg [1:0] _101_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _101_ <= 2'h0;
    else if (\gen_inside_pipeline[0].reg_ena ) _101_ <= tag_i;
  assign mid_pipe_tag_q[1:0] = _101_;
  reg [31:0] _102_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _102_ <= 32'd0;
    else if (\gen_inside_pipeline[0].reg_ena ) _102_ <= special_result;
  assign mid_pipe_spec_res_q[31:0] = _102_;
  reg [2:0] _103_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _103_ <= 3'h0;
    else if (\gen_inside_pipeline[0].reg_ena ) _103_ <= rnd_mode_i;
  assign mid_pipe_rnd_mode_q[2:0] = _103_;
  reg \mid_pipe_res_is_spec_q_reg[0] ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \mid_pipe_res_is_spec_q_reg[0]  <= 1'h0;
    else if (\gen_inside_pipeline[0].reg_ena ) \mid_pipe_res_is_spec_q_reg[0]  <= result_is_special;
  assign mid_pipe_res_is_spec_q[1] = \mid_pipe_res_is_spec_q_reg[0] ;
  reg \mid_pipe_spec_stat_q_reg[4] ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \mid_pipe_spec_stat_q_reg[4]  <= 1'h0;
    else if (\gen_inside_pipeline[0].reg_ena ) \mid_pipe_spec_stat_q_reg[4]  <= mid_pipe_spec_stat_q[9];
  assign mid_pipe_spec_stat_q[4] = \mid_pipe_spec_stat_q_reg[4] ;
  assign _028_ = | { in_ready_o, flush_i };
  assign _029_ = | { _065_, _062_ };
  assign _030_ = | { _065_, _064_, _063_ };
  assign _031_ = | { _065_, _064_, _062_ };
  assign _032_ = | { _065_, _064_, _063_, _062_ };
  assign _033_ = sum_raw[76] == tentative_sign;
  assign uf_after_round = ! rounded_abs[30:23];
  assign of_after_round = rounded_abs[30:23] == 8'hff;
  assign _034_ = $signed(_024_) >= $signed(32'd0);
  assign of_before_round = $signed(final_exponent) >= $signed(32'd255);
  assign _035_ = $signed(exponent_difference) > $signed(32'd0);
  assign _036_ = $signed(normalized_exponent) > $signed(32'd1);
  assign _037_ = $signed(exponent_difference) <= $signed(32'd4294967247);
  assign _038_ = $signed(exponent_difference) <= $signed(32'd26);
  assign _039_ = $signed(mid_pipe_exp_diff_q[9:0]) <= $signed(32'd0);
  assign _040_ = $signed(mid_pipe_exp_diff_q[9:0]) <= $signed(32'd2);
  assign _041_ = info_a[4] && info_b[5];
  assign _042_ = info_a[5] && info_b[4];
  assign _043_ = _051_ && info_c[4];
  assign _044_ = _043_ && effective_subtraction;
  assign _045_ = effective_subtraction && _059_;
  assign _046_ = effective_subtraction && _033_;
  assign _047_ = mid_pipe_eff_sub_q[1] && _040_;
  assign _048_ = _034_ && _049_;
  assign _049_ = ! lzc_zeroes;
  assign _050_ = _041_ || _042_;
  assign _051_ = info_a[4] || info_b[4];
  assign _052_ = info_a[5] || info_b[5];
  assign _053_ = _039_ || _047_;
  assign product = { info_a[7], mantissa_a[22:0] } * { info_b[7], operand_b[22:0] };
  assign _054_ = - sum_raw;
  assign _055_ = ~ operands_i[31];
  assign _056_ = ~ info_c[7];
  assign _057_ = ~ addend_after_shift;
  assign _058_ = ~ sticky_before_add;
  assign _059_ = ~ sum_raw[76];
  assign _060_ = ~ mid_pipe_valid_q[1];
  assign in_ready_o = out_ready_i | _060_;
  assign sticky_after_norm = _066_ | mid_pipe_sticky_q[1];
  assign regular_status[2] = of_before_round | of_after_round;
  assign _061_ = _067_ | of_before_round;
  assign regular_status[0] = _061_ | of_after_round;
  assign _011_ = _036_ ? sum_shifted[74:50] : { 1'h0, sum_shifted[74:51] };
  assign _015_ = _036_ ? { sum_shifted[49:0], 1'h0 } : sum_shifted[50:0];
  assign _010_ = _036_ ? _071_[9:0] : 10'h000;
  assign _002_ = sum_shifted[75] ? normalized_exponent : _010_;
  assign _009_ = sum_shifted[75] ? sum_shifted[50:0] : _015_;
  assign _003_ = sum_shifted[75] ? { 1'h1, sum_shifted[74:51] } : _011_;
  assign final_mantissa = sum_shifted[76] ? { 1'h1, sum_shifted[75:52] } : _003_;
  assign sum_sticky_bits = sum_shifted[76] ? sum_shifted[51:1] : _009_;
  assign final_exponent = sum_shifted[76] ? _027_[9:0] : _002_;
  assign _005_ = _048_ ? _024_[9:0] : 10'h000;
  assign _004_ = _048_ ? _025_[6:0] : _026_[6:0];
  assign normalized_exponent = _053_ ? _005_ : mid_pipe_tent_exp_q[9:0];
  assign norm_shamt = _053_ ? _004_ : mid_pipe_add_shamt_q[6:0];
  assign _001_ = _038_ ? _069_[6:0] : 7'h00;
  assign addend_shamt = _037_ ? 7'h4c : _001_;
  assign _019_ = info_c[4] ? { operand_c[31], 31'h7f800000 } : 32'd2143289344;
  assign _018_ = _051_ ? { tentative_sign, 31'h7f800000 } : _019_;
  assign _017_ = _044_ ? 1'h1 : 1'h0;
  assign _016_ = _044_ ? 32'd2143289344 : _018_;
  assign _014_ = any_operand_inf ? _017_ : 1'h0;
  assign _013_ = any_operand_inf ? _016_ : 32'd2143289344;
  assign _012_ = any_operand_inf ? 1'h1 : 1'h0;
  assign _008_ = any_operand_nan ? signalling_nan : _014_;
  assign _006_ = any_operand_nan ? 1'h1 : _012_;
  assign _007_ = any_operand_nan ? 32'd2143289344 : _013_;
  assign mid_pipe_spec_stat_q[9] = _050_ ? 1'h1 : _008_;
  assign result_is_special = _050_ ? 1'h1 : _006_;
  assign special_result = _050_ ? 32'd2143289344 : _007_;
  function [0:0] _176_;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _176_ = b[0:0];
      3'b?1?:
        _176_ = b[1:1];
      3'b1??:
        _176_ = b[2:2];
      default:
        _176_ = a;
    endcase
  endfunction
  assign operand_a[31] = _176_(1'h1, { _055_, 1'h0, operands_i[31] }, { _064_, _063_, _029_ });
  function [30:0] _177_;
    input [30:0] a;
    input [61:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _177_ = b[30:0];
      2'b1?:
        _177_ = b[61:31];
      default:
        _177_ = a;
    endcase
  endfunction
  assign { exponent_a[7:0], mantissa_a[22:0] } = _177_(31'h00800001, { 31'h3f800000, operands_i[30:0] }, { _063_, _031_ });
  assign info_b = _032_ ? info_q[15:8] : 8'hff;
  function [7:0] _179_;
    input [7:0] a;
    input [15:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _179_ = b[7:0];
      2'b1?:
        _179_ = b[15:8];
      default:
        _179_ = a;
    endcase
  endfunction
  assign info_a = _179_(8'hff, { 8'h81, info_q[7:0] }, { _063_, _031_ });
  function [31:0] _180_;
    input [31:0] a;
    input [63:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _180_ = b[31:0];
      2'b1?:
        _180_ = b[63:32];
      default:
        _180_ = a;
    endcase
  endfunction
  assign operand_c = _180_(32'd2155872257, { _077_, operands_i[94:64], 32'h80000000 }, { _030_, _062_ });
  assign operand_b = _032_ ? operands_i[63:32] : 32'd2155872257;
  function [7:0] _182_;
    input [7:0] a;
    input [15:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _182_ = b[7:0];
      2'b1?:
        _182_ = b[15:8];
      default:
        _182_ = a;
    endcase
  endfunction
  assign info_c = _182_(8'hff, { info_q[23:16], 8'h21 }, { _030_, _062_ });
  assign _062_ = op_i == 4'h3;
  assign _063_ = op_i == 4'h2;
  assign _064_ = op_i == 4'h1;
  assign _065_ = ! op_i;
  assign any_operand_inf = | { info_c[4], info_b[4], info_a[4] };
  assign any_operand_nan = | { info_c[3], info_b[3], info_a[3] };
  assign signalling_nan = | { info_c[2], info_b[2], info_a[2] };
  assign sticky_before_add = | addend_sticky_bits;
  assign _066_ = | sum_sticky_bits;
  assign _067_ = | round_sticky_bits;
  assign busy_o = | { mid_pipe_valid_q[1], in_valid_i };
  assign sum_shifted = mid_pipe_sum_q[75:0] << norm_shamt;
  assign { addend_after_shift, addend_sticky_bits } = { info_c[7], operand_c[22:0], 76'h0000000000000000000 } >> addend_shamt;
  assign _068_ = _022_ - 32'd127;
  assign exponent_difference = $signed(exponent_addend) - $signed(exponent_product);
  assign _069_ = $signed(32'd27) - $signed(exponent_difference);
  assign _070_ = $signed(mid_pipe_exp_prod_q[9:0]) - $signed({ 1'h0, leading_zero_count });
  assign _071_ = $signed(normalized_exponent) - $signed(32'd1);
  assign { _072_[31:10], exponent_product } = _052_ ? 32'd4294967171 : _068_;
  assign sv2v_tmp_B4C85 = _035_ ? exponent_addend : exponent_product;
  assign addend_shifted = effective_subtraction ? _057_ : addend_after_shift;
  assign { _073_[76], mid_pipe_sum_q[151:76] } = _045_ ? _054_ : sum_raw;
  assign _074_ = effective_subtraction ? 1'h0 : tentative_sign;
  assign final_sign = _046_ ? 1'h1 : _074_;
  assign _075_ = in_ready_o ? in_valid_i : 1'hx;
  assign _000_ = flush_i ? 1'h0 : _075_;
  assign { _076_[31:8], pre_round_abs[30:23] } = of_before_round ? 32'd254 : { 24'h000000, final_exponent[7:0] };
  assign pre_round_mantissa = of_before_round ? 23'h7fffff : final_mantissa[23:1];
  assign round_sticky_bits = of_before_round ? 2'h3 : { final_mantissa[0], sticky_after_norm };
  assign result_o = mid_pipe_res_is_spec_q[1] ? mid_pipe_spec_res_q[31:0] : { rounded_sign, rounded_abs };
  assign status_o = mid_pipe_res_is_spec_q[1] ? { mid_pipe_spec_stat_q[4], 4'h0 } : { 2'h0, regular_status[2:0] };
  assign _077_ = operands_i[95] ^ op_mod_i;
  assign effective_subtraction = tentative_sign ^ operand_c[31];
  assign tentative_sign = operand_a[31] ^ operand_b[31];
  \$paramod$aa198a329ffc044f9fef695fda54759a05728371\fpnew_classifier  i_class_inputs (
    .info_o(info_q),
    .is_boxed_i(is_boxed_i),
    .operands_i(operands_i)
  );
  \$paramod\fpnew_rounding\AbsWidth=32'00000000000000000000000000011111  i_fpnew_rounding (
    .abs_rounded_o(rounded_abs),
    .abs_value_i({ pre_round_abs[30:23], pre_round_mantissa }),
    .effective_subtraction_i(mid_pipe_eff_sub_q[1]),
    .exact_zero_o(result_zero),
    .rnd_mode_i(mid_pipe_rnd_mode_q[2:0]),
    .round_sticky_bits_i(round_sticky_bits),
    .sign_i(mid_pipe_final_sign_q[1]),
    .sign_o(rounded_sign)
  );
  \$paramod$3dc9b54c1a715af223bba72fd88f9cd46ba20ed0\lzc  i_lzc (
    .cnt_o(leading_zero_count),
    .empty_o(lzc_zeroes),
    .in_i(mid_pipe_sum_q[50:0])
  );
  assign _072_[9:0] = exponent_product;
  assign _073_[75:0] = mid_pipe_sum_q[151:76];
  assign _076_[7:0] = pre_round_abs[30:23];
  assign addend_shamt_q = mid_pipe_add_shamt_q[6:0];
  assign aux_o = mid_pipe_aux_q[1];
  assign effective_subtraction_q = mid_pipe_eff_sub_q[1];
  assign exponent_a[9:8] = 2'h0;
  assign exponent_b = { 2'h0, operand_b[30:23] };
  assign exponent_c = { 2'h0, operand_c[30:23] };
  assign exponent_difference_q = mid_pipe_exp_diff_q[9:0];
  assign exponent_product_q = mid_pipe_exp_prod_q[9:0];
  assign extension_bit_o = 1'h1;
  assign final_sign_q = mid_pipe_final_sign_q[1];
  assign inp_pipe_aux_q = aux_i;
  assign inp_pipe_is_boxed_q = is_boxed_i;
  assign inp_pipe_op_mod_q = op_mod_i;
  assign inp_pipe_op_q = op_i;
  assign inp_pipe_operands_q = operands_i;
  assign inp_pipe_ready = in_ready_o;
  assign inp_pipe_rnd_mode_q = rnd_mode_i;
  assign inp_pipe_tag_q = tag_i;
  assign inp_pipe_valid_q = in_valid_i;
  assign leading_zero_count_sgn = { 1'h0, leading_zero_count };
  assign mantissa_a[23] = info_a[7];
  assign mantissa_b = { info_b[7], operand_b[22:0] };
  assign mantissa_c = { info_c[7], operand_c[22:0] };
  assign mid_pipe_add_shamt_q[13:7] = addend_shamt;
  assign mid_pipe_aux_q[0] = aux_i;
  assign mid_pipe_eff_sub_q[0] = effective_subtraction;
  assign mid_pipe_exp_diff_q[19:10] = exponent_difference;
  assign mid_pipe_exp_prod_q[19:10] = exponent_product;
  assign mid_pipe_final_sign_q[0] = final_sign;
  assign mid_pipe_ready = { in_ready_o, out_ready_i };
  assign mid_pipe_res_is_spec_q[0] = result_is_special;
  assign mid_pipe_rnd_mode_q[5:3] = rnd_mode_i;
  assign mid_pipe_spec_res_q[63:32] = special_result;
  assign { mid_pipe_spec_stat_q[8:5], mid_pipe_spec_stat_q[3:0] } = 8'h00;
  assign mid_pipe_sticky_q[0] = sticky_before_add;
  assign mid_pipe_tag_q[3:2] = tag_i;
  assign mid_pipe_tent_exp_q[19:10] = sv2v_tmp_B4C85;
  assign mid_pipe_valid_q[0] = in_valid_i;
  assign operand_a[30:0] = { exponent_a[7:0], mantissa_a[22:0] };
  assign out_pipe_aux_q = mid_pipe_aux_q[1];
  assign out_pipe_ready = out_ready_i;
  assign out_pipe_result_q = result_o;
  assign out_pipe_status_q = status_o;
  assign out_pipe_tag_q = mid_pipe_tag_q[1:0];
  assign out_pipe_valid_q = mid_pipe_valid_q[1];
  assign out_valid_o = mid_pipe_valid_q[1];
  assign pre_round_abs[22:0] = pre_round_mantissa;
  assign pre_round_exponent = pre_round_abs[30:23];
  assign pre_round_sign = mid_pipe_final_sign_q[1];
  assign product_shifted = { 26'h0000000, product, 2'h0 };
  assign regular_result = { rounded_sign, rounded_abs };
  assign regular_status[4:3] = 2'h0;
  assign result_d = result_o;
  assign result_is_special_q = mid_pipe_res_is_spec_q[1];
  assign rnd_mode_q = mid_pipe_rnd_mode_q[2:0];
  assign special_result_q = mid_pipe_spec_res_q[31:0];
  assign special_status = { mid_pipe_spec_stat_q[9], 4'h0 };
  assign special_status_q = { mid_pipe_spec_stat_q[4], 4'h0 };
  assign status_d = status_o;
  assign sticky_before_add_q = mid_pipe_sticky_q[1];
  assign sum = mid_pipe_sum_q[151:76];
  assign sum_carry = sum_raw[76];
  assign sum_lower = mid_pipe_sum_q[50:0];
  assign sum_q = mid_pipe_sum_q[75:0];
  assign sv2v_tmp_00793 = exponent_difference;
  assign sv2v_tmp_0252C = result_o;
  assign sv2v_tmp_192AB = mid_pipe_tag_q[1:0];
  assign sv2v_tmp_25EE6 = mid_pipe_valid_q[1];
  assign sv2v_tmp_2A843 = status_o;
  assign sv2v_tmp_2D21E = exponent_product;
  assign sv2v_tmp_36387 = tag_i;
  assign sv2v_tmp_4A83E = special_result;
  assign sv2v_tmp_56A72 = effective_subtraction;
  assign sv2v_tmp_6DFE4 = tag_i;
  assign sv2v_tmp_6F5F7 = sticky_before_add;
  assign sv2v_tmp_73AEA = in_valid_i;
  assign sv2v_tmp_7DEC5 = result_is_special;
  assign sv2v_tmp_83404 = addend_shamt;
  assign sv2v_tmp_8D189 = aux_i;
  assign sv2v_tmp_9E262 = mid_pipe_aux_q[1];
  assign sv2v_tmp_A74E2 = rnd_mode_i;
  assign sv2v_tmp_BC8B9 = operands_i;
  assign sv2v_tmp_CB10A = in_valid_i;
  assign sv2v_tmp_CBA8F = op_i;
  assign sv2v_tmp_CDA0E = aux_i;
  assign sv2v_tmp_CEAB3 = mid_pipe_sum_q[151:76];
  assign sv2v_tmp_D1C37 = op_mod_i;
  assign sv2v_tmp_D7BD0 = final_sign;
  assign sv2v_tmp_E1339 = rnd_mode_i;
  assign sv2v_tmp_EC01B = { mid_pipe_spec_stat_q[9], 4'h0 };
  assign sv2v_tmp_FE389 = is_boxed_i;
  assign tag_o = mid_pipe_tag_q[1:0];
  assign tentative_exponent = sv2v_tmp_B4C85;
  assign tentative_exponent_q = mid_pipe_tent_exp_q[9:0];
endmodule

module \$paramod$e29e543669871b34681ea2ce24e8ecb683df94c9\fpnew_noncomp_8EF6A_8033C (clk_i, rst_ni, operands_i, is_boxed_i, rnd_mode_i, op_i, op_mod_i, tag_i, aux_i, in_valid_i, in_ready_o, flush_i, result_o, status_o, extension_bit_o, class_mask_o, is_class_o, tag_o, aux_o, out_valid_o, out_ready_i
, busy_o);
  wire _000_;
  wire [31:0] _001_;
  wire [9:0] _002_;
  wire [31:0] _003_;
  wire _004_;
  wire [31:0] _005_;
  wire [9:0] _006_;
  wire [31:0] _007_;
  wire _008_;
  wire [31:0] _009_;
  wire [9:0] _010_;
  wire [31:0] _011_;
  wire [31:0] _012_;
  wire [9:0] _013_;
  wire [31:0] _014_;
  wire [31:0] _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire [31:0] _028_;
  wire [31:0] _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire [31:0] _038_;
  wire [31:0] _039_;
  wire [9:0] _040_;
  wire [9:0] _041_;
  wire [9:0] _042_;
  wire [9:0] _043_;
  wire [9:0] _044_;
  wire _045_;
  wire [31:0] _046_;
  wire [31:0] _047_;
  wire [31:0] _048_;
  wire any_operand_nan;
  input aux_i;
  wire aux_i;
  output aux_o;
  wire aux_o;
  output busy_o;
  wire busy_o;
  wire class_extension_bit;
  wire [9:0] class_mask_d;
  output [9:0] class_mask_o;
  wire [9:0] class_mask_o;
  wire [4:0] class_status;
  input clk_i;
  wire clk_i;
  wire cmp_extension_bit;
  wire [31:0] cmp_result;
  wire [4:0] cmp_status;
  wire extension_bit_d;
  output extension_bit_o;
  wire extension_bit_o;
  input flush_i;
  wire flush_i;
  wire \gen_input_pipeline[0].reg_ena ;
  output in_ready_o;
  wire in_ready_o;
  input in_valid_i;
  wire in_valid_i;
  wire [7:0] info_a;
  wire [7:0] info_b;
  wire [15:0] info_q;
  wire [0:1] inp_pipe_aux_q;
  wire [3:0] inp_pipe_is_boxed_q;
  wire [0:1] inp_pipe_op_mod_q;
  wire [7:0] inp_pipe_op_q;
  wire [127:0] inp_pipe_operands_q;
  wire [0:1] inp_pipe_ready;
  wire [5:0] inp_pipe_rnd_mode_q;
  wire [3:0] inp_pipe_tag_q;
  wire [0:1] inp_pipe_valid_q;
  input [1:0] is_boxed_i;
  wire [1:0] is_boxed_i;
  wire is_class_d;
  output is_class_o;
  wire is_class_o;
  wire minmax_extension_bit;
  wire [31:0] minmax_result;
  wire [4:0] minmax_status;
  input [3:0] op_i;
  wire [3:0] op_i;
  input op_mod_i;
  wire op_mod_i;
  wire [31:0] operand_a;
  wire operand_a_smaller;
  wire [31:0] operand_b;
  wire operands_equal;
  input [63:0] operands_i;
  wire [63:0] operands_i;
  wire out_pipe_aux_q;
  wire [9:0] out_pipe_class_mask_q;
  wire out_pipe_extension_bit_q;
  wire out_pipe_is_class_q;
  wire out_pipe_ready;
  wire [31:0] out_pipe_result_q;
  wire [4:0] out_pipe_status_q;
  wire [1:0] out_pipe_tag_q;
  wire out_pipe_valid_q;
  input out_ready_i;
  wire out_ready_i;
  output out_valid_o;
  wire out_valid_o;
  wire [31:0] result_d;
  output [31:0] result_o;
  wire [31:0] result_o;
  input [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_i;
  input rst_ni;
  wire rst_ni;
  wire sgnj_extension_bit;
  wire [31:0] sgnj_result;
  wire [4:0] sgnj_status;
  wire \sign_injections.sign_a ;
  wire \sign_injections.sign_b ;
  wire signalling_nan;
  wire [4:0] status_d;
  output [4:0] status_o;
  wire [4:0] status_o;
  wire [32:1] sv2v_tmp_07494;
  wire [4:1] sv2v_tmp_0B797;
  wire sv2v_tmp_2CB8C;
  wire [2:1] sv2v_tmp_488B7;
  wire [3:1] sv2v_tmp_62109;
  wire sv2v_tmp_73AEA;
  wire sv2v_tmp_7DF01;
  wire [2:1] sv2v_tmp_86D63;
  wire sv2v_tmp_8D189;
  wire sv2v_tmp_8E9A9;
  wire [2:1] sv2v_tmp_93CB4;
  wire [10:1] sv2v_tmp_94259;
  wire [5:1] sv2v_tmp_CCE43;
  wire [64:1] sv2v_tmp_D1067;
  wire sv2v_tmp_D1C37;
  wire sv2v_tmp_FA930;
  input [1:0] tag_i;
  wire [1:0] tag_i;
  output [1:0] tag_o;
  wire [1:0] tag_o;
  assign \gen_input_pipeline[0].reg_ena  = in_ready_o & in_valid_i;
  assign \sign_injections.sign_a  = inp_pipe_operands_q[31] & info_q[0];
  assign \sign_injections.sign_b  = inp_pipe_operands_q[63] & info_q[8];
  assign _015_ = operand_a_smaller & _028_;
  reg [3:0] _053_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _053_ <= 4'h0;
    else if (\gen_input_pipeline[0].reg_ena ) _053_ <= op_i;
  assign inp_pipe_op_q[3:0] = _053_;
  reg \inp_pipe_valid_q_reg[0] ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \inp_pipe_valid_q_reg[0]  <= 1'h0;
    else if (_016_) \inp_pipe_valid_q_reg[0]  <= _000_;
  assign inp_pipe_valid_q[1] = \inp_pipe_valid_q_reg[0] ;
  reg [2:0] _055_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _055_ <= 3'h0;
    else if (\gen_input_pipeline[0].reg_ena ) _055_ <= rnd_mode_i;
  assign inp_pipe_rnd_mode_q[2:0] = _055_;
  reg [1:0] _056_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _056_ <= 2'h0;
    else if (\gen_input_pipeline[0].reg_ena ) _056_ <= is_boxed_i;
  assign inp_pipe_is_boxed_q[1:0] = _056_;
  reg \inp_pipe_aux_q_reg[0] ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \inp_pipe_aux_q_reg[0]  <= 1'h0;
    else if (\gen_input_pipeline[0].reg_ena ) \inp_pipe_aux_q_reg[0]  <= aux_i;
  assign inp_pipe_aux_q[1] = \inp_pipe_aux_q_reg[0] ;
  reg [1:0] _058_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _058_ <= 2'h0;
    else if (\gen_input_pipeline[0].reg_ena ) _058_ <= tag_i;
  assign inp_pipe_tag_q[1:0] = _058_;
  reg \inp_pipe_op_mod_q_reg[0] ;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) \inp_pipe_op_mod_q_reg[0]  <= 1'h0;
    else if (\gen_input_pipeline[0].reg_ena ) \inp_pipe_op_mod_q_reg[0]  <= op_mod_i;
  assign inp_pipe_op_mod_q[1] = \inp_pipe_op_mod_q_reg[0] ;
  reg [63:0] _060_;
  always @(posedge clk_i, negedge rst_ni)
    if (!rst_ni) _060_ <= 64'h0000000000000000;
    else if (\gen_input_pipeline[0].reg_ena ) _060_ <= operands_i;
  assign inp_pipe_operands_q[63:0] = _060_;
  assign _016_ = | { in_ready_o, flush_i };
  assign _017_ = | { _035_, _034_, _033_ };
  assign _018_ = | { _031_, is_class_o };
  assign _019_ = | { _030_, is_class_o };
  assign _020_ = | { _035_, _034_ };
  assign _021_ = inp_pipe_operands_q[31:0] == inp_pipe_operands_q[63:32];
  assign _022_ = info_q[5] && info_q[13];
  assign _023_ = info_q[3] && info_q[11];
  assign operands_equal = _021_ || _022_;
  assign _024_ = inp_pipe_operands_q[31] || inp_pipe_operands_q[63];
  assign _025_ = inp_pipe_operands_q[31:0] < inp_pipe_operands_q[63:32];
  assign _026_ = ~ inp_pipe_valid_q[1];
  assign _027_ = ~ \sign_injections.sign_b ;
  assign _028_ = ~ { 31'h00000000, operands_equal };
  assign in_ready_o = out_ready_i | _026_;
  assign _029_ = operand_a_smaller | operands_equal;
  function [0:0] _077_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _077_ = b[0:0];
      2'b1?:
        _077_ = b[1:1];
      default:
        _077_ = a;
    endcase
  endfunction
  assign extension_bit_o = _077_(1'h1, { sgnj_extension_bit, 1'h0 }, { _031_, _019_ });
  function [4:0] _078_;
    input [4:0] a;
    input [14:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _078_ = b[4:0];
      3'b?1?:
        _078_ = b[9:5];
      3'b1??:
        _078_ = b[14:10];
      default:
        _078_ = a;
    endcase
  endfunction
  assign status_o = _078_(5'h1f, { signalling_nan, 4'h0, cmp_status[4], 9'h000 }, { _032_, _030_, _018_ });
  assign is_class_o = inp_pipe_op_q[3:0] == 4'h9;
  function [31:0] _080_;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _080_ = b[31:0];
      3'b?1?:
        _080_ = b[63:32];
      3'b1??:
        _080_ = b[95:64];
      default:
        _080_ = a;
    endcase
  endfunction
  assign result_o = _080_(32'd2155872257, { sgnj_result, minmax_result, cmp_result }, { _031_, _032_, _030_ });
  assign _030_ = inp_pipe_op_q[3:0] == 4'h8;
  assign _032_ = inp_pipe_op_q[3:0] == 4'h7;
  assign _031_ = inp_pipe_op_q[3:0] == 4'h6;
  assign _013_ = info_q[3] ? _044_ : 10'h200;
  assign _010_ = info_q[4] ? _043_ : _013_;
  assign _006_ = info_q[5] ? _042_ : _010_;
  assign _002_ = info_q[6] ? _041_ : _006_;
  assign class_mask_o = info_q[7] ? _040_ : _002_;
  assign _014_ = any_operand_nan ? { 31'h00000000, inp_pipe_op_mod_q[1] } : _048_;
  assign _011_ = any_operand_nan ? 32'd0 : _047_;
  assign _008_ = any_operand_nan ? 1'h1 : 1'h0;
  assign _007_ = any_operand_nan ? 32'd0 : _046_;
  assign _004_ = _020_ ? _008_ : 1'h0;
  function [31:0] _094_;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _094_ = b[31:0];
      3'b?1?:
        _094_ = b[63:32];
      3'b1??:
        _094_ = b[95:64];
      default:
        _094_ = a;
    endcase
  endfunction
  assign _003_ = _094_(32'd2155872257, { _007_, _011_, _014_ }, { _035_, _034_, _033_ });
  assign cmp_status[4] = signalling_nan ? 1'h1 : _004_;
  assign cmp_result = signalling_nan ? 32'd0 : _003_;
  function [31:0] _097_;
    input [31:0] a;
    input [63:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _097_ = b[31:0];
      2'b1?:
        _097_ = b[63:32];
      default:
        _097_ = a;
    endcase
  endfunction
  assign _012_ = _097_(32'd2155872257, { _038_, _039_ }, { _035_, _034_ });
  assign _009_ = info_q[11] ? inp_pipe_operands_q[31:0] : _012_;
  assign _005_ = info_q[3] ? inp_pipe_operands_q[63:32] : _009_;
  assign minmax_result = _023_ ? 32'd2143289344 : _005_;
  function [0:0] _101_;
    input [0:0] a;
    input [3:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _101_ = b[0:0];
      4'b??1?:
        _101_ = b[1:1];
      4'b?1??:
        _101_ = b[2:2];
      4'b1???:
        _101_ = b[3:3];
      default:
        _101_ = a;
    endcase
  endfunction
  assign sgnj_result[31] = _101_(1'h1, { \sign_injections.sign_b , _027_, _045_, inp_pipe_operands_q[31] }, { _035_, _034_, _033_, _036_ });
  function [30:0] _102_;
    input [30:0] a;
    input [61:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _102_ = b[30:0];
      2'b1?:
        _102_ = b[61:31];
      default:
        _102_ = a;
    endcase
  endfunction
  assign sgnj_result[30:0] = _102_(31'h00800001, { _001_[30:0], inp_pipe_operands_q[30:0] }, { _017_, _036_ });
  assign _036_ = inp_pipe_rnd_mode_q[2:0] == 3'h3;
  assign _033_ = inp_pipe_rnd_mode_q[2:0] == 3'h2;
  assign _034_ = inp_pipe_rnd_mode_q[2:0] == 3'h1;
  assign _035_ = ! inp_pipe_rnd_mode_q[2:0];
  assign _001_ = info_q[0] ? inp_pipe_operands_q[31:0] : 32'd2143289344;
  assign any_operand_nan = | { info_q[11], info_q[3] };
  assign signalling_nan = | { info_q[10], info_q[2] };
  assign busy_o = | { inp_pipe_valid_q[1], in_valid_i };
  assign _037_ = in_ready_o ? in_valid_i : 1'hx;
  assign _000_ = flush_i ? 1'h0 : _037_;
  assign sgnj_extension_bit = inp_pipe_op_mod_q[1] ? sgnj_result[31] : 1'h1;
  assign _038_ = operand_a_smaller ? inp_pipe_operands_q[31:0] : inp_pipe_operands_q[63:32];
  assign _039_ = operand_a_smaller ? inp_pipe_operands_q[63:32] : inp_pipe_operands_q[31:0];
  assign _040_ = inp_pipe_operands_q[31] ? 10'h002 : 10'h040;
  assign _041_ = inp_pipe_operands_q[31] ? 10'h004 : 10'h020;
  assign _042_ = inp_pipe_operands_q[31] ? 10'h008 : 10'h010;
  assign _043_ = inp_pipe_operands_q[31] ? 10'h001 : 10'h080;
  assign _044_ = info_q[2] ? 10'h100 : 10'h200;
  assign operand_a_smaller = _025_ ^ _024_;
  assign _045_ = \sign_injections.sign_a  ^ \sign_injections.sign_b ;
  assign _046_ = _029_ ^ inp_pipe_op_mod_q[1];
  assign _047_ = _015_ ^ inp_pipe_op_mod_q[1];
  assign _048_ = operands_equal ^ inp_pipe_op_mod_q[1];
  \$paramod$85706ecd625e0110cf3fb9a4d880c019350a6cdb\fpnew_classifier  i_class_a (
    .info_o(info_q),
    .is_boxed_i(inp_pipe_is_boxed_q[1:0]),
    .operands_i(inp_pipe_operands_q[63:0])
  );
  assign aux_o = inp_pipe_aux_q[1];
  assign class_extension_bit = 1'h0;
  assign class_mask_d = class_mask_o;
  assign class_status = 5'h00;
  assign cmp_extension_bit = 1'h0;
  assign cmp_status[3:0] = 4'h0;
  assign extension_bit_d = extension_bit_o;
  assign info_a = info_q[7:0];
  assign info_b = info_q[15:8];
  assign inp_pipe_aux_q[0] = aux_i;
  assign inp_pipe_is_boxed_q[3:2] = is_boxed_i;
  assign inp_pipe_op_mod_q[0] = op_mod_i;
  assign inp_pipe_op_q[7:4] = op_i;
  assign inp_pipe_operands_q[127:64] = operands_i;
  assign inp_pipe_ready = { in_ready_o, out_ready_i };
  assign inp_pipe_rnd_mode_q[5:3] = rnd_mode_i;
  assign inp_pipe_tag_q[3:2] = tag_i;
  assign inp_pipe_valid_q[0] = in_valid_i;
  assign is_class_d = is_class_o;
  assign minmax_extension_bit = 1'h1;
  assign minmax_status = { signalling_nan, 4'h0 };
  assign operand_a = inp_pipe_operands_q[31:0];
  assign operand_b = inp_pipe_operands_q[63:32];
  assign out_pipe_aux_q = inp_pipe_aux_q[1];
  assign out_pipe_class_mask_q = class_mask_o;
  assign out_pipe_extension_bit_q = extension_bit_o;
  assign out_pipe_is_class_q = is_class_o;
  assign out_pipe_ready = out_ready_i;
  assign out_pipe_result_q = result_o;
  assign out_pipe_status_q = status_o;
  assign out_pipe_tag_q = inp_pipe_tag_q[1:0];
  assign out_pipe_valid_q = inp_pipe_valid_q[1];
  assign out_valid_o = inp_pipe_valid_q[1];
  assign result_d = result_o;
  assign sgnj_status = 5'h00;
  assign status_d = status_o;
  assign sv2v_tmp_07494 = result_o;
  assign sv2v_tmp_0B797 = op_i;
  assign sv2v_tmp_2CB8C = inp_pipe_valid_q[1];
  assign sv2v_tmp_488B7 = tag_i;
  assign sv2v_tmp_62109 = rnd_mode_i;
  assign sv2v_tmp_73AEA = in_valid_i;
  assign sv2v_tmp_7DF01 = is_class_o;
  assign sv2v_tmp_86D63 = is_boxed_i;
  assign sv2v_tmp_8D189 = aux_i;
  assign sv2v_tmp_8E9A9 = extension_bit_o;
  assign sv2v_tmp_93CB4 = inp_pipe_tag_q[1:0];
  assign sv2v_tmp_94259 = class_mask_o;
  assign sv2v_tmp_CCE43 = status_o;
  assign sv2v_tmp_D1067 = operands_i;
  assign sv2v_tmp_D1C37 = op_mod_i;
  assign sv2v_tmp_FA930 = inp_pipe_aux_q[1];
  assign tag_o = inp_pipe_tag_q[1:0];
endmodule

module \$paramod$f63662f9b52d30dc01537496e32d795d2895a3c6\lzc (in_i, cnt_o, empty_o);
  output [5:0] cnt_o;
  wire [5:0] cnt_o;
  output empty_o;
  wire empty_o;
  wire [31:0] \gen_lzc.flip_vector.sv2v_autoblock_1.i ;
  wire [52:0] \gen_lzc.in_tmp ;
  wire [317:0] \gen_lzc.index_lut ;
  wire [383:0] \gen_lzc.index_nodes ;
  wire [63:0] \gen_lzc.sel_nodes ;
  input [52:0] in_i;
  wire [52:0] in_i;
  assign empty_o = ~ \gen_lzc.sel_nodes [0];
  assign \gen_lzc.sel_nodes [31] = in_i[52] | in_i[51];
  assign \gen_lzc.sel_nodes [32] = in_i[50] | in_i[49];
  assign \gen_lzc.sel_nodes [33] = in_i[48] | in_i[47];
  assign \gen_lzc.sel_nodes [34] = in_i[46] | in_i[45];
  assign \gen_lzc.sel_nodes [35] = in_i[44] | in_i[43];
  assign \gen_lzc.sel_nodes [36] = in_i[42] | in_i[41];
  assign \gen_lzc.sel_nodes [37] = in_i[40] | in_i[39];
  assign \gen_lzc.sel_nodes [38] = in_i[38] | in_i[37];
  assign \gen_lzc.sel_nodes [39] = in_i[36] | in_i[35];
  assign \gen_lzc.sel_nodes [40] = in_i[34] | in_i[33];
  assign \gen_lzc.sel_nodes [41] = in_i[32] | in_i[31];
  assign \gen_lzc.sel_nodes [42] = in_i[30] | in_i[29];
  assign \gen_lzc.sel_nodes [43] = in_i[28] | in_i[27];
  assign \gen_lzc.sel_nodes [44] = in_i[26] | in_i[25];
  assign \gen_lzc.sel_nodes [45] = in_i[24] | in_i[23];
  assign \gen_lzc.sel_nodes [46] = in_i[22] | in_i[21];
  assign \gen_lzc.sel_nodes [47] = in_i[20] | in_i[19];
  assign \gen_lzc.sel_nodes [48] = in_i[18] | in_i[17];
  assign \gen_lzc.sel_nodes [49] = in_i[16] | in_i[15];
  assign \gen_lzc.sel_nodes [50] = in_i[14] | in_i[13];
  assign \gen_lzc.sel_nodes [51] = in_i[12] | in_i[11];
  assign \gen_lzc.sel_nodes [52] = in_i[10] | in_i[9];
  assign \gen_lzc.sel_nodes [53] = in_i[8] | in_i[7];
  assign \gen_lzc.sel_nodes [54] = in_i[6] | in_i[5];
  assign \gen_lzc.sel_nodes [55] = in_i[4] | in_i[3];
  assign \gen_lzc.sel_nodes [56] = in_i[2] | in_i[1];
  assign \gen_lzc.sel_nodes [0] = \gen_lzc.sel_nodes [1] | \gen_lzc.sel_nodes [2];
  assign \gen_lzc.sel_nodes [1] = \gen_lzc.sel_nodes [3] | \gen_lzc.sel_nodes [4];
  assign \gen_lzc.sel_nodes [2] = \gen_lzc.sel_nodes [5] | \gen_lzc.sel_nodes [6];
  assign \gen_lzc.sel_nodes [3] = \gen_lzc.sel_nodes [7] | \gen_lzc.sel_nodes [8];
  assign \gen_lzc.sel_nodes [4] = \gen_lzc.sel_nodes [9] | \gen_lzc.sel_nodes [10];
  assign \gen_lzc.sel_nodes [5] = \gen_lzc.sel_nodes [11] | \gen_lzc.sel_nodes [12];
  assign \gen_lzc.sel_nodes [7] = \gen_lzc.sel_nodes [15] | \gen_lzc.sel_nodes [16];
  assign \gen_lzc.sel_nodes [8] = \gen_lzc.sel_nodes [17] | \gen_lzc.sel_nodes [18];
  assign \gen_lzc.sel_nodes [9] = \gen_lzc.sel_nodes [19] | \gen_lzc.sel_nodes [20];
  assign \gen_lzc.sel_nodes [10] = \gen_lzc.sel_nodes [21] | \gen_lzc.sel_nodes [22];
  assign \gen_lzc.sel_nodes [11] = \gen_lzc.sel_nodes [23] | \gen_lzc.sel_nodes [24];
  assign \gen_lzc.sel_nodes [12] = \gen_lzc.sel_nodes [25] | \gen_lzc.sel_nodes [26];
  assign \gen_lzc.sel_nodes [6] = \gen_lzc.sel_nodes [27] | in_i[0];
  assign \gen_lzc.sel_nodes [15] = \gen_lzc.sel_nodes [31] | \gen_lzc.sel_nodes [32];
  assign \gen_lzc.sel_nodes [16] = \gen_lzc.sel_nodes [33] | \gen_lzc.sel_nodes [34];
  assign \gen_lzc.sel_nodes [17] = \gen_lzc.sel_nodes [35] | \gen_lzc.sel_nodes [36];
  assign \gen_lzc.sel_nodes [18] = \gen_lzc.sel_nodes [37] | \gen_lzc.sel_nodes [38];
  assign \gen_lzc.sel_nodes [19] = \gen_lzc.sel_nodes [39] | \gen_lzc.sel_nodes [40];
  assign \gen_lzc.sel_nodes [20] = \gen_lzc.sel_nodes [41] | \gen_lzc.sel_nodes [42];
  assign \gen_lzc.sel_nodes [21] = \gen_lzc.sel_nodes [43] | \gen_lzc.sel_nodes [44];
  assign \gen_lzc.sel_nodes [22] = \gen_lzc.sel_nodes [45] | \gen_lzc.sel_nodes [46];
  assign \gen_lzc.sel_nodes [23] = \gen_lzc.sel_nodes [47] | \gen_lzc.sel_nodes [48];
  assign \gen_lzc.sel_nodes [24] = \gen_lzc.sel_nodes [49] | \gen_lzc.sel_nodes [50];
  assign \gen_lzc.sel_nodes [25] = \gen_lzc.sel_nodes [51] | \gen_lzc.sel_nodes [52];
  assign \gen_lzc.sel_nodes [26] = \gen_lzc.sel_nodes [53] | \gen_lzc.sel_nodes [54];
  assign \gen_lzc.sel_nodes [27] = \gen_lzc.sel_nodes [55] | \gen_lzc.sel_nodes [56];
  assign \gen_lzc.index_nodes [191:186] = in_i[52] ? 6'h00 : 6'h01;
  assign \gen_lzc.index_nodes [197:192] = in_i[50] ? 6'h02 : 6'h03;
  assign \gen_lzc.index_nodes [203:198] = in_i[48] ? 6'h04 : 6'h05;
  assign \gen_lzc.index_nodes [209:204] = in_i[46] ? 6'h06 : 6'h07;
  assign \gen_lzc.index_nodes [215:210] = in_i[44] ? 6'h08 : 6'h09;
  assign \gen_lzc.index_nodes [221:216] = in_i[42] ? 6'h0a : 6'h0b;
  assign \gen_lzc.index_nodes [227:222] = in_i[40] ? 6'h0c : 6'h0d;
  assign \gen_lzc.index_nodes [233:228] = in_i[38] ? 6'h0e : 6'h0f;
  assign \gen_lzc.index_nodes [239:234] = in_i[36] ? 6'h10 : 6'h11;
  assign \gen_lzc.index_nodes [245:240] = in_i[34] ? 6'h12 : 6'h13;
  assign \gen_lzc.index_nodes [251:246] = in_i[32] ? 6'h14 : 6'h15;
  assign \gen_lzc.index_nodes [257:252] = in_i[30] ? 6'h16 : 6'h17;
  assign \gen_lzc.index_nodes [263:258] = in_i[28] ? 6'h18 : 6'h19;
  assign \gen_lzc.index_nodes [269:264] = in_i[26] ? 6'h1a : 6'h1b;
  assign \gen_lzc.index_nodes [275:270] = in_i[24] ? 6'h1c : 6'h1d;
  assign \gen_lzc.index_nodes [281:276] = in_i[22] ? 6'h1e : 6'h1f;
  assign \gen_lzc.index_nodes [287:282] = in_i[20] ? 6'h20 : 6'h21;
  assign \gen_lzc.index_nodes [293:288] = in_i[18] ? 6'h22 : 6'h23;
  assign \gen_lzc.index_nodes [299:294] = in_i[16] ? 6'h24 : 6'h25;
  assign \gen_lzc.index_nodes [305:300] = in_i[14] ? 6'h26 : 6'h27;
  assign \gen_lzc.index_nodes [311:306] = in_i[12] ? 6'h28 : 6'h29;
  assign \gen_lzc.index_nodes [317:312] = in_i[10] ? 6'h2a : 6'h2b;
  assign \gen_lzc.index_nodes [323:318] = in_i[8] ? 6'h2c : 6'h2d;
  assign \gen_lzc.index_nodes [329:324] = in_i[6] ? 6'h2e : 6'h2f;
  assign \gen_lzc.index_nodes [335:330] = in_i[4] ? 6'h30 : 6'h31;
  assign \gen_lzc.index_nodes [341:336] = in_i[2] ? 6'h32 : 6'h33;
  assign cnt_o = \gen_lzc.sel_nodes [1] ? \gen_lzc.index_nodes [11:6] : \gen_lzc.index_nodes [17:12];
  assign \gen_lzc.index_nodes [11:6] = \gen_lzc.sel_nodes [3] ? \gen_lzc.index_nodes [23:18] : \gen_lzc.index_nodes [29:24];
  assign \gen_lzc.index_nodes [17:12] = \gen_lzc.sel_nodes [5] ? \gen_lzc.index_nodes [35:30] : \gen_lzc.index_nodes [41:36];
  assign \gen_lzc.index_nodes [23:18] = \gen_lzc.sel_nodes [7] ? \gen_lzc.index_nodes [47:42] : \gen_lzc.index_nodes [53:48];
  assign \gen_lzc.index_nodes [29:24] = \gen_lzc.sel_nodes [9] ? \gen_lzc.index_nodes [59:54] : \gen_lzc.index_nodes [65:60];
  assign \gen_lzc.index_nodes [35:30] = \gen_lzc.sel_nodes [11] ? \gen_lzc.index_nodes [71:66] : \gen_lzc.index_nodes [77:72];
  assign \gen_lzc.index_nodes [41:36] = \gen_lzc.sel_nodes [6] ? \gen_lzc.index_nodes [83:78] : 6'h00;
  assign \gen_lzc.index_nodes [47:42] = \gen_lzc.sel_nodes [15] ? \gen_lzc.index_nodes [95:90] : \gen_lzc.index_nodes [101:96];
  assign \gen_lzc.index_nodes [53:48] = \gen_lzc.sel_nodes [17] ? \gen_lzc.index_nodes [107:102] : \gen_lzc.index_nodes [113:108];
  assign \gen_lzc.index_nodes [59:54] = \gen_lzc.sel_nodes [19] ? \gen_lzc.index_nodes [119:114] : \gen_lzc.index_nodes [125:120];
  assign \gen_lzc.index_nodes [65:60] = \gen_lzc.sel_nodes [21] ? \gen_lzc.index_nodes [131:126] : \gen_lzc.index_nodes [137:132];
  assign \gen_lzc.index_nodes [71:66] = \gen_lzc.sel_nodes [23] ? \gen_lzc.index_nodes [143:138] : \gen_lzc.index_nodes [149:144];
  assign \gen_lzc.index_nodes [77:72] = \gen_lzc.sel_nodes [25] ? \gen_lzc.index_nodes [155:150] : \gen_lzc.index_nodes [161:156];
  assign \gen_lzc.index_nodes [83:78] = \gen_lzc.sel_nodes [27] ? \gen_lzc.index_nodes [167:162] : \gen_lzc.index_nodes [173:168];
  assign \gen_lzc.index_nodes [95:90] = \gen_lzc.sel_nodes [31] ? \gen_lzc.index_nodes [191:186] : \gen_lzc.index_nodes [197:192];
  assign \gen_lzc.index_nodes [101:96] = \gen_lzc.sel_nodes [33] ? \gen_lzc.index_nodes [203:198] : \gen_lzc.index_nodes [209:204];
  assign \gen_lzc.index_nodes [107:102] = \gen_lzc.sel_nodes [35] ? \gen_lzc.index_nodes [215:210] : \gen_lzc.index_nodes [221:216];
  assign \gen_lzc.index_nodes [113:108] = \gen_lzc.sel_nodes [37] ? \gen_lzc.index_nodes [227:222] : \gen_lzc.index_nodes [233:228];
  assign \gen_lzc.index_nodes [119:114] = \gen_lzc.sel_nodes [39] ? \gen_lzc.index_nodes [239:234] : \gen_lzc.index_nodes [245:240];
  assign \gen_lzc.index_nodes [125:120] = \gen_lzc.sel_nodes [41] ? \gen_lzc.index_nodes [251:246] : \gen_lzc.index_nodes [257:252];
  assign \gen_lzc.index_nodes [131:126] = \gen_lzc.sel_nodes [43] ? \gen_lzc.index_nodes [263:258] : \gen_lzc.index_nodes [269:264];
  assign \gen_lzc.index_nodes [137:132] = \gen_lzc.sel_nodes [45] ? \gen_lzc.index_nodes [275:270] : \gen_lzc.index_nodes [281:276];
  assign \gen_lzc.index_nodes [143:138] = \gen_lzc.sel_nodes [47] ? \gen_lzc.index_nodes [287:282] : \gen_lzc.index_nodes [293:288];
  assign \gen_lzc.index_nodes [149:144] = \gen_lzc.sel_nodes [49] ? \gen_lzc.index_nodes [299:294] : \gen_lzc.index_nodes [305:300];
  assign \gen_lzc.index_nodes [155:150] = \gen_lzc.sel_nodes [51] ? \gen_lzc.index_nodes [311:306] : \gen_lzc.index_nodes [317:312];
  assign \gen_lzc.index_nodes [161:156] = \gen_lzc.sel_nodes [53] ? \gen_lzc.index_nodes [323:318] : \gen_lzc.index_nodes [329:324];
  assign \gen_lzc.index_nodes [167:162] = \gen_lzc.sel_nodes [55] ? \gen_lzc.index_nodes [335:330] : \gen_lzc.index_nodes [341:336];
  assign \gen_lzc.index_nodes [173:168] = in_i[0] ? 6'h34 : 6'h00;
  assign \gen_lzc.flip_vector.sv2v_autoblock_1.i  = 32'd53;
  assign \gen_lzc.in_tmp  = { in_i[0], in_i[1], in_i[2], in_i[3], in_i[4], in_i[5], in_i[6], in_i[7], in_i[8], in_i[9], in_i[10], in_i[11], in_i[12], in_i[13], in_i[14], in_i[15], in_i[16], in_i[17], in_i[18], in_i[19], in_i[20], in_i[21], in_i[22], in_i[23], in_i[24], in_i[25], in_i[26], in_i[27], in_i[28], in_i[29], in_i[30], in_i[31], in_i[32], in_i[33], in_i[34], in_i[35], in_i[36], in_i[37], in_i[38], in_i[39], in_i[40], in_i[41], in_i[42], in_i[43], in_i[44], in_i[45], in_i[46], in_i[47], in_i[48], in_i[49], in_i[50], in_i[51], in_i[52] };
  assign \gen_lzc.index_lut  = 318'h34cf2c70beeb6caeaa689e69648e28607de75c6da6585d65544d24503ce34c2ca2481c61440c2040;
  assign { \gen_lzc.index_nodes [377:342], \gen_lzc.index_nodes [185:174], \gen_lzc.index_nodes [89:84], \gen_lzc.index_nodes [5:0] } = { 54'h00000000d00000, cnt_o };
  assign { \gen_lzc.sel_nodes [62:57], \gen_lzc.sel_nodes [30:28], \gen_lzc.sel_nodes [14:13] } = { 5'h00, in_i[0], 2'h0, in_i[0], 1'h0, \gen_lzc.sel_nodes [6] };
endmodule

module \$paramod\fpnew_rounding\AbsWidth=32'00000000000000000000000000011111 (abs_value_i, sign_i, round_sticky_bits_i, rnd_mode_i, effective_subtraction_i, abs_rounded_o, sign_o, exact_zero_o);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire [1:0] _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  output [30:0] abs_rounded_o;
  wire [30:0] abs_rounded_o;
  input [30:0] abs_value_i;
  wire [30:0] abs_value_i;
  input effective_subtraction_i;
  wire effective_subtraction_i;
  output exact_zero_o;
  wire exact_zero_o;
  input [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_i;
  input [1:0] round_sticky_bits_i;
  wire [1:0] round_sticky_bits_i;
  wire round_up;
  input sign_i;
  wire sign_i;
  output sign_o;
  wire sign_o;
  assign abs_rounded_o = abs_value_i + round_up;
  assign _01_ = ! abs_value_i;
  assign exact_zero_o = _01_ && _02_;
  assign _04_ = exact_zero_o && effective_subtraction_i;
  assign _05_ = ~ sign_i;
  function [0:0] _22_;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _22_ = b[0:0];
      3'b?1?:
        _22_ = b[1:1];
      3'b1??:
        _22_ = b[2:2];
      default:
        _22_ = a;
    endcase
  endfunction
  assign _00_ = _22_(1'hx, { 1'h0, abs_value_i[0], 1'h1 }, { _09_, _07_, _06_ });
  assign _06_ = round_sticky_bits_i == 2'h3;
  assign _07_ = round_sticky_bits_i == 2'h2;
  assign _09_ = | { _08_[1], _02_ };
  assign _02_ = ! round_sticky_bits_i;
  assign _08_[1] = round_sticky_bits_i == 2'h1;
  function [0:0] _28_;
    input [0:0] a;
    input [4:0] b;
    input [4:0] s;
    casez (s) // synopsys parallel_case
      5'b????1:
        _28_ = b[0:0];
      5'b???1?:
        _28_ = b[1:1];
      5'b??1??:
        _28_ = b[2:2];
      5'b?1???:
        _28_ = b[3:3];
      5'b1????:
        _28_ = b[4:4];
      default:
        _28_ = a;
    endcase
  endfunction
  assign round_up = _28_(1'h1, { _00_, 1'h0, _15_, _16_, round_sticky_bits_i[1] }, { _10_, _13_, _03_, _12_, _11_ });
  assign _11_ = rnd_mode_i == 3'h4;
  assign _12_ = rnd_mode_i == 3'h3;
  assign _03_ = rnd_mode_i == 3'h2;
  assign _13_ = rnd_mode_i == 3'h1;
  assign _10_ = ! rnd_mode_i;
  assign _14_ = | round_sticky_bits_i;
  assign _15_ = _14_ ? sign_i : 1'h0;
  assign _16_ = _14_ ? _05_ : 1'h0;
  assign sign_o = _04_ ? _03_ : sign_i;
  assign _08_[0] = _02_;
endmodule

module \$paramod\fpnew_rounding\AbsWidth=32'00000000000000000000000000100000 (abs_value_i, sign_i, round_sticky_bits_i, rnd_mode_i, effective_subtraction_i, abs_rounded_o, sign_o, exact_zero_o);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire [1:0] _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  output [31:0] abs_rounded_o;
  wire [31:0] abs_rounded_o;
  input [31:0] abs_value_i;
  wire [31:0] abs_value_i;
  input effective_subtraction_i;
  wire effective_subtraction_i;
  output exact_zero_o;
  wire exact_zero_o;
  input [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_i;
  input [1:0] round_sticky_bits_i;
  wire [1:0] round_sticky_bits_i;
  wire round_up;
  input sign_i;
  wire sign_i;
  output sign_o;
  wire sign_o;
  assign abs_rounded_o = abs_value_i + round_up;
  assign _01_ = ! abs_value_i;
  assign exact_zero_o = _01_ && _02_;
  assign _04_ = exact_zero_o && effective_subtraction_i;
  assign _05_ = ~ sign_i;
  function [0:0] _22_;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _22_ = b[0:0];
      3'b?1?:
        _22_ = b[1:1];
      3'b1??:
        _22_ = b[2:2];
      default:
        _22_ = a;
    endcase
  endfunction
  assign _00_ = _22_(1'hx, { 1'h0, abs_value_i[0], 1'h1 }, { _09_, _07_, _06_ });
  assign _06_ = round_sticky_bits_i == 2'h3;
  assign _07_ = round_sticky_bits_i == 2'h2;
  assign _09_ = | { _08_[1], _02_ };
  assign _02_ = ! round_sticky_bits_i;
  assign _08_[1] = round_sticky_bits_i == 2'h1;
  function [0:0] _28_;
    input [0:0] a;
    input [4:0] b;
    input [4:0] s;
    casez (s) // synopsys parallel_case
      5'b????1:
        _28_ = b[0:0];
      5'b???1?:
        _28_ = b[1:1];
      5'b??1??:
        _28_ = b[2:2];
      5'b?1???:
        _28_ = b[3:3];
      5'b1????:
        _28_ = b[4:4];
      default:
        _28_ = a;
    endcase
  endfunction
  assign round_up = _28_(1'h1, { _00_, 1'h0, _15_, _16_, round_sticky_bits_i[1] }, { _10_, _13_, _03_, _12_, _11_ });
  assign _11_ = rnd_mode_i == 3'h4;
  assign _12_ = rnd_mode_i == 3'h3;
  assign _03_ = rnd_mode_i == 3'h2;
  assign _13_ = rnd_mode_i == 3'h1;
  assign _10_ = ! rnd_mode_i;
  assign _14_ = | round_sticky_bits_i;
  assign _15_ = _14_ ? sign_i : 1'h0;
  assign _16_ = _14_ ? _05_ : 1'h0;
  assign sign_o = _04_ ? _03_ : sign_i;
  assign _08_[0] = _02_;
endmodule

module \$paramod\iteration_div_sqrt_mvp\WIDTH=s32'00000000000000000000000000111010 (A_DI, B_DI, Div_enable_SI, Div_start_dly_SI, Sqrt_enable_SI, D_DI, D_DO, Sum_DO, Carry_out_DO);
  wire [58:0] _0_;
  wire _1_;
  input [57:0] A_DI;
  wire [57:0] A_DI;
  input [57:0] B_DI;
  wire [57:0] B_DI;
  output Carry_out_DO;
  wire Carry_out_DO;
  wire Cin_D;
  input [1:0] D_DI;
  wire [1:0] D_DI;
  output [1:0] D_DO;
  wire [1:0] D_DO;
  wire D_carry_D;
  input Div_enable_SI;
  wire Div_enable_SI;
  input Div_start_dly_SI;
  wire Div_start_dly_SI;
  wire Sqrt_cin_D;
  input Sqrt_enable_SI;
  wire Sqrt_enable_SI;
  output [57:0] Sum_DO;
  wire [57:0] Sum_DO;
  assign _0_ = A_DI + B_DI;
  assign { Carry_out_DO, Sum_DO } = _0_ + Cin_D;
  assign Sqrt_cin_D = Sqrt_enable_SI && D_carry_D;
  assign D_DO[0] = ~ D_DI[0];
  assign D_DO[1] = ~ _1_;
  assign D_carry_D = D_DI[1] | D_DI[0];
  assign Cin_D = Div_enable_SI ? 1'h0 : Sqrt_cin_D;
  assign _1_ = D_DI[1] ^ D_DI[0];
endmodule

module \$paramod\lzc\WIDTH=32'00000000000000000000000000000100\MODE=1'0 (in_i, cnt_o, empty_o);
  output [1:0] cnt_o;
  wire [1:0] cnt_o;
  output empty_o;
  wire empty_o;
  wire [31:0] \gen_lzc.flip_vector.sv2v_autoblock_1.i ;
  wire [3:0] \gen_lzc.in_tmp ;
  wire [7:0] \gen_lzc.index_lut ;
  wire [7:0] \gen_lzc.index_nodes ;
  wire [3:0] \gen_lzc.sel_nodes ;
  input [3:0] in_i;
  wire [3:0] in_i;
  assign empty_o = ~ \gen_lzc.sel_nodes [0];
  assign \gen_lzc.sel_nodes [1] = in_i[0] | in_i[1];
  assign \gen_lzc.sel_nodes [2] = in_i[2] | in_i[3];
  assign \gen_lzc.sel_nodes [0] = \gen_lzc.sel_nodes [1] | \gen_lzc.sel_nodes [2];
  assign \gen_lzc.index_nodes [3:2] = in_i[0] ? 2'h0 : 2'h1;
  assign \gen_lzc.index_nodes [5:4] = in_i[2] ? 2'h2 : 2'h3;
  assign cnt_o = \gen_lzc.sel_nodes [1] ? \gen_lzc.index_nodes [3:2] : \gen_lzc.index_nodes [5:4];
  assign \gen_lzc.flip_vector.sv2v_autoblock_1.i  = 32'd4;
  assign \gen_lzc.in_tmp  = in_i;
  assign \gen_lzc.index_lut  = 8'he4;
  assign \gen_lzc.index_nodes [1:0] = cnt_o;
endmodule

module \$paramod\lzc\WIDTH=32'00000000000000000000000000000101\MODE=1'0 (in_i, cnt_o, empty_o);
  output [2:0] cnt_o;
  wire [2:0] cnt_o;
  output empty_o;
  wire empty_o;
  wire [31:0] \gen_lzc.flip_vector.sv2v_autoblock_1.i ;
  wire [4:0] \gen_lzc.in_tmp ;
  wire [14:0] \gen_lzc.index_lut ;
  wire [23:0] \gen_lzc.index_nodes ;
  wire [7:0] \gen_lzc.sel_nodes ;
  input [4:0] in_i;
  wire [4:0] in_i;
  assign empty_o = ~ \gen_lzc.sel_nodes [0];
  assign \gen_lzc.sel_nodes [3] = in_i[0] | in_i[1];
  assign \gen_lzc.sel_nodes [4] = in_i[2] | in_i[3];
  assign \gen_lzc.sel_nodes [0] = \gen_lzc.sel_nodes [1] | in_i[4];
  assign \gen_lzc.sel_nodes [1] = \gen_lzc.sel_nodes [3] | \gen_lzc.sel_nodes [4];
  assign \gen_lzc.index_nodes [11:9] = in_i[0] ? 3'h0 : 3'h1;
  assign \gen_lzc.index_nodes [14:12] = in_i[2] ? 3'h2 : 3'h3;
  assign cnt_o = \gen_lzc.sel_nodes [1] ? \gen_lzc.index_nodes [5:3] : \gen_lzc.index_nodes [8:6];
  assign \gen_lzc.index_nodes [5:3] = \gen_lzc.sel_nodes [3] ? \gen_lzc.index_nodes [11:9] : \gen_lzc.index_nodes [14:12];
  assign \gen_lzc.index_nodes [8:6] = in_i[4] ? 3'h4 : 3'h0;
  assign \gen_lzc.flip_vector.sv2v_autoblock_1.i  = 32'd5;
  assign \gen_lzc.in_tmp  = in_i;
  assign \gen_lzc.index_lut  = 15'h4688;
  assign { \gen_lzc.index_nodes [20:15], \gen_lzc.index_nodes [2:0] } = { 6'h04, cnt_o };
  assign { \gen_lzc.sel_nodes [6:5], \gen_lzc.sel_nodes [2] } = { 1'h0, in_i[4], in_i[4] };
endmodule

module FPNewBlackbox(clk_i, rst_ni, operands_i, rnd_mode_i, op_i, op_mod_i, src_fmt_i, dst_fmt_i, int_fmt_i, vectorial_op_i, tag_i, in_valid_i, in_ready_o, flush_i, result_o, status_o, tag_o, out_valid_o, out_ready_i, busy_o);
  output busy_o;
  wire busy_o;
  input clk_i;
  wire clk_i;
  input [2:0] dst_fmt_i;
  wire [2:0] dst_fmt_i;
  input flush_i;
  wire flush_i;
  output in_ready_o;
  wire in_ready_o;
  input in_valid_i;
  wire in_valid_i;
  input [1:0] int_fmt_i;
  wire [1:0] int_fmt_i;
  input [3:0] op_i;
  wire [3:0] op_i;
  input op_mod_i;
  wire op_mod_i;
  input [191:0] operands_i;
  wire [191:0] operands_i;
  input out_ready_i;
  wire out_ready_i;
  output out_valid_o;
  wire out_valid_o;
  output [63:0] result_o;
  wire [63:0] result_o;
  input [2:0] rnd_mode_i;
  wire [2:0] rnd_mode_i;
  input rst_ni;
  wire rst_ni;
  input [2:0] src_fmt_i;
  wire [2:0] src_fmt_i;
  output [4:0] status_o;
  wire [4:0] status_o;
  input [1:0] tag_i;
  wire [1:0] tag_i;
  output [1:0] tag_o;
  wire [1:0] tag_o;
  input vectorial_op_i;
  wire vectorial_op_i;
  \$paramod$5c562f9d610f5cf9622fb6ec28b843801178b640\fpnew_top_21317_11D0A  inst (
    .busy_o(busy_o),
    .clk_i(clk_i),
    .dst_fmt_i(dst_fmt_i),
    .flush_i(flush_i),
    .in_ready_o(in_ready_o),
    .in_valid_i(in_valid_i),
    .int_fmt_i(int_fmt_i),
    .op_i(op_i),
    .op_mod_i(op_mod_i),
    .operands_i(operands_i),
    .out_ready_i(out_ready_i),
    .out_valid_o(out_valid_o),
    .result_o(result_o),
    .rnd_mode_i(rnd_mode_i),
    .rst_ni(rst_ni),
    .src_fmt_i(src_fmt_i),
    .status_o(status_o),
    .tag_i(tag_i),
    .tag_o(tag_o),
    .vectorial_op_i(vectorial_op_i)
  );
endmodule

module control_mvp(Clk_CI, Rst_RBI, Div_start_SI, Sqrt_start_SI, Start_SI, Kill_SI, Special_case_SBI, Special_case_dly_SBI, Precision_ctl_SI, Format_sel_SI, Numerator_DI, Exp_num_DI, Denominator_DI, Exp_den_DI, Div_start_dly_SO, Sqrt_start_dly_SO, Div_enable_SO, Sqrt_enable_SO, Full_precision_SO, FP32_SO, FP64_SO
, FP16_SO, FP16ALT_SO, Ready_SO, Done_SO, Mant_result_prenorm_DO, Exp_result_prenorm_DO);
  wire [5:0] _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire [53:0] _007_;
  wire [56:0] _008_;
  wire [53:0] _009_;
  wire [56:0] _010_;
  wire [5:0] _011_;
  wire [56:0] _012_;
  wire [5:0] _013_;
  wire [56:0] _014_;
  wire [5:0] _015_;
  wire [5:0] _016_;
  wire [12:0] _017_;
  wire [12:0] _018_;
  wire [31:0] _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire [11:0] _030_;
  wire _031_;
  wire [24:0] _032_;
  wire [53:0] _033_;
  wire [11:0] _034_;
  wire [8:0] _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire [28:0] _041_;
  wire [28:0] _042_;
  wire [28:0] _043_;
  wire [57:0] _044_;
  wire [57:0] _045_;
  wire [57:0] _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire [15:0] _051_;
  wire [15:0] _052_;
  wire [15:0] _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire [12:0] _058_;
  wire [12:0] _059_;
  wire [12:0] _060_;
  wire _061_;
  wire _062_;
  wire [1:0] _063_;
  wire _064_;
  wire [2:0] _065_;
  wire _066_;
  wire [1:0] _067_;
  wire _068_;
  wire [2:0] _069_;
  wire _070_;
  wire [2:0] _071_;
  wire _072_;
  wire [2:0] _073_;
  wire _074_;
  wire [2:0] _075_;
  wire _076_;
  wire [2:0] _077_;
  wire _078_;
  wire [2:0] _079_;
  wire _080_;
  wire [2:0] _081_;
  wire _082_;
  wire [2:0] _083_;
  wire _084_;
  wire [2:0] _085_;
  wire _086_;
  wire [2:0] _087_;
  wire _088_;
  wire [2:0] _089_;
  wire _090_;
  wire [2:0] _091_;
  wire _092_;
  wire [2:0] _093_;
  wire _094_;
  wire [2:0] _095_;
  wire _096_;
  wire [1:0] _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire [5:0] _120_;
  wire _121_;
  wire _122_;
  wire _123_;
  wire [2:0] _124_;
  wire _125_;
  wire _126_;
  wire [57:0] _127_;
  wire [57:0] _128_;
  wire [57:0] _129_;
  wire [57:0] _130_;
  wire [57:0] _131_;
  wire [57:0] _132_;
  wire [57:0] _133_;
  wire [57:0] _134_;
  wire [57:0] _135_;
  wire [57:0] _136_;
  wire [57:0] _137_;
  wire [57:0] _138_;
  wire [57:0] _139_;
  wire [57:0] _140_;
  wire [57:0] _141_;
  wire [57:0] _142_;
  wire [57:0] _143_;
  wire [57:0] _144_;
  wire [57:0] _145_;
  wire [57:0] _146_;
  wire [57:0] _147_;
  wire [57:0] _148_;
  wire [57:0] _149_;
  wire [57:0] _150_;
  wire [57:0] _151_;
  wire [57:0] _152_;
  wire [57:0] _153_;
  wire [57:0] _154_;
  wire [57:0] _155_;
  wire [57:0] _156_;
  wire [57:0] _157_;
  wire [57:0] _158_;
  wire [57:0] _159_;
  wire [57:0] _160_;
  wire [57:0] _161_;
  wire [57:0] _162_;
  wire [57:0] _163_;
  wire [57:0] _164_;
  wire [57:0] _165_;
  wire [57:0] _166_;
  wire [57:0] _167_;
  wire [57:0] _168_;
  wire [57:0] _169_;
  wire [57:0] _170_;
  wire [57:0] _171_;
  wire [57:0] _172_;
  wire [57:0] _173_;
  wire [57:0] _174_;
  wire [57:0] _175_;
  wire [57:0] _176_;
  wire [57:0] _177_;
  wire [57:0] _178_;
  wire [57:0] _179_;
  wire [57:0] _180_;
  wire [57:0] _181_;
  wire [57:0] _182_;
  wire _183_;
  wire _184_;
  wire _185_;
  wire _186_;
  wire _187_;
  wire _188_;
  wire [31:0] _189_;
  wire [57:0] _190_;
  wire [56:0] _191_;
  wire [13:0] _192_;
  wire [13:0] _193_;
  wire [31:0] _194_;
  wire [31:0] C_BIAS_AONE;
  wire [31:0] C_HALF_BIAS;
  input Clk_CI;
  wire Clk_CI;
  reg [5:0] Crtl_cnt_S;
  input [52:0] Denominator_DI;
  wire [52:0] Denominator_DI;
  wire [53:0] Denominator_se_D;
  wire [53:0] Denominator_se_DB;
  wire [57:0] Denominator_se_format_DB;
  wire \Div_enable_SI[0] ;
  wire \Div_enable_SI[1] ;
  wire \Div_enable_SI[2] ;
  output Div_enable_SO;
  reg Div_enable_SO;
  input Div_start_SI;
  wire Div_start_SI;
  reg Div_start_dly_S;
  wire \Div_start_dly_SI[0] ;
  wire \Div_start_dly_SI[1] ;
  wire \Div_start_dly_SI[2] ;
  output Div_start_dly_SO;
  wire Div_start_dly_SO;
  output Done_SO;
  reg Done_SO;
  wire [12:0] Exp_add_a_D;
  wire [12:0] Exp_add_b_D;
  wire [12:0] Exp_add_c_D;
  input [11:0] Exp_den_DI;
  wire [11:0] Exp_den_DI;
  input [11:0] Exp_num_DI;
  wire [11:0] Exp_num_DI;
  output [12:0] Exp_result_prenorm_DO;
  wire [12:0] Exp_result_prenorm_DO;
  reg [12:0] Exp_result_prenorm_DP;
  output FP16ALT_SO;
  wire FP16ALT_SO;
  output FP16_SO;
  wire FP16_SO;
  output FP32_SO;
  wire FP32_SO;
  output FP64_SO;
  wire FP64_SO;
  wire Final_state_S;
  wire [57:0] First_iteration_cell_div_a_D;
  wire [57:0] First_iteration_cell_div_b_D;
  reg [1:0] Format_sel_S;
  input [1:0] Format_sel_SI;
  wire [1:0] Format_sel_SI;
  wire Fsm_enable_S;
  output Full_precision_SO;
  wire Full_precision_SO;
  wire [57:0] \Iteration_cell_a_BMASK_D[0] ;
  wire [57:0] \Iteration_cell_a_BMASK_D[1] ;
  wire [57:0] \Iteration_cell_a_BMASK_D[2] ;
  wire [57:0] \Iteration_cell_a_D[0] ;
  wire [57:0] \Iteration_cell_a_D[1] ;
  wire [57:0] \Iteration_cell_a_D[2] ;
  wire [57:0] \Iteration_cell_b_BMASK_D[0] ;
  wire [57:0] \Iteration_cell_b_BMASK_D[1] ;
  wire [57:0] \Iteration_cell_b_BMASK_D[2] ;
  wire [57:0] \Iteration_cell_b_D[0] ;
  wire [57:0] \Iteration_cell_b_D[1] ;
  wire [57:0] \Iteration_cell_b_D[2] ;
  wire \Iteration_cell_carry_D[0] ;
  wire \Iteration_cell_carry_D[1] ;
  wire \Iteration_cell_carry_D[2] ;
  wire \Iteration_cell_carry_D[3] ;
  wire [57:0] \Iteration_cell_sum_AMASK_D[0] ;
  wire [57:0] \Iteration_cell_sum_AMASK_D[1] ;
  wire [57:0] \Iteration_cell_sum_AMASK_D[2] ;
  wire [57:0] \Iteration_cell_sum_AMASK_D[3] ;
  wire [57:0] \Iteration_cell_sum_D[0] ;
  wire [57:0] \Iteration_cell_sum_D[1] ;
  wire [57:0] \Iteration_cell_sum_D[2] ;
  input Kill_SI;
  wire Kill_SI;
  wire [53:0] Mant_D_sqrt_Norm;
  output [56:0] Mant_result_prenorm_DO;
  wire [56:0] Mant_result_prenorm_DO;
  wire [57:0] Mask_bits_ctl_S;
  input [52:0] Numerator_DI;
  wire [52:0] Numerator_DI;
  wire [53:0] Numerator_se_D;
  reg [57:0] Partial_remainder_DP;
  reg [5:0] Precision_ctl_S;
  input [5:0] Precision_ctl_SI;
  wire [5:0] Precision_ctl_SI;
  wire [57:0] Q_sqrt0;
  wire [57:0] Q_sqrt1;
  wire [57:0] Q_sqrt2;
  wire [57:0] Q_sqrt_com_0;
  wire [57:0] Q_sqrt_com_1;
  wire [57:0] Q_sqrt_com_2;
  wire [3:0] Qcnt_four_0;
  wire [6:0] Qcnt_four_1;
  wire [42:0] Qcnt_four_10;
  wire [46:0] Qcnt_four_11;
  wire [50:0] Qcnt_four_12;
  wire [54:0] Qcnt_four_13;
  wire [58:0] Qcnt_four_14;
  wire [10:0] Qcnt_four_2;
  wire [14:0] Qcnt_four_3;
  wire [18:0] Qcnt_four_4;
  wire [22:0] Qcnt_four_5;
  wire [26:0] Qcnt_four_6;
  wire [30:0] Qcnt_four_7;
  wire [34:0] Qcnt_four_8;
  wire [38:0] Qcnt_four_9;
  wire Qcnt_one_0;
  wire Qcnt_one_1;
  wire [9:0] Qcnt_one_10;
  wire [10:0] Qcnt_one_11;
  wire [11:0] Qcnt_one_12;
  wire [12:0] Qcnt_one_13;
  wire [13:0] Qcnt_one_14;
  wire [14:0] Qcnt_one_15;
  wire [15:0] Qcnt_one_16;
  wire [16:0] Qcnt_one_17;
  wire [17:0] Qcnt_one_18;
  wire [18:0] Qcnt_one_19;
  wire [1:0] Qcnt_one_2;
  wire [19:0] Qcnt_one_20;
  wire [20:0] Qcnt_one_21;
  wire [21:0] Qcnt_one_22;
  wire [22:0] Qcnt_one_23;
  wire [23:0] Qcnt_one_24;
  wire [24:0] Qcnt_one_25;
  wire [25:0] Qcnt_one_26;
  wire [26:0] Qcnt_one_27;
  wire [27:0] Qcnt_one_28;
  wire [28:0] Qcnt_one_29;
  wire [2:0] Qcnt_one_3;
  wire [29:0] Qcnt_one_30;
  wire [30:0] Qcnt_one_31;
  wire [31:0] Qcnt_one_32;
  wire [32:0] Qcnt_one_33;
  wire [33:0] Qcnt_one_34;
  wire [34:0] Qcnt_one_35;
  wire [35:0] Qcnt_one_36;
  wire [36:0] Qcnt_one_37;
  wire [37:0] Qcnt_one_38;
  wire [38:0] Qcnt_one_39;
  wire [3:0] Qcnt_one_4;
  wire [39:0] Qcnt_one_40;
  wire [40:0] Qcnt_one_41;
  wire [41:0] Qcnt_one_42;
  wire [42:0] Qcnt_one_43;
  wire [43:0] Qcnt_one_44;
  wire [44:0] Qcnt_one_45;
  wire [45:0] Qcnt_one_46;
  wire [46:0] Qcnt_one_47;
  wire [47:0] Qcnt_one_48;
  wire [48:0] Qcnt_one_49;
  wire [4:0] Qcnt_one_5;
  wire [49:0] Qcnt_one_50;
  wire [50:0] Qcnt_one_51;
  wire [51:0] Qcnt_one_52;
  wire [52:0] Qcnt_one_53;
  wire [53:0] Qcnt_one_54;
  wire [54:0] Qcnt_one_55;
  wire [55:0] Qcnt_one_56;
  wire [56:0] Qcnt_one_57;
  wire [5:0] Qcnt_one_6;
  wire [6:0] Qcnt_one_7;
  wire [7:0] Qcnt_one_8;
  wire [8:0] Qcnt_one_9;
  wire [2:0] Qcnt_three_0;
  wire [4:0] Qcnt_three_1;
  wire [31:0] Qcnt_three_10;
  wire [34:0] Qcnt_three_11;
  wire [37:0] Qcnt_three_12;
  wire [40:0] Qcnt_three_13;
  wire [43:0] Qcnt_three_14;
  wire [46:0] Qcnt_three_15;
  wire [49:0] Qcnt_three_16;
  wire [52:0] Qcnt_three_17;
  wire [55:0] Qcnt_three_18;
  wire [58:0] Qcnt_three_19;
  wire [7:0] Qcnt_three_2;
  wire [10:0] Qcnt_three_3;
  wire [13:0] Qcnt_three_4;
  wire [16:0] Qcnt_three_5;
  wire [19:0] Qcnt_three_6;
  wire [22:0] Qcnt_three_7;
  wire [25:0] Qcnt_three_8;
  wire [28:0] Qcnt_three_9;
  wire [1:0] Qcnt_two_0;
  wire [2:0] Qcnt_two_1;
  wire [20:0] Qcnt_two_10;
  wire [22:0] Qcnt_two_11;
  wire [24:0] Qcnt_two_12;
  wire [26:0] Qcnt_two_13;
  wire [28:0] Qcnt_two_14;
  wire [30:0] Qcnt_two_15;
  wire [32:0] Qcnt_two_16;
  wire [34:0] Qcnt_two_17;
  wire [36:0] Qcnt_two_18;
  wire [38:0] Qcnt_two_19;
  wire [4:0] Qcnt_two_2;
  wire [40:0] Qcnt_two_20;
  wire [42:0] Qcnt_two_21;
  wire [44:0] Qcnt_two_22;
  wire [46:0] Qcnt_two_23;
  wire [48:0] Qcnt_two_24;
  wire [50:0] Qcnt_two_25;
  wire [52:0] Qcnt_two_26;
  wire [54:0] Qcnt_two_27;
  wire [56:0] Qcnt_two_28;
  wire [6:0] Qcnt_two_3;
  wire [8:0] Qcnt_two_4;
  wire [10:0] Qcnt_two_5;
  wire [12:0] Qcnt_two_6;
  wire [14:0] Qcnt_two_7;
  wire [16:0] Qcnt_two_8;
  wire [18:0] Qcnt_two_9;
  reg [56:0] Quotient_DP;
  output Ready_SO;
  reg Ready_SO;
  input Rst_RBI;
  wire Rst_RBI;
  wire [57:0] Sec_iteration_cell_div_a_D;
  wire [57:0] Sec_iteration_cell_div_b_D;
  wire Sel_b_for_first_S;
  wire Sel_b_for_sec_S;
  wire Sel_b_for_thi_S;
  input Special_case_SBI;
  wire Special_case_SBI;
  input Special_case_dly_SBI;
  wire Special_case_dly_SBI;
  wire [1:0] \Sqrt_DI[0] ;
  wire [1:0] \Sqrt_DI[1] ;
  wire [1:0] \Sqrt_DI[2] ;
  wire [1:0] \Sqrt_DO[0] ;
  wire [1:0] \Sqrt_DO[1] ;
  wire [1:0] \Sqrt_DO[2] ;
  wire [57:0] Sqrt_Q0;
  wire [57:0] Sqrt_Q1;
  wire [57:0] Sqrt_Q2;
  wire [57:0] Sqrt_R0;
  wire [57:0] Sqrt_R1;
  wire [57:0] Sqrt_R2;
  wire [57:0] Sqrt_R3;
  wire [57:0] Sqrt_R4;
  wire \Sqrt_enable_SI[0] ;
  wire \Sqrt_enable_SI[1] ;
  wire \Sqrt_enable_SI[2] ;
  output Sqrt_enable_SO;
  reg Sqrt_enable_SO;
  wire [3:0] Sqrt_quotinent_S;
  input Sqrt_start_SI;
  wire Sqrt_start_SI;
  reg Sqrt_start_dly_S;
  output Sqrt_start_dly_SO;
  wire Sqrt_start_dly_SO;
  input Start_SI;
  wire Start_SI;
  wire Start_dly_S;
  wire [5:0] State_Four_iteration_unit_S;
  wire [5:0] State_Two_iteration_unit_S;
  wire [5:0] State_ctl_S;
  wire [57:0] Thi_iteration_cell_div_a_D;
  wire [57:0] Thi_iteration_cell_div_b_D;
  assign _017_ = Exp_add_a_D + Exp_add_b_D;
  assign _018_ = _017_ + Exp_add_c_D;
  assign _019_ = Crtl_cnt_S + 32'd1;
  always @(posedge Clk_CI, negedge Rst_RBI)
    if (!Rst_RBI) Div_enable_SO <= 1'h0;
    else if (_020_) Div_enable_SO <= _001_;
  always @(posedge Clk_CI, negedge Rst_RBI)
    if (!Rst_RBI) Ready_SO <= 1'h1;
    else if (_021_) Ready_SO <= _004_;
  always @(posedge Clk_CI, negedge Rst_RBI)
    if (!Rst_RBI) Partial_remainder_DP <= 58'h000000000000000;
    else if (Fsm_enable_S) Partial_remainder_DP <= _190_;
  always @(posedge Clk_CI, negedge Rst_RBI)
    if (!Rst_RBI) Quotient_DP <= 57'h000000000000000;
    else if (Fsm_enable_S) Quotient_DP <= _191_;
  always @(posedge Clk_CI, negedge Rst_RBI)
    if (!Rst_RBI) Sqrt_enable_SO <= 1'h0;
    else if (_022_) Sqrt_enable_SO <= _005_;
  always @(posedge Clk_CI, negedge Rst_RBI)
    if (!Rst_RBI) Exp_result_prenorm_DP <= 13'h0000;
    else if (Start_dly_S) Exp_result_prenorm_DP <= _018_;
  always @(posedge Clk_CI, negedge Rst_RBI)
    if (!Rst_RBI) Format_sel_S <= 2'h0;
    else if (_026_) Format_sel_S <= Format_sel_SI;
  always @(posedge Clk_CI, negedge Rst_RBI)
    if (!Rst_RBI) Precision_ctl_S <= 6'h00;
    else if (_026_) Precision_ctl_S <= Precision_ctl_SI;
  assign _020_ = | { _027_, Done_SO, Kill_SI };
  assign _021_ = | { _062_, _026_ };
  assign _022_ = | { _028_, Done_SO, Kill_SI };
  assign _023_ = | { FP16ALT_SO, FP32_SO };
  assign _024_ = | { _099_, _100_, _101_, _102_, _103_, _104_, _105_, _106_, _107_, _108_ };
  assign Full_precision_SO = ! Precision_ctl_S;
  assign Final_state_S = Crtl_cnt_S == State_ctl_S;
  assign _025_ = FP64_SO && Quotient_DP[0];
  assign Sec_iteration_cell_div_a_D[3] = FP64_SO && Sel_b_for_sec_S;
  assign Thi_iteration_cell_div_a_D[3] = FP64_SO && Sel_b_for_thi_S;
  assign _027_ = Div_start_SI && Ready_SO;
  assign _028_ = Sqrt_start_SI && Ready_SO;
  assign _029_ = _061_ && _036_;
  assign Fsm_enable_S = _029_ && Special_case_dly_SBI;
  assign _026_ = Start_SI && Ready_SO;
  assign Sel_b_for_sec_S = ~ \Iteration_cell_sum_AMASK_D[0] [57];
  assign Sel_b_for_thi_S = ~ \Iteration_cell_sum_AMASK_D[1] [57];
  assign _030_ = ~ Exp_den_DI;
  assign _031_ = ~ Exp_den_DI[11];
  assign _032_ = ~ { 1'h0, Denominator_DI[52:29] };
  assign _033_ = ~ { 1'h0, Denominator_DI };
  assign _034_ = ~ { 1'h0, Denominator_DI[52:42] };
  assign _035_ = ~ { 1'h0, Denominator_DI[52:45] };
  assign _036_ = ~ Kill_SI;
  assign _037_ = ~ \Iteration_cell_sum_AMASK_D[3] [28];
  assign _038_ = ~ \Iteration_cell_sum_AMASK_D[2] [28];
  assign _039_ = ~ \Iteration_cell_sum_AMASK_D[1] [28];
  assign _040_ = ~ \Iteration_cell_sum_AMASK_D[0] [28];
  assign _041_ = ~ Q_sqrt0[28:0];
  assign _042_ = ~ Q_sqrt1[28:0];
  assign _043_ = ~ Q_sqrt2[28:0];
  assign _044_ = ~ Q_sqrt0;
  assign _045_ = ~ Q_sqrt1;
  assign _046_ = ~ Q_sqrt2;
  assign _047_ = ~ \Iteration_cell_sum_AMASK_D[3] [15];
  assign _048_ = ~ \Iteration_cell_sum_AMASK_D[2] [15];
  assign _049_ = ~ \Iteration_cell_sum_AMASK_D[1] [15];
  assign _050_ = ~ \Iteration_cell_sum_AMASK_D[0] [15];
  assign _051_ = ~ Q_sqrt0[15:0];
  assign _052_ = ~ Q_sqrt1[15:0];
  assign _053_ = ~ Q_sqrt2[15:0];
  assign _054_ = ~ \Iteration_cell_sum_AMASK_D[3] [12];
  assign _055_ = ~ \Iteration_cell_sum_AMASK_D[2] [12];
  assign _056_ = ~ \Iteration_cell_sum_AMASK_D[1] [12];
  assign _057_ = ~ \Iteration_cell_sum_AMASK_D[0] [12];
  assign _058_ = ~ Q_sqrt0[12:0];
  assign _059_ = ~ Q_sqrt1[12:0];
  assign _060_ = ~ Q_sqrt2[12:0];
  assign Start_dly_S = Div_start_dly_S | Sqrt_start_dly_S;
  assign _061_ = Start_dly_S | _126_;
  assign _062_ = Final_state_S | Kill_SI;
  always @(posedge Clk_CI, negedge Rst_RBI)
    if (!Rst_RBI) Done_SO <= 1'h0;
    else Done_SO <= _003_;
  always @(posedge Clk_CI, negedge Rst_RBI)
    if (!Rst_RBI) Crtl_cnt_S <= 6'h00;
    else Crtl_cnt_S <= _000_;
  always @(posedge Clk_CI, negedge Rst_RBI)
    if (!Rst_RBI) Sqrt_start_dly_S <= 1'h0;
    else Sqrt_start_dly_S <= _006_;
  always @(posedge Clk_CI, negedge Rst_RBI)
    if (!Rst_RBI) Div_start_dly_S <= 1'h0;
    else Div_start_dly_S <= _002_;
  assign _014_ = _064_ ? { Quotient_DP[8:1], 49'h0000000000000 } : { Quotient_DP[11:0], 45'h000000000000 };
  assign _064_ = | _063_;
  assign FP16ALT_SO = Format_sel_S == 2'h3;
  function [56:0] _264_;
    input [56:0] a;
    input [113:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _264_ = b[56:0];
      2'b1?:
        _264_ = b[113:57];
      default:
        _264_ = a;
    endcase
  endfunction
  assign _012_ = _264_({ Quotient_DP[14:0], 42'h00000000000 }, { Quotient_DP[11:1], 46'h000000000000, Quotient_DP[8:0], 48'h000000000000 }, { _068_, _066_ });
  assign _068_ = | _067_;
  assign FP16_SO = Format_sel_S == 2'h2;
  function [56:0] _267_;
    input [56:0] a;
    input [911:0] b;
    input [15:0] s;
    casez (s) // synopsys parallel_case
      16'b???????????????1:
        _267_ = b[56:0];
      16'b??????????????1?:
        _267_ = b[113:57];
      16'b?????????????1??:
        _267_ = b[170:114];
      16'b????????????1???:
        _267_ = b[227:171];
      16'b???????????1????:
        _267_ = b[284:228];
      16'b??????????1?????:
        _267_ = b[341:285];
      16'b?????????1??????:
        _267_ = b[398:342];
      16'b????????1???????:
        _267_ = b[455:399];
      16'b???????1????????:
        _267_ = b[512:456];
      16'b??????1?????????:
        _267_ = b[569:513];
      16'b?????1??????????:
        _267_ = b[626:570];
      16'b????1???????????:
        _267_ = b[683:627];
      16'b???1????????????:
        _267_ = b[740:684];
      16'b??1?????????????:
        _267_ = b[797:741];
      16'b?1??????????????:
        _267_ = b[854:798];
      16'b1???????????????:
        _267_ = b[911:855];
      default:
        _267_ = a;
    endcase
  endfunction
  assign _010_ = _267_(Quotient_DP, { Quotient_DP[53:1], 4'h0, Quotient_DP[50:0], 6'h00, Quotient_DP[47:0], 9'h000, Quotient_DP[44:0], 12'h000, Quotient_DP[41:0], 15'h0000, Quotient_DP[38:0], 18'h00000, Quotient_DP[35:0], 21'h000000, Quotient_DP[32:0], 24'h000000, Quotient_DP[29:0], 27'h0000000, Quotient_DP[26:0], 30'h00000000, Quotient_DP[23:0], 33'h000000000, Quotient_DP[20:0], 36'h000000000, Quotient_DP[17:0], 39'h0000000000, Quotient_DP[14:0], 42'h00000000000, Quotient_DP[11:0], 45'h000000000000, Quotient_DP[8:0], 48'h000000000000 }, { _098_, _096_, _094_, _092_, _090_, _088_, _086_, _084_, _082_, _080_, _078_, _076_, _074_, _072_, _070_, _066_ });
  assign _080_ = | _079_;
  assign _079_[0] = Precision_ctl_S == 6'h1a;
  assign _079_[1] = Precision_ctl_S == 6'h19;
  assign _079_[2] = Precision_ctl_S == 6'h18;
  assign _082_ = | _081_;
  assign _081_[0] = Precision_ctl_S == 6'h1d;
  assign _081_[1] = Precision_ctl_S == 6'h1c;
  assign _081_[2] = Precision_ctl_S == 6'h1b;
  assign _084_ = | _083_;
  assign _083_[0] = Precision_ctl_S == 6'h20;
  assign _083_[1] = Precision_ctl_S == 6'h1f;
  assign _083_[2] = Precision_ctl_S == 6'h1e;
  assign _086_ = | _085_;
  assign _085_[0] = Precision_ctl_S == 6'h23;
  assign _085_[1] = Precision_ctl_S == 6'h22;
  assign _085_[2] = Precision_ctl_S == 6'h21;
  assign _088_ = | _087_;
  assign _087_[0] = Precision_ctl_S == 6'h26;
  assign _087_[1] = Precision_ctl_S == 6'h25;
  assign _087_[2] = Precision_ctl_S == 6'h24;
  assign _090_ = | _089_;
  assign _089_[0] = Precision_ctl_S == 6'h29;
  assign _089_[1] = Precision_ctl_S == 6'h28;
  assign _089_[2] = Precision_ctl_S == 6'h27;
  assign _092_ = | _091_;
  assign _091_[0] = Precision_ctl_S == 6'h2c;
  assign _091_[1] = Precision_ctl_S == 6'h2b;
  assign _091_[2] = Precision_ctl_S == 6'h2a;
  assign _094_ = | _093_;
  assign _093_[0] = Precision_ctl_S == 6'h2f;
  assign _093_[1] = Precision_ctl_S == 6'h2e;
  assign _093_[2] = Precision_ctl_S == 6'h2d;
  assign _096_ = | _095_;
  assign _095_[0] = Precision_ctl_S == 6'h32;
  assign _095_[1] = Precision_ctl_S == 6'h31;
  assign _095_[2] = Precision_ctl_S == 6'h30;
  assign _098_ = | _097_;
  assign _097_[0] = Precision_ctl_S == 6'h34;
  assign _097_[1] = Precision_ctl_S == 6'h33;
  function [56:0] _307_;
    input [56:0] a;
    input [341:0] b;
    input [5:0] s;
    casez (s) // synopsys parallel_case
      6'b?????1:
        _307_ = b[56:0];
      6'b????1?:
        _307_ = b[113:57];
      6'b???1??:
        _307_ = b[170:114];
      6'b??1???:
        _307_ = b[227:171];
      6'b?1????:
        _307_ = b[284:228];
      6'b1?????:
        _307_ = b[341:285];
      default:
        _307_ = a;
    endcase
  endfunction
  assign _008_ = _307_({ Quotient_DP[26:0], 30'h00000000 }, { Quotient_DP[23:0], 33'h000000000, Quotient_DP[20:0], 36'h000000000, Quotient_DP[17:0], 39'h0000000000, Quotient_DP[14:0], 42'h00000000000, Quotient_DP[11:0], 45'h000000000000, Quotient_DP[8:0], 48'h000000000000 }, { _078_, _076_, _074_, _072_, _070_, _066_ });
  function [56:0] _308_;
    input [56:0] a;
    input [227:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _308_ = b[56:0];
      4'b??1?:
        _308_ = b[113:57];
      4'b?1??:
        _308_ = b[170:114];
      4'b1???:
        _308_ = b[227:171];
      default:
        _308_ = a;
    endcase
  endfunction
  assign Mant_result_prenorm_DO = _308_(57'hxxxxxxxxxxxxxxx, { _008_, _010_, _012_, _014_ }, { FP32_SO, FP64_SO, FP16_SO, FP16ALT_SO });
  function [31:0] _309_;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _309_ = b[31:0];
      3'b?1?:
        _309_ = b[63:32];
      3'b1??:
        _309_ = b[95:64];
      default:
        _309_ = a;
    endcase
  endfunction
  assign C_HALF_BIAS = _309_(32'hxxxxxxxx, 96'h000001ff000000070000003f, { FP64_SO, FP16_SO, _023_ });
  function [31:0] _310_;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _310_ = b[31:0];
      3'b?1?:
        _310_ = b[63:32];
      3'b1??:
        _310_ = b[95:64];
      default:
        _310_ = a;
    endcase
  endfunction
  assign C_BIAS_AONE = _310_(32'hxxxxxxxx, 96'h000004000000001000000080, { FP64_SO, FP16_SO, _023_ });
  function [57:0] _311_;
    input [57:0] a;
    input [1043:0] b;
    input [17:0] s;
    casez (s) // synopsys parallel_case
      18'b?????????????????1:
        _311_ = b[57:0];
      18'b????????????????1?:
        _311_ = b[115:58];
      18'b???????????????1??:
        _311_ = b[173:116];
      18'b??????????????1???:
        _311_ = b[231:174];
      18'b?????????????1????:
        _311_ = b[289:232];
      18'b????????????1?????:
        _311_ = b[347:290];
      18'b???????????1??????:
        _311_ = b[405:348];
      18'b??????????1???????:
        _311_ = b[463:406];
      18'b?????????1????????:
        _311_ = b[521:464];
      18'b????????1?????????:
        _311_ = b[579:522];
      18'b???????1??????????:
        _311_ = b[637:580];
      18'b??????1???????????:
        _311_ = b[695:638];
      18'b?????1????????????:
        _311_ = b[753:696];
      18'b????1?????????????:
        _311_ = b[811:754];
      18'b???1??????????????:
        _311_ = b[869:812];
      18'b??1???????????????:
        _311_ = b[927:870];
      18'b?1????????????????:
        _311_ = b[985:928];
      18'b1?????????????????:
        _311_ = b[1043:986];
      default:
        _311_ = a;
    endcase
  endfunction
  assign Sqrt_Q2 = _311_(_128_, { _131_, _134_, _137_, _140_, _143_, _146_, _149_, _152_, _155_, _158_, _161_, _164_, _167_, _170_, _173_, _176_, _179_, _182_ }, { _116_, _115_, _114_, _113_, _112_, _111_, _110_, _109_, _108_, _107_, _106_, _105_, _104_, _103_, _102_, _101_, _100_, _099_ });
  assign _099_ = Crtl_cnt_S == 6'h12;
  assign _100_ = Crtl_cnt_S == 6'h11;
  assign _101_ = Crtl_cnt_S == 6'h10;
  assign _102_ = Crtl_cnt_S == 6'h0f;
  assign _103_ = Crtl_cnt_S == 6'h0e;
  assign _104_ = Crtl_cnt_S == 6'h0d;
  assign _105_ = Crtl_cnt_S == 6'h0c;
  assign _106_ = Crtl_cnt_S == 6'h0b;
  assign _107_ = Crtl_cnt_S == 6'h0a;
  assign _108_ = Crtl_cnt_S == 6'h09;
  assign _109_ = Crtl_cnt_S == 6'h08;
  assign _110_ = Crtl_cnt_S == 6'h07;
  assign _111_ = Crtl_cnt_S == 6'h06;
  assign _112_ = Crtl_cnt_S == 6'h05;
  assign _113_ = Crtl_cnt_S == 6'h04;
  assign _114_ = Crtl_cnt_S == 6'h03;
  assign _115_ = Crtl_cnt_S == 6'h02;
  assign _116_ = Crtl_cnt_S == 6'h01;
  function [57:0] _330_;
    input [57:0] a;
    input [1043:0] b;
    input [17:0] s;
    casez (s) // synopsys parallel_case
      18'b?????????????????1:
        _330_ = b[57:0];
      18'b????????????????1?:
        _330_ = b[115:58];
      18'b???????????????1??:
        _330_ = b[173:116];
      18'b??????????????1???:
        _330_ = b[231:174];
      18'b?????????????1????:
        _330_ = b[289:232];
      18'b????????????1?????:
        _330_ = b[347:290];
      18'b???????????1??????:
        _330_ = b[405:348];
      18'b??????????1???????:
        _330_ = b[463:406];
      18'b?????????1????????:
        _330_ = b[521:464];
      18'b????????1?????????:
        _330_ = b[579:522];
      18'b???????1??????????:
        _330_ = b[637:580];
      18'b??????1???????????:
        _330_ = b[695:638];
      18'b?????1????????????:
        _330_ = b[753:696];
      18'b????1?????????????:
        _330_ = b[811:754];
      18'b???1??????????????:
        _330_ = b[869:812];
      18'b??1???????????????:
        _330_ = b[927:870];
      18'b?1????????????????:
        _330_ = b[985:928];
      18'b1?????????????????:
        _330_ = b[1043:986];
      default:
        _330_ = a;
    endcase
  endfunction
  assign Q_sqrt2 = _330_({ 56'h00000000000000, Sqrt_quotinent_S[3:2] }, { 53'h00000000000000, Quotient_DP[2:0], Sqrt_quotinent_S[3:2], 50'h0000000000000, Quotient_DP[5:0], Sqrt_quotinent_S[3:2], 47'h000000000000, Quotient_DP[8:0], Sqrt_quotinent_S[3:2], 44'h00000000000, Quotient_DP[11:0], Sqrt_quotinent_S[3:2], 41'h00000000000, Quotient_DP[14:0], Sqrt_quotinent_S[3:2], 38'h0000000000, Quotient_DP[17:0], Sqrt_quotinent_S[3:2], 35'h000000000, Quotient_DP[20:0], Sqrt_quotinent_S[3:2], 32'h00000000, Quotient_DP[23:0], Sqrt_quotinent_S[3:2], 29'h00000000, Quotient_DP[26:0], Sqrt_quotinent_S[3:2], 26'h0000000, Quotient_DP[29:0], Sqrt_quotinent_S[3:2], 23'h000000, Quotient_DP[32:0], Sqrt_quotinent_S[3:2], 20'h00000, Quotient_DP[35:0], Sqrt_quotinent_S[3:2], 17'h00000, Quotient_DP[38:0], Sqrt_quotinent_S[3:2], 14'h0000, Quotient_DP[41:0], Sqrt_quotinent_S[3:2], 11'h000, Quotient_DP[44:0], Sqrt_quotinent_S[3:2], 8'h00, Quotient_DP[47:0], Sqrt_quotinent_S[3:2], 5'h00, Quotient_DP[50:0], Sqrt_quotinent_S[3:2], 2'h0, Quotient_DP[53:0], Sqrt_quotinent_S[3:2] }, { _116_, _115_, _114_, _113_, _112_, _111_, _110_, _109_, _108_, _107_, _106_, _105_, _104_, _103_, _102_, _101_, _100_, _099_ });
  function [1:0] _331_;
    input [1:0] a;
    input [17:0] b;
    input [8:0] s;
    casez (s) // synopsys parallel_case
      9'b????????1:
        _331_ = b[1:0];
      9'b???????1?:
        _331_ = b[3:2];
      9'b??????1??:
        _331_ = b[5:4];
      9'b?????1???:
        _331_ = b[7:6];
      9'b????1????:
        _331_ = b[9:8];
      9'b???1?????:
        _331_ = b[11:10];
      9'b??1??????:
        _331_ = b[13:12];
      9'b?1???????:
        _331_ = b[15:14];
      9'b1????????:
        _331_ = b[17:16];
      default:
        _331_ = a;
    endcase
  endfunction
  assign \Sqrt_DI[2]  = _331_(Mant_D_sqrt_Norm[49:48], { Mant_D_sqrt_Norm[43:42], Mant_D_sqrt_Norm[37:36], Mant_D_sqrt_Norm[31:30], Mant_D_sqrt_Norm[25:24], Mant_D_sqrt_Norm[19:18], Mant_D_sqrt_Norm[13:12], Mant_D_sqrt_Norm[7:6], Mant_D_sqrt_Norm[1:0], 2'h0 }, { _116_, _115_, _114_, _113_, _112_, _111_, _110_, _109_, _024_ });
  function [57:0] _332_;
    input [57:0] a;
    input [1043:0] b;
    input [17:0] s;
    casez (s) // synopsys parallel_case
      18'b?????????????????1:
        _332_ = b[57:0];
      18'b????????????????1?:
        _332_ = b[115:58];
      18'b???????????????1??:
        _332_ = b[173:116];
      18'b??????????????1???:
        _332_ = b[231:174];
      18'b?????????????1????:
        _332_ = b[289:232];
      18'b????????????1?????:
        _332_ = b[347:290];
      18'b???????????1??????:
        _332_ = b[405:348];
      18'b??????????1???????:
        _332_ = b[463:406];
      18'b?????????1????????:
        _332_ = b[521:464];
      18'b????????1?????????:
        _332_ = b[579:522];
      18'b???????1??????????:
        _332_ = b[637:580];
      18'b??????1???????????:
        _332_ = b[695:638];
      18'b?????1????????????:
        _332_ = b[753:696];
      18'b????1?????????????:
        _332_ = b[811:754];
      18'b???1??????????????:
        _332_ = b[869:812];
      18'b??1???????????????:
        _332_ = b[927:870];
      18'b?1????????????????:
        _332_ = b[985:928];
      18'b1?????????????????:
        _332_ = b[1043:986];
      default:
        _332_ = a;
    endcase
  endfunction
  assign Sqrt_Q1 = _332_(_127_, { _130_, _133_, _136_, _139_, _142_, _145_, _148_, _151_, _154_, _157_, _160_, _163_, _166_, _169_, _172_, _175_, _178_, _181_ }, { _116_, _115_, _114_, _113_, _112_, _111_, _110_, _109_, _108_, _107_, _106_, _105_, _104_, _103_, _102_, _101_, _100_, _099_ });
  function [57:0] _333_;
    input [57:0] a;
    input [1043:0] b;
    input [17:0] s;
    casez (s) // synopsys parallel_case
      18'b?????????????????1:
        _333_ = b[57:0];
      18'b????????????????1?:
        _333_ = b[115:58];
      18'b???????????????1??:
        _333_ = b[173:116];
      18'b??????????????1???:
        _333_ = b[231:174];
      18'b?????????????1????:
        _333_ = b[289:232];
      18'b????????????1?????:
        _333_ = b[347:290];
      18'b???????????1??????:
        _333_ = b[405:348];
      18'b??????????1???????:
        _333_ = b[463:406];
      18'b?????????1????????:
        _333_ = b[521:464];
      18'b????????1?????????:
        _333_ = b[579:522];
      18'b???????1??????????:
        _333_ = b[637:580];
      18'b??????1???????????:
        _333_ = b[695:638];
      18'b?????1????????????:
        _333_ = b[753:696];
      18'b????1?????????????:
        _333_ = b[811:754];
      18'b???1??????????????:
        _333_ = b[869:812];
      18'b??1???????????????:
        _333_ = b[927:870];
      18'b?1????????????????:
        _333_ = b[985:928];
      18'b1?????????????????:
        _333_ = b[1043:986];
      default:
        _333_ = a;
    endcase
  endfunction
  assign Q_sqrt1 = _333_({ 57'h000000000000000, Sqrt_quotinent_S[3] }, { 54'h00000000000000, Quotient_DP[2:0], Sqrt_quotinent_S[3], 51'h0000000000000, Quotient_DP[5:0], Sqrt_quotinent_S[3], 48'h000000000000, Quotient_DP[8:0], Sqrt_quotinent_S[3], 45'h000000000000, Quotient_DP[11:0], Sqrt_quotinent_S[3], 42'h00000000000, Quotient_DP[14:0], Sqrt_quotinent_S[3], 39'h0000000000, Quotient_DP[17:0], Sqrt_quotinent_S[3], 36'h000000000, Quotient_DP[20:0], Sqrt_quotinent_S[3], 33'h000000000, Quotient_DP[23:0], Sqrt_quotinent_S[3], 30'h00000000, Quotient_DP[26:0], Sqrt_quotinent_S[3], 27'h0000000, Quotient_DP[29:0], Sqrt_quotinent_S[3], 24'h000000, Quotient_DP[32:0], Sqrt_quotinent_S[3], 21'h000000, Quotient_DP[35:0], Sqrt_quotinent_S[3], 18'h00000, Quotient_DP[38:0], Sqrt_quotinent_S[3], 15'h0000, Quotient_DP[41:0], Sqrt_quotinent_S[3], 12'h000, Quotient_DP[44:0], Sqrt_quotinent_S[3], 9'h000, Quotient_DP[47:0], Sqrt_quotinent_S[3], 6'h00, Quotient_DP[50:0], Sqrt_quotinent_S[3], 3'h0, Quotient_DP[53:0], Sqrt_quotinent_S[3] }, { _116_, _115_, _114_, _113_, _112_, _111_, _110_, _109_, _108_, _107_, _106_, _105_, _104_, _103_, _102_, _101_, _100_, _099_ });
  function [1:0] _334_;
    input [1:0] a;
    input [17:0] b;
    input [8:0] s;
    casez (s) // synopsys parallel_case
      9'b????????1:
        _334_ = b[1:0];
      9'b???????1?:
        _334_ = b[3:2];
      9'b??????1??:
        _334_ = b[5:4];
      9'b?????1???:
        _334_ = b[7:6];
      9'b????1????:
        _334_ = b[9:8];
      9'b???1?????:
        _334_ = b[11:10];
      9'b??1??????:
        _334_ = b[13:12];
      9'b?1???????:
        _334_ = b[15:14];
      9'b1????????:
        _334_ = b[17:16];
      default:
        _334_ = a;
    endcase
  endfunction
  assign \Sqrt_DI[1]  = _334_(Mant_D_sqrt_Norm[51:50], { Mant_D_sqrt_Norm[45:44], Mant_D_sqrt_Norm[39:38], Mant_D_sqrt_Norm[33:32], Mant_D_sqrt_Norm[27:26], Mant_D_sqrt_Norm[21:20], Mant_D_sqrt_Norm[15:14], Mant_D_sqrt_Norm[9:8], Mant_D_sqrt_Norm[3:2], 2'h0 }, { _116_, _115_, _114_, _113_, _112_, _111_, _110_, _109_, _024_ });
  function [57:0] _335_;
    input [57:0] a;
    input [1043:0] b;
    input [17:0] s;
    casez (s) // synopsys parallel_case
      18'b?????????????????1:
        _335_ = b[57:0];
      18'b????????????????1?:
        _335_ = b[115:58];
      18'b???????????????1??:
        _335_ = b[173:116];
      18'b??????????????1???:
        _335_ = b[231:174];
      18'b?????????????1????:
        _335_ = b[289:232];
      18'b????????????1?????:
        _335_ = b[347:290];
      18'b???????????1??????:
        _335_ = b[405:348];
      18'b??????????1???????:
        _335_ = b[463:406];
      18'b?????????1????????:
        _335_ = b[521:464];
      18'b????????1?????????:
        _335_ = b[579:522];
      18'b???????1??????????:
        _335_ = b[637:580];
      18'b??????1???????????:
        _335_ = b[695:638];
      18'b?????1????????????:
        _335_ = b[753:696];
      18'b????1?????????????:
        _335_ = b[811:754];
      18'b???1??????????????:
        _335_ = b[869:812];
      18'b??1???????????????:
        _335_ = b[927:870];
      18'b?1????????????????:
        _335_ = b[985:928];
      18'b1?????????????????:
        _335_ = b[1043:986];
      default:
        _335_ = a;
    endcase
  endfunction
  assign Sqrt_Q0 = _335_(Q_sqrt_com_0, { _129_, _132_, _135_, _138_, _141_, _144_, _147_, _150_, _153_, _156_, _159_, _162_, _165_, _168_, _171_, _174_, _177_, _180_ }, { _116_, _115_, _114_, _113_, _112_, _111_, _110_, _109_, _108_, _107_, _106_, _105_, _104_, _103_, _102_, _101_, _100_, _099_ });
  function [57:0] _336_;
    input [57:0] a;
    input [1043:0] b;
    input [17:0] s;
    casez (s) // synopsys parallel_case
      18'b?????????????????1:
        _336_ = b[57:0];
      18'b????????????????1?:
        _336_ = b[115:58];
      18'b???????????????1??:
        _336_ = b[173:116];
      18'b??????????????1???:
        _336_ = b[231:174];
      18'b?????????????1????:
        _336_ = b[289:232];
      18'b????????????1?????:
        _336_ = b[347:290];
      18'b???????????1??????:
        _336_ = b[405:348];
      18'b??????????1???????:
        _336_ = b[463:406];
      18'b?????????1????????:
        _336_ = b[521:464];
      18'b????????1?????????:
        _336_ = b[579:522];
      18'b???????1??????????:
        _336_ = b[637:580];
      18'b??????1???????????:
        _336_ = b[695:638];
      18'b?????1????????????:
        _336_ = b[753:696];
      18'b????1?????????????:
        _336_ = b[811:754];
      18'b???1??????????????:
        _336_ = b[869:812];
      18'b??1???????????????:
        _336_ = b[927:870];
      18'b?1????????????????:
        _336_ = b[985:928];
      18'b1?????????????????:
        _336_ = b[1043:986];
      default:
        _336_ = a;
    endcase
  endfunction
  assign Q_sqrt0 = _336_(58'h000000000000000, { 55'h00000000000000, Quotient_DP[2:0], 52'h0000000000000, Quotient_DP[5:0], 49'h0000000000000, Quotient_DP[8:0], 46'h000000000000, Quotient_DP[11:0], 43'h00000000000, Quotient_DP[14:0], 40'h0000000000, Quotient_DP[17:0], 37'h0000000000, Quotient_DP[20:0], 34'h000000000, Quotient_DP[23:0], 31'h00000000, Quotient_DP[26:0], 28'h0000000, Quotient_DP[29:0], 25'h0000000, Quotient_DP[32:0], 22'h000000, Quotient_DP[35:0], 19'h00000, Quotient_DP[38:0], 16'h0000, Quotient_DP[41:0], 13'h0000, Quotient_DP[44:0], 10'h000, Quotient_DP[47:0], 7'h00, Quotient_DP[50:0], 4'h0, Quotient_DP[53:0] }, { _116_, _115_, _114_, _113_, _112_, _111_, _110_, _109_, _108_, _107_, _106_, _105_, _104_, _103_, _102_, _101_, _100_, _099_ });
  function [1:0] _337_;
    input [1:0] a;
    input [17:0] b;
    input [8:0] s;
    casez (s) // synopsys parallel_case
      9'b????????1:
        _337_ = b[1:0];
      9'b???????1?:
        _337_ = b[3:2];
      9'b??????1??:
        _337_ = b[5:4];
      9'b?????1???:
        _337_ = b[7:6];
      9'b????1????:
        _337_ = b[9:8];
      9'b???1?????:
        _337_ = b[11:10];
      9'b??1??????:
        _337_ = b[13:12];
      9'b?1???????:
        _337_ = b[15:14];
      9'b1????????:
        _337_ = b[17:16];
      default:
        _337_ = a;
    endcase
  endfunction
  assign \Sqrt_DI[0]  = _337_(Mant_D_sqrt_Norm[53:52], { Mant_D_sqrt_Norm[47:46], Mant_D_sqrt_Norm[41:40], Mant_D_sqrt_Norm[35:34], Mant_D_sqrt_Norm[29:28], Mant_D_sqrt_Norm[23:22], Mant_D_sqrt_Norm[17:16], Mant_D_sqrt_Norm[11:10], Mant_D_sqrt_Norm[5:4], 2'h0 }, { _116_, _115_, _114_, _113_, _112_, _111_, _110_, _109_, _024_ });
  function [57:0] _338_;
    input [57:0] a;
    input [231:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _338_ = b[57:0];
      4'b??1?:
        _338_ = b[115:58];
      4'b?1??:
        _338_ = b[173:116];
      4'b1???:
        _338_ = b[231:174];
      default:
        _338_ = a;
    endcase
  endfunction
  assign Q_sqrt_com_2 = _338_(58'hxxxxxxxxxxxxxxx, { 29'h00000000, _043_, _046_, 42'h00000000000, _053_, 45'h000000000000, _060_ }, { FP32_SO, FP64_SO, FP16_SO, FP16ALT_SO });
  function [57:0] _339_;
    input [57:0] a;
    input [231:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _339_ = b[57:0];
      4'b??1?:
        _339_ = b[115:58];
      4'b?1??:
        _339_ = b[173:116];
      4'b1???:
        _339_ = b[231:174];
      default:
        _339_ = a;
    endcase
  endfunction
  assign Q_sqrt_com_1 = _339_(58'hxxxxxxxxxxxxxxx, { 29'h00000000, _042_, _045_, 42'h00000000000, _052_, 45'h000000000000, _059_ }, { FP32_SO, FP64_SO, FP16_SO, FP16ALT_SO });
  function [57:0] _340_;
    input [57:0] a;
    input [231:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _340_ = b[57:0];
      4'b??1?:
        _340_ = b[115:58];
      4'b?1??:
        _340_ = b[173:116];
      4'b1???:
        _340_ = b[231:174];
      default:
        _340_ = a;
    endcase
  endfunction
  assign Q_sqrt_com_0 = _340_(58'hxxxxxxxxxxxxxxx, { 29'h00000000, _041_, _044_, 42'h00000000000, _051_, 45'h000000000000, _058_ }, { FP32_SO, FP64_SO, FP16_SO, FP16ALT_SO });
  function [3:0] _341_;
    input [3:0] a;
    input [15:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _341_ = b[3:0];
      4'b??1?:
        _341_ = b[7:4];
      4'b?1??:
        _341_ = b[11:8];
      4'b1???:
        _341_ = b[15:12];
      default:
        _341_ = a;
    endcase
  endfunction
  assign Sqrt_quotinent_S = _341_(4'hx, { _040_, _039_, _038_, _037_, \Iteration_cell_carry_D[0] , \Iteration_cell_carry_D[1] , \Iteration_cell_carry_D[2] , \Iteration_cell_carry_D[3] , _050_, _049_, _048_, _047_, _057_, _056_, _055_, _054_ }, { FP32_SO, FP64_SO, FP16_SO, FP16ALT_SO });
  assign _117_ = _062_ ? 1'h1 : 1'hx;
  assign _118_ = Special_case_SBI ? 1'h0 : 1'h1;
  assign _004_ = _026_ ? _118_ : _117_;
  assign _119_ = Final_state_S ? 1'h1 : 1'h0;
  assign _003_ = _026_ ? _118_ : _119_;
  assign _120_ = Fsm_enable_S ? _019_[5:0] : 6'h00;
  assign _000_ = _062_ ? 6'h00 : _120_;
  assign _121_ = Done_SO ? 1'h0 : 1'hx;
  assign _122_ = _028_ ? 1'h1 : _121_;
  assign _005_ = Kill_SI ? 1'h0 : _122_;
  assign _006_ = _028_ ? 1'h1 : 1'h0;
  assign _123_ = _027_ ? 1'h1 : _121_;
  assign _001_ = Kill_SI ? 1'h0 : _123_;
  assign _002_ = _027_ ? 1'h1 : 1'h0;
  assign _016_ = _066_ ? 6'h02 : 6'h03;
  function [5:0] _357_;
    input [5:0] a;
    input [11:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _357_ = b[5:0];
      2'b1?:
        _357_ = b[11:6];
      default:
        _357_ = a;
    endcase
  endfunction
  assign _015_ = _357_(6'h04, 12'h083, { _066_, _070_ });
  function [5:0] _358_;
    input [5:0] a;
    input [95:0] b;
    input [15:0] s;
    casez (s) // synopsys parallel_case
      16'b???????????????1:
        _358_ = b[5:0];
      16'b??????????????1?:
        _358_ = b[11:6];
      16'b?????????????1??:
        _358_ = b[17:12];
      16'b????????????1???:
        _358_ = b[23:18];
      16'b???????????1????:
        _358_ = b[29:24];
      16'b??????????1?????:
        _358_ = b[35:30];
      16'b?????????1??????:
        _358_ = b[41:36];
      16'b????????1???????:
        _358_ = b[47:42];
      16'b???????1????????:
        _358_ = b[53:48];
      16'b??????1?????????:
        _358_ = b[59:54];
      16'b?????1??????????:
        _358_ = b[65:60];
      16'b????1???????????:
        _358_ = b[71:66];
      16'b???1????????????:
        _358_ = b[77:72];
      16'b??1?????????????:
        _358_ = b[83:78];
      16'b?1??????????????:
        _358_ = b[89:84];
      16'b1???????????????:
        _358_ = b[95:90];
      default:
        _358_ = a;
    endcase
  endfunction
  assign _013_ = _358_(6'h12, 96'h08310518720928b30d38f411, { _066_, _070_, _072_, _074_, _076_, _078_, _080_, _082_, _084_, _086_, _088_, _090_, _092_, _094_, _096_, _125_ });
  assign _125_ = | { _124_[2], _097_ };
  assign _124_[2] = Precision_ctl_S == 6'h35;
  assign _072_ = | _071_;
  assign _071_[0] = Precision_ctl_S == 6'h0e;
  assign _070_ = | { _067_, _069_[0] };
  assign _067_[1] = Precision_ctl_S == 6'h09;
  assign _067_[0] = Precision_ctl_S == 6'h0a;
  assign _069_[0] = Precision_ctl_S == 6'h0b;
  assign _066_ = | { _063_, _065_[0] };
  assign _063_[1] = Precision_ctl_S == 6'h06;
  assign _063_[0] = Precision_ctl_S == 6'h07;
  assign _065_[0] = Precision_ctl_S == 6'h08;
  assign FP64_SO = Format_sel_S == 2'h1;
  function [5:0] _372_;
    input [5:0] a;
    input [35:0] b;
    input [5:0] s;
    casez (s) // synopsys parallel_case
      6'b?????1:
        _372_ = b[5:0];
      6'b????1?:
        _372_ = b[11:6];
      6'b???1??:
        _372_ = b[17:12];
      6'b??1???:
        _372_ = b[23:18];
      6'b?1????:
        _372_ = b[29:24];
      6'b1?????:
        _372_ = b[35:30];
      default:
        _372_ = a;
    endcase
  endfunction
  assign _011_ = _372_(6'h08, 36'h083105187, { _066_, _070_, _072_, _074_, _076_, _078_ });
  assign _078_ = | _077_;
  assign _077_[2] = Precision_ctl_S == 6'h15;
  assign _077_[1] = Precision_ctl_S == 6'h16;
  assign _077_[0] = Precision_ctl_S == 6'h17;
  assign _076_ = | _075_;
  assign _075_[2] = Precision_ctl_S == 6'h12;
  assign _075_[1] = Precision_ctl_S == 6'h13;
  assign _075_[0] = Precision_ctl_S == 6'h14;
  assign _074_ = | _073_;
  assign _073_[2] = Precision_ctl_S == 6'h0f;
  assign _073_[1] = Precision_ctl_S == 6'h10;
  assign _073_[0] = Precision_ctl_S == 6'h11;
  assign _071_[2] = Precision_ctl_S == 6'h0c;
  assign _071_[1] = Precision_ctl_S == 6'h0d;
  assign FP32_SO = ! Format_sel_S;
  function [5:0] _388_;
    input [5:0] a;
    input [23:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _388_ = b[5:0];
      4'b??1?:
        _388_ = b[11:6];
      4'b?1??:
        _388_ = b[17:12];
      4'b1???:
        _388_ = b[23:18];
      default:
        _388_ = a;
    endcase
  endfunction
  assign State_ctl_S = _388_(6'hxx, { _011_, _013_, _015_, _016_ }, { FP32_SO, FP64_SO, FP16_SO, FP16ALT_SO });
  assign _009_ = FP16_SO ? { _034_, 42'h00000000000 } : { _035_, 45'h000000000000 };
  assign _007_ = FP64_SO ? _033_ : _009_;
  assign Denominator_se_DB = FP32_SO ? { _032_, 29'h00000000 } : _007_;
  assign _126_ = | Crtl_cnt_S;
  assign _129_ = Quotient_DP[0] ? Q_sqrt_com_0 : { 55'h00000000000000, Quotient_DP[2:1], 1'h0 };
  assign _130_ = Sqrt_quotinent_S[3] ? Q_sqrt_com_1 : { 54'h00000000000000, Quotient_DP[2:0], 1'h0 };
  assign _131_ = Sqrt_quotinent_S[2] ? Q_sqrt_com_2 : { 53'h00000000000000, Quotient_DP[2:0], Sqrt_quotinent_S[3], 1'h0 };
  assign _132_ = Quotient_DP[0] ? Q_sqrt_com_0 : { 52'h0000000000000, Quotient_DP[5:1], 1'h0 };
  assign _133_ = Sqrt_quotinent_S[3] ? Q_sqrt_com_1 : { 51'h0000000000000, Quotient_DP[5:0], 1'h0 };
  assign _134_ = Sqrt_quotinent_S[2] ? Q_sqrt_com_2 : { 50'h0000000000000, Quotient_DP[5:0], Sqrt_quotinent_S[3], 1'h0 };
  assign _135_ = Quotient_DP[0] ? Q_sqrt_com_0 : { 49'h0000000000000, Quotient_DP[8:1], 1'h0 };
  assign _136_ = Sqrt_quotinent_S[3] ? Q_sqrt_com_1 : { 48'h000000000000, Quotient_DP[8:0], 1'h0 };
  assign _137_ = Sqrt_quotinent_S[2] ? Q_sqrt_com_2 : { 47'h000000000000, Quotient_DP[8:0], Sqrt_quotinent_S[3], 1'h0 };
  assign _138_ = Quotient_DP[0] ? Q_sqrt_com_0 : { 46'h000000000000, Quotient_DP[11:1], 1'h0 };
  assign _139_ = Sqrt_quotinent_S[3] ? Q_sqrt_com_1 : { 45'h000000000000, Quotient_DP[11:0], 1'h0 };
  assign _140_ = Sqrt_quotinent_S[2] ? Q_sqrt_com_2 : { 44'h00000000000, Quotient_DP[11:0], Sqrt_quotinent_S[3], 1'h0 };
  assign _141_ = Quotient_DP[0] ? Q_sqrt_com_0 : { 43'h00000000000, Quotient_DP[14:1], 1'h0 };
  assign _142_ = Sqrt_quotinent_S[3] ? Q_sqrt_com_1 : { 42'h00000000000, Quotient_DP[14:0], 1'h0 };
  assign _143_ = Sqrt_quotinent_S[2] ? Q_sqrt_com_2 : { 41'h00000000000, Quotient_DP[14:0], Sqrt_quotinent_S[3], 1'h0 };
  assign _144_ = Quotient_DP[0] ? Q_sqrt_com_0 : { 40'h0000000000, Quotient_DP[17:1], 1'h0 };
  assign _145_ = Sqrt_quotinent_S[3] ? Q_sqrt_com_1 : { 39'h0000000000, Quotient_DP[17:0], 1'h0 };
  assign _146_ = Sqrt_quotinent_S[2] ? Q_sqrt_com_2 : { 38'h0000000000, Quotient_DP[17:0], Sqrt_quotinent_S[3], 1'h0 };
  assign _147_ = Quotient_DP[0] ? Q_sqrt_com_0 : { 37'h0000000000, Quotient_DP[20:1], 1'h0 };
  assign _148_ = Sqrt_quotinent_S[3] ? Q_sqrt_com_1 : { 36'h000000000, Quotient_DP[20:0], 1'h0 };
  assign _149_ = Sqrt_quotinent_S[2] ? Q_sqrt_com_2 : { 35'h000000000, Quotient_DP[20:0], Sqrt_quotinent_S[3], 1'h0 };
  assign _150_ = Quotient_DP[0] ? Q_sqrt_com_0 : { 34'h000000000, Quotient_DP[23:1], 1'h0 };
  assign _151_ = Sqrt_quotinent_S[3] ? Q_sqrt_com_1 : { 33'h000000000, Quotient_DP[23:0], 1'h0 };
  assign _152_ = Sqrt_quotinent_S[2] ? Q_sqrt_com_2 : { 32'h00000000, Quotient_DP[23:0], Sqrt_quotinent_S[3], 1'h0 };
  assign _153_ = Quotient_DP[0] ? Q_sqrt_com_0 : { 31'h00000000, Quotient_DP[26:1], 1'h0 };
  assign _154_ = Sqrt_quotinent_S[3] ? Q_sqrt_com_1 : { 30'h00000000, Quotient_DP[26:0], 1'h0 };
  assign _155_ = Sqrt_quotinent_S[2] ? Q_sqrt_com_2 : { 29'h00000000, Quotient_DP[26:0], Sqrt_quotinent_S[3], 1'h0 };
  assign _156_ = Quotient_DP[0] ? Q_sqrt_com_0 : { 28'h0000000, Quotient_DP[29:1], 1'h0 };
  assign _157_ = Sqrt_quotinent_S[3] ? Q_sqrt_com_1 : { 27'h0000000, Quotient_DP[29:0], 1'h0 };
  assign _158_ = Sqrt_quotinent_S[2] ? Q_sqrt_com_2 : { 26'h0000000, Quotient_DP[29:0], Sqrt_quotinent_S[3], 1'h0 };
  assign _159_ = Quotient_DP[0] ? Q_sqrt_com_0 : { 25'h0000000, Quotient_DP[32:1], 1'h0 };
  assign _160_ = Sqrt_quotinent_S[3] ? Q_sqrt_com_1 : { 24'h000000, Quotient_DP[32:0], 1'h0 };
  assign _161_ = Sqrt_quotinent_S[2] ? Q_sqrt_com_2 : { 23'h000000, Quotient_DP[32:0], Sqrt_quotinent_S[3], 1'h0 };
  assign _162_ = Quotient_DP[0] ? Q_sqrt_com_0 : { 22'h000000, Quotient_DP[35:1], 1'h0 };
  assign _163_ = Sqrt_quotinent_S[3] ? Q_sqrt_com_1 : { 21'h000000, Quotient_DP[35:0], 1'h0 };
  assign _164_ = Sqrt_quotinent_S[2] ? Q_sqrt_com_2 : { 20'h00000, Quotient_DP[35:0], Sqrt_quotinent_S[3], 1'h0 };
  assign _165_ = Quotient_DP[0] ? Q_sqrt_com_0 : { 19'h00000, Quotient_DP[38:1], 1'h0 };
  assign _166_ = Sqrt_quotinent_S[3] ? Q_sqrt_com_1 : { 18'h00000, Quotient_DP[38:0], 1'h0 };
  assign _167_ = Sqrt_quotinent_S[2] ? Q_sqrt_com_2 : { 17'h00000, Quotient_DP[38:0], Sqrt_quotinent_S[3], 1'h0 };
  assign _168_ = Quotient_DP[0] ? Q_sqrt_com_0 : { 16'h0000, Quotient_DP[41:1], 1'h0 };
  assign _169_ = Sqrt_quotinent_S[3] ? Q_sqrt_com_1 : { 15'h0000, Quotient_DP[41:0], 1'h0 };
  assign _170_ = Sqrt_quotinent_S[2] ? Q_sqrt_com_2 : { 14'h0000, Quotient_DP[41:0], Sqrt_quotinent_S[3], 1'h0 };
  assign _171_ = Quotient_DP[0] ? Q_sqrt_com_0 : { 13'h0000, Quotient_DP[44:1], 1'h0 };
  assign _172_ = Sqrt_quotinent_S[3] ? Q_sqrt_com_1 : { 12'h000, Quotient_DP[44:0], 1'h0 };
  assign _173_ = Sqrt_quotinent_S[2] ? Q_sqrt_com_2 : { 11'h000, Quotient_DP[44:0], Sqrt_quotinent_S[3], 1'h0 };
  assign _174_ = Quotient_DP[0] ? Q_sqrt_com_0 : { 10'h000, Quotient_DP[47:1], 1'h0 };
  assign _175_ = Sqrt_quotinent_S[3] ? Q_sqrt_com_1 : { 9'h000, Quotient_DP[47:0], 1'h0 };
  assign _176_ = Sqrt_quotinent_S[2] ? Q_sqrt_com_2 : { 8'h00, Quotient_DP[47:0], Sqrt_quotinent_S[3], 1'h0 };
  assign _177_ = Quotient_DP[0] ? Q_sqrt_com_0 : { 7'h00, Quotient_DP[50:1], 1'h0 };
  assign _178_ = Sqrt_quotinent_S[3] ? Q_sqrt_com_1 : { 6'h00, Quotient_DP[50:0], 1'h0 };
  assign _179_ = Sqrt_quotinent_S[2] ? Q_sqrt_com_2 : { 5'h00, Quotient_DP[50:0], Sqrt_quotinent_S[3], 1'h0 };
  assign _180_ = Quotient_DP[0] ? Q_sqrt_com_0 : { 4'h0, Quotient_DP[53:1], 1'h0 };
  assign _181_ = Sqrt_quotinent_S[3] ? Q_sqrt_com_1 : { 3'h0, Quotient_DP[53:0], 1'h0 };
  assign _182_ = Sqrt_quotinent_S[2] ? Q_sqrt_com_2 : { 2'h0, Quotient_DP[53:0], Sqrt_quotinent_S[3], 1'h0 };
  assign _127_ = Sqrt_quotinent_S[3] ? Q_sqrt_com_1 : 58'h000000000000000;
  assign _128_ = Sqrt_quotinent_S[2] ? Q_sqrt_com_2 : { 56'h00000000000000, Sqrt_quotinent_S[3], 1'h0 };
  assign Sqrt_R0 = Sqrt_start_dly_S ? 58'h000000000000000 : Partial_remainder_DP;
  assign Denominator_se_format_DB[32] = FP32_SO ? 1'h1 : Denominator_se_DB[28];
  assign Denominator_se_format_DB[45] = FP16_SO ? 1'h1 : Denominator_se_DB[41];
  assign Denominator_se_format_DB[48] = FP16ALT_SO ? 1'h1 : Denominator_se_DB[44];
  assign _183_ = FP32_SO ? 1'h1 : Numerator_DI[28];
  assign _184_ = FP16_SO ? 1'h1 : Numerator_DI[41];
  assign _185_ = FP16ALT_SO ? 1'h1 : Numerator_DI[44];
  assign _186_ = FP32_SO ? Quotient_DP[0] : Partial_remainder_DP[31];
  assign _187_ = FP16_SO ? Quotient_DP[0] : Partial_remainder_DP[44];
  assign _188_ = FP16ALT_SO ? Quotient_DP[0] : Partial_remainder_DP[47];
  assign First_iteration_cell_div_a_D = Div_start_dly_S ? { 1'h0, Numerator_DI[52:45], _185_, Numerator_DI[43:42], _184_, Numerator_DI[40:29], _183_, Numerator_DI[27:0], FP64_SO, 3'h0 } : { Partial_remainder_DP[56:48], _188_, Partial_remainder_DP[46:45], _187_, Partial_remainder_DP[43:32], _186_, Partial_remainder_DP[30:3], _025_, 3'h0 };
  assign { _189_[31:1], Sel_b_for_first_S } = Div_start_dly_S ? 32'd1 : { 31'h00000000, Quotient_DP[0] };
  assign First_iteration_cell_div_b_D = Sel_b_for_first_S ? { Denominator_se_DB[53:45], Denominator_se_format_DB[48], Denominator_se_DB[43:42], Denominator_se_format_DB[45], Denominator_se_DB[40:29], Denominator_se_format_DB[32], Denominator_se_DB[27:0], FP64_SO, 3'h0 } : { 1'h0, Denominator_DI, 4'h0 };
  assign \Iteration_cell_a_BMASK_D[0]  = Sqrt_enable_SO ? Sqrt_R0 : First_iteration_cell_div_a_D;
  assign \Iteration_cell_b_BMASK_D[0]  = Sqrt_enable_SO ? Sqrt_Q0 : First_iteration_cell_div_b_D;
  assign Sec_iteration_cell_div_a_D[32] = FP32_SO ? Sel_b_for_sec_S : \Iteration_cell_sum_AMASK_D[0] [31];
  assign Sec_iteration_cell_div_a_D[45] = FP16_SO ? Sel_b_for_sec_S : \Iteration_cell_sum_AMASK_D[0] [44];
  assign Sec_iteration_cell_div_a_D[48] = FP16ALT_SO ? Sel_b_for_sec_S : \Iteration_cell_sum_AMASK_D[0] [47];
  assign Sec_iteration_cell_div_b_D = \Iteration_cell_sum_AMASK_D[0] [57] ? { 1'h0, Denominator_DI, 4'h0 } : { Denominator_se_DB[53:45], Denominator_se_format_DB[48], Denominator_se_DB[43:42], Denominator_se_format_DB[45], Denominator_se_DB[40:29], Denominator_se_format_DB[32], Denominator_se_DB[27:0], FP64_SO, 3'h0 };
  assign \Iteration_cell_a_BMASK_D[1]  = Sqrt_enable_SO ? { \Iteration_cell_sum_AMASK_D[0] [57], \Iteration_cell_sum_AMASK_D[0] [54:0], \Sqrt_DO[0]  } : { \Iteration_cell_sum_AMASK_D[0] [56:48], Sec_iteration_cell_div_a_D[48], \Iteration_cell_sum_AMASK_D[0] [46:45], Sec_iteration_cell_div_a_D[45], \Iteration_cell_sum_AMASK_D[0] [43:32], Sec_iteration_cell_div_a_D[32], \Iteration_cell_sum_AMASK_D[0] [30:3], Sec_iteration_cell_div_a_D[3], 3'h0 };
  assign \Iteration_cell_b_BMASK_D[1]  = Sqrt_enable_SO ? Sqrt_Q1 : Sec_iteration_cell_div_b_D;
  assign Thi_iteration_cell_div_a_D[32] = FP32_SO ? Sel_b_for_thi_S : \Iteration_cell_sum_AMASK_D[1] [31];
  assign Thi_iteration_cell_div_a_D[45] = FP16_SO ? Sel_b_for_thi_S : \Iteration_cell_sum_AMASK_D[1] [44];
  assign Thi_iteration_cell_div_a_D[48] = FP16ALT_SO ? Sel_b_for_thi_S : \Iteration_cell_sum_AMASK_D[1] [47];
  assign Thi_iteration_cell_div_b_D = \Iteration_cell_sum_AMASK_D[1] [57] ? { 1'h0, Denominator_DI, 4'h0 } : { Denominator_se_DB[53:45], Denominator_se_format_DB[48], Denominator_se_DB[43:42], Denominator_se_format_DB[45], Denominator_se_DB[40:29], Denominator_se_format_DB[32], Denominator_se_DB[27:0], FP64_SO, 3'h0 };
  assign \Iteration_cell_a_BMASK_D[2]  = Sqrt_enable_SO ? { \Iteration_cell_sum_AMASK_D[1] [57], \Iteration_cell_sum_AMASK_D[1] [54:0], \Sqrt_DO[1]  } : { \Iteration_cell_sum_AMASK_D[1] [56:48], Thi_iteration_cell_div_a_D[48], \Iteration_cell_sum_AMASK_D[1] [46:45], Thi_iteration_cell_div_a_D[45], \Iteration_cell_sum_AMASK_D[1] [43:32], Thi_iteration_cell_div_a_D[32], \Iteration_cell_sum_AMASK_D[1] [30:3], Thi_iteration_cell_div_a_D[3], 3'h0 };
  assign \Iteration_cell_b_BMASK_D[2]  = Sqrt_enable_SO ? Sqrt_Q2 : Thi_iteration_cell_div_b_D;
  assign _190_ = Sqrt_enable_SO ? { \Iteration_cell_sum_AMASK_D[2] [57], \Iteration_cell_sum_AMASK_D[2] [54:0], \Sqrt_DO[2]  } : \Iteration_cell_sum_AMASK_D[2] ;
  assign _191_ = Sqrt_enable_SO ? { Quotient_DP[53:0], Sqrt_quotinent_S[3:1] } : { Quotient_DP[53:0], \Iteration_cell_carry_D[0] , \Iteration_cell_carry_D[1] , \Iteration_cell_carry_D[2]  };
  assign { _192_[13], Exp_add_a_D } = Sqrt_start_dly_S ? { Exp_num_DI[11], Exp_num_DI[11], Exp_num_DI[11], Exp_num_DI[11:1] } : { Exp_num_DI[11], Exp_num_DI[11], Exp_num_DI };
  assign { _193_[13], Exp_add_b_D } = Sqrt_start_dly_S ? { 13'h0000, Exp_num_DI[0] } : { _031_, _031_, _030_ };
  assign { _194_[31:13], Exp_add_c_D } = Div_start_dly_S ? C_BIAS_AONE : C_HALF_BIAS;
  assign Mant_D_sqrt_Norm = Exp_num_DI[0] ? { 1'h0, Numerator_DI } : { Numerator_DI, 1'h0 };
  \$paramod\iteration_div_sqrt_mvp\WIDTH=s32'00000000000000000000000000111010  \genblk4[0].iteration_div_sqrt  (
    .A_DI(\Iteration_cell_a_BMASK_D[0] ),
    .B_DI(\Iteration_cell_b_BMASK_D[0] ),
    .Carry_out_DO(\Iteration_cell_carry_D[0] ),
    .D_DI(\Sqrt_DI[0] ),
    .D_DO(\Sqrt_DO[0] ),
    .Div_enable_SI(Div_enable_SO),
    .Div_start_dly_SI(Div_start_dly_S),
    .Sqrt_enable_SI(Sqrt_enable_SO),
    .Sum_DO(\Iteration_cell_sum_AMASK_D[0] )
  );
  \$paramod\iteration_div_sqrt_mvp\WIDTH=s32'00000000000000000000000000111010  \genblk4[1].iteration_div_sqrt  (
    .A_DI(\Iteration_cell_a_BMASK_D[1] ),
    .B_DI(\Iteration_cell_b_BMASK_D[1] ),
    .Carry_out_DO(\Iteration_cell_carry_D[1] ),
    .D_DI(\Sqrt_DI[1] ),
    .D_DO(\Sqrt_DO[1] ),
    .Div_enable_SI(Div_enable_SO),
    .Div_start_dly_SI(Div_start_dly_S),
    .Sqrt_enable_SI(Sqrt_enable_SO),
    .Sum_DO(\Iteration_cell_sum_AMASK_D[1] )
  );
  \$paramod\iteration_div_sqrt_mvp\WIDTH=s32'00000000000000000000000000111010  \genblk4[2].iteration_div_sqrt  (
    .A_DI(\Iteration_cell_a_BMASK_D[2] ),
    .B_DI(\Iteration_cell_b_BMASK_D[2] ),
    .Carry_out_DO(\Iteration_cell_carry_D[2] ),
    .D_DI(\Sqrt_DI[2] ),
    .D_DO(\Sqrt_DO[2] ),
    .Div_enable_SI(Div_enable_SO),
    .Div_start_dly_SI(Div_start_dly_S),
    .Sqrt_enable_SI(Sqrt_enable_SO),
    .Sum_DO(\Iteration_cell_sum_AMASK_D[2] )
  );
  assign _065_[2:1] = _063_;
  assign _069_[2:1] = _067_;
  assign _124_[1:0] = { _097_[0], _097_[1] };
  assign _189_[0] = Sel_b_for_first_S;
  assign _192_[12:0] = Exp_add_a_D;
  assign _193_[12:0] = Exp_add_b_D;
  assign _194_[12:0] = Exp_add_c_D;
  assign Denominator_se_D = { 1'h0, Denominator_DI };
  assign { Denominator_se_format_DB[57:49], Denominator_se_format_DB[47:46], Denominator_se_format_DB[44:33], Denominator_se_format_DB[31:0] } = { Denominator_se_DB[53:45], Denominator_se_DB[43:42], Denominator_se_DB[40:29], Denominator_se_DB[27:0], FP64_SO, 3'h0 };
  assign \Div_enable_SI[0]  = Div_enable_SO;
  assign \Div_enable_SI[1]  = Div_enable_SO;
  assign \Div_enable_SI[2]  = Div_enable_SO;
  assign \Div_start_dly_SI[0]  = Div_start_dly_S;
  assign \Div_start_dly_SI[1]  = Div_start_dly_S;
  assign \Div_start_dly_SI[2]  = Div_start_dly_S;
  assign Div_start_dly_SO = Div_start_dly_S;
  assign Exp_result_prenorm_DO = Exp_result_prenorm_DP;
  assign \Iteration_cell_a_D[0]  = \Iteration_cell_a_BMASK_D[0] ;
  assign \Iteration_cell_a_D[1]  = \Iteration_cell_a_BMASK_D[1] ;
  assign \Iteration_cell_a_D[2]  = \Iteration_cell_a_BMASK_D[2] ;
  assign \Iteration_cell_b_D[0]  = \Iteration_cell_b_BMASK_D[0] ;
  assign \Iteration_cell_b_D[1]  = \Iteration_cell_b_BMASK_D[1] ;
  assign \Iteration_cell_b_D[2]  = \Iteration_cell_b_BMASK_D[2] ;
  assign \Iteration_cell_sum_D[0]  = \Iteration_cell_sum_AMASK_D[0] ;
  assign \Iteration_cell_sum_D[1]  = \Iteration_cell_sum_AMASK_D[1] ;
  assign \Iteration_cell_sum_D[2]  = \Iteration_cell_sum_AMASK_D[2] ;
  assign Mask_bits_ctl_S = 58'h3ffffffffffffff;
  assign Numerator_se_D = { 1'h0, Numerator_DI };
  assign Qcnt_four_0 = { 1'h0, Sqrt_quotinent_S[3:1] };
  assign Qcnt_four_1 = { Quotient_DP[3:0], Sqrt_quotinent_S[3:1] };
  assign Qcnt_four_10 = { Quotient_DP[39:0], Sqrt_quotinent_S[3:1] };
  assign Qcnt_four_11 = { Quotient_DP[43:0], Sqrt_quotinent_S[3:1] };
  assign Qcnt_four_12 = { Quotient_DP[47:0], Sqrt_quotinent_S[3:1] };
  assign Qcnt_four_13 = { Quotient_DP[51:0], Sqrt_quotinent_S[3:1] };
  assign Qcnt_four_14 = { Quotient_DP[55:0], Sqrt_quotinent_S[3:1] };
  assign Qcnt_four_2 = { Quotient_DP[7:0], Sqrt_quotinent_S[3:1] };
  assign Qcnt_four_3 = { Quotient_DP[11:0], Sqrt_quotinent_S[3:1] };
  assign Qcnt_four_4 = { Quotient_DP[15:0], Sqrt_quotinent_S[3:1] };
  assign Qcnt_four_5 = { Quotient_DP[19:0], Sqrt_quotinent_S[3:1] };
  assign Qcnt_four_6 = { Quotient_DP[23:0], Sqrt_quotinent_S[3:1] };
  assign Qcnt_four_7 = { Quotient_DP[27:0], Sqrt_quotinent_S[3:1] };
  assign Qcnt_four_8 = { Quotient_DP[31:0], Sqrt_quotinent_S[3:1] };
  assign Qcnt_four_9 = { Quotient_DP[35:0], Sqrt_quotinent_S[3:1] };
  assign Qcnt_one_0 = 1'h0;
  assign Qcnt_one_1 = Quotient_DP[0];
  assign Qcnt_one_10 = Quotient_DP[9:0];
  assign Qcnt_one_11 = Quotient_DP[10:0];
  assign Qcnt_one_12 = Quotient_DP[11:0];
  assign Qcnt_one_13 = Quotient_DP[12:0];
  assign Qcnt_one_14 = Quotient_DP[13:0];
  assign Qcnt_one_15 = Quotient_DP[14:0];
  assign Qcnt_one_16 = Quotient_DP[15:0];
  assign Qcnt_one_17 = Quotient_DP[16:0];
  assign Qcnt_one_18 = Quotient_DP[17:0];
  assign Qcnt_one_19 = Quotient_DP[18:0];
  assign Qcnt_one_2 = Quotient_DP[1:0];
  assign Qcnt_one_20 = Quotient_DP[19:0];
  assign Qcnt_one_21 = Quotient_DP[20:0];
  assign Qcnt_one_22 = Quotient_DP[21:0];
  assign Qcnt_one_23 = Quotient_DP[22:0];
  assign Qcnt_one_24 = Quotient_DP[23:0];
  assign Qcnt_one_25 = Quotient_DP[24:0];
  assign Qcnt_one_26 = Quotient_DP[25:0];
  assign Qcnt_one_27 = Quotient_DP[26:0];
  assign Qcnt_one_28 = Quotient_DP[27:0];
  assign Qcnt_one_29 = Quotient_DP[28:0];
  assign Qcnt_one_3 = Quotient_DP[2:0];
  assign Qcnt_one_30 = Quotient_DP[29:0];
  assign Qcnt_one_31 = Quotient_DP[30:0];
  assign Qcnt_one_32 = Quotient_DP[31:0];
  assign Qcnt_one_33 = Quotient_DP[32:0];
  assign Qcnt_one_34 = Quotient_DP[33:0];
  assign Qcnt_one_35 = Quotient_DP[34:0];
  assign Qcnt_one_36 = Quotient_DP[35:0];
  assign Qcnt_one_37 = Quotient_DP[36:0];
  assign Qcnt_one_38 = Quotient_DP[37:0];
  assign Qcnt_one_39 = Quotient_DP[38:0];
  assign Qcnt_one_4 = Quotient_DP[3:0];
  assign Qcnt_one_40 = Quotient_DP[39:0];
  assign Qcnt_one_41 = Quotient_DP[40:0];
  assign Qcnt_one_42 = Quotient_DP[41:0];
  assign Qcnt_one_43 = Quotient_DP[42:0];
  assign Qcnt_one_44 = Quotient_DP[43:0];
  assign Qcnt_one_45 = Quotient_DP[44:0];
  assign Qcnt_one_46 = Quotient_DP[45:0];
  assign Qcnt_one_47 = Quotient_DP[46:0];
  assign Qcnt_one_48 = Quotient_DP[47:0];
  assign Qcnt_one_49 = Quotient_DP[48:0];
  assign Qcnt_one_5 = Quotient_DP[4:0];
  assign Qcnt_one_50 = Quotient_DP[49:0];
  assign Qcnt_one_51 = Quotient_DP[50:0];
  assign Qcnt_one_52 = Quotient_DP[51:0];
  assign Qcnt_one_53 = Quotient_DP[52:0];
  assign Qcnt_one_54 = Quotient_DP[53:0];
  assign Qcnt_one_55 = Quotient_DP[54:0];
  assign Qcnt_one_56 = Quotient_DP[55:0];
  assign Qcnt_one_57 = Quotient_DP;
  assign Qcnt_one_6 = Quotient_DP[5:0];
  assign Qcnt_one_7 = Quotient_DP[6:0];
  assign Qcnt_one_8 = Quotient_DP[7:0];
  assign Qcnt_one_9 = Quotient_DP[8:0];
  assign Qcnt_three_0 = { 1'h0, Sqrt_quotinent_S[3:2] };
  assign Qcnt_three_1 = { Quotient_DP[2:0], Sqrt_quotinent_S[3:2] };
  assign Qcnt_three_10 = { Quotient_DP[29:0], Sqrt_quotinent_S[3:2] };
  assign Qcnt_three_11 = { Quotient_DP[32:0], Sqrt_quotinent_S[3:2] };
  assign Qcnt_three_12 = { Quotient_DP[35:0], Sqrt_quotinent_S[3:2] };
  assign Qcnt_three_13 = { Quotient_DP[38:0], Sqrt_quotinent_S[3:2] };
  assign Qcnt_three_14 = { Quotient_DP[41:0], Sqrt_quotinent_S[3:2] };
  assign Qcnt_three_15 = { Quotient_DP[44:0], Sqrt_quotinent_S[3:2] };
  assign Qcnt_three_16 = { Quotient_DP[47:0], Sqrt_quotinent_S[3:2] };
  assign Qcnt_three_17 = { Quotient_DP[50:0], Sqrt_quotinent_S[3:2] };
  assign Qcnt_three_18 = { Quotient_DP[53:0], Sqrt_quotinent_S[3:2] };
  assign Qcnt_three_19 = { Quotient_DP, Sqrt_quotinent_S[3:2] };
  assign Qcnt_three_2 = { Quotient_DP[5:0], Sqrt_quotinent_S[3:2] };
  assign Qcnt_three_3 = { Quotient_DP[8:0], Sqrt_quotinent_S[3:2] };
  assign Qcnt_three_4 = { Quotient_DP[11:0], Sqrt_quotinent_S[3:2] };
  assign Qcnt_three_5 = { Quotient_DP[14:0], Sqrt_quotinent_S[3:2] };
  assign Qcnt_three_6 = { Quotient_DP[17:0], Sqrt_quotinent_S[3:2] };
  assign Qcnt_three_7 = { Quotient_DP[20:0], Sqrt_quotinent_S[3:2] };
  assign Qcnt_three_8 = { Quotient_DP[23:0], Sqrt_quotinent_S[3:2] };
  assign Qcnt_three_9 = { Quotient_DP[26:0], Sqrt_quotinent_S[3:2] };
  assign Qcnt_two_0 = { 1'h0, Sqrt_quotinent_S[3] };
  assign Qcnt_two_1 = { Quotient_DP[1:0], Sqrt_quotinent_S[3] };
  assign Qcnt_two_10 = { Quotient_DP[19:0], Sqrt_quotinent_S[3] };
  assign Qcnt_two_11 = { Quotient_DP[21:0], Sqrt_quotinent_S[3] };
  assign Qcnt_two_12 = { Quotient_DP[23:0], Sqrt_quotinent_S[3] };
  assign Qcnt_two_13 = { Quotient_DP[25:0], Sqrt_quotinent_S[3] };
  assign Qcnt_two_14 = { Quotient_DP[27:0], Sqrt_quotinent_S[3] };
  assign Qcnt_two_15 = { Quotient_DP[29:0], Sqrt_quotinent_S[3] };
  assign Qcnt_two_16 = { Quotient_DP[31:0], Sqrt_quotinent_S[3] };
  assign Qcnt_two_17 = { Quotient_DP[33:0], Sqrt_quotinent_S[3] };
  assign Qcnt_two_18 = { Quotient_DP[35:0], Sqrt_quotinent_S[3] };
  assign Qcnt_two_19 = { Quotient_DP[37:0], Sqrt_quotinent_S[3] };
  assign Qcnt_two_2 = { Quotient_DP[3:0], Sqrt_quotinent_S[3] };
  assign Qcnt_two_20 = { Quotient_DP[39:0], Sqrt_quotinent_S[3] };
  assign Qcnt_two_21 = { Quotient_DP[41:0], Sqrt_quotinent_S[3] };
  assign Qcnt_two_22 = { Quotient_DP[43:0], Sqrt_quotinent_S[3] };
  assign Qcnt_two_23 = { Quotient_DP[45:0], Sqrt_quotinent_S[3] };
  assign Qcnt_two_24 = { Quotient_DP[47:0], Sqrt_quotinent_S[3] };
  assign Qcnt_two_25 = { Quotient_DP[49:0], Sqrt_quotinent_S[3] };
  assign Qcnt_two_26 = { Quotient_DP[51:0], Sqrt_quotinent_S[3] };
  assign Qcnt_two_27 = { Quotient_DP[53:0], Sqrt_quotinent_S[3] };
  assign Qcnt_two_28 = { Quotient_DP[55:0], Sqrt_quotinent_S[3] };
  assign Qcnt_two_3 = { Quotient_DP[5:0], Sqrt_quotinent_S[3] };
  assign Qcnt_two_4 = { Quotient_DP[7:0], Sqrt_quotinent_S[3] };
  assign Qcnt_two_5 = { Quotient_DP[9:0], Sqrt_quotinent_S[3] };
  assign Qcnt_two_6 = { Quotient_DP[11:0], Sqrt_quotinent_S[3] };
  assign Qcnt_two_7 = { Quotient_DP[13:0], Sqrt_quotinent_S[3] };
  assign Qcnt_two_8 = { Quotient_DP[15:0], Sqrt_quotinent_S[3] };
  assign Qcnt_two_9 = { Quotient_DP[17:0], Sqrt_quotinent_S[3] };
  assign { Sec_iteration_cell_div_a_D[57:49], Sec_iteration_cell_div_a_D[47:46], Sec_iteration_cell_div_a_D[44:33], Sec_iteration_cell_div_a_D[31:4], Sec_iteration_cell_div_a_D[2:0] } = { \Iteration_cell_sum_AMASK_D[0] [56:48], \Iteration_cell_sum_AMASK_D[0] [46:45], \Iteration_cell_sum_AMASK_D[0] [43:32], \Iteration_cell_sum_AMASK_D[0] [30:3], 3'h0 };
  assign Sqrt_R1 = { \Iteration_cell_sum_AMASK_D[0] [57], \Iteration_cell_sum_AMASK_D[0] [54:0], \Sqrt_DO[0]  };
  assign Sqrt_R2 = { \Iteration_cell_sum_AMASK_D[1] [57], \Iteration_cell_sum_AMASK_D[1] [54:0], \Sqrt_DO[1]  };
  assign Sqrt_R3 = { \Iteration_cell_sum_AMASK_D[2] [57], \Iteration_cell_sum_AMASK_D[2] [54:0], \Sqrt_DO[2]  };
  assign Sqrt_R4[57:2] = { \Iteration_cell_sum_AMASK_D[3] [57], \Iteration_cell_sum_AMASK_D[3] [54:0] };
  assign \Sqrt_enable_SI[0]  = Sqrt_enable_SO;
  assign \Sqrt_enable_SI[1]  = Sqrt_enable_SO;
  assign \Sqrt_enable_SI[2]  = Sqrt_enable_SO;
  assign Sqrt_start_dly_SO = Sqrt_start_dly_S;
  assign State_Four_iteration_unit_S = { 2'h0, Precision_ctl_S[5:2] };
  assign State_Two_iteration_unit_S = { 1'h0, Precision_ctl_S[5:1] };
  assign { Thi_iteration_cell_div_a_D[57:49], Thi_iteration_cell_div_a_D[47:46], Thi_iteration_cell_div_a_D[44:33], Thi_iteration_cell_div_a_D[31:4], Thi_iteration_cell_div_a_D[2:0] } = { \Iteration_cell_sum_AMASK_D[1] [56:48], \Iteration_cell_sum_AMASK_D[1] [46:45], \Iteration_cell_sum_AMASK_D[1] [43:32], \Iteration_cell_sum_AMASK_D[1] [30:3], 3'h0 };
endmodule

module div_sqrt_top_mvp(Clk_CI, Rst_RBI, Div_start_SI, Sqrt_start_SI, Operand_a_DI, Operand_b_DI, RM_SI, Precision_ctl_SI, Format_sel_SI, Kill_SI, Result_DO, Fflags_SO, Ready_SO, Done_SO);
  input Clk_CI;
  wire Clk_CI;
  wire Div_enable_S;
  input Div_start_SI;
  wire Div_start_SI;
  output Done_SO;
  wire Done_SO;
  wire [11:0] Exp_a_D;
  wire [11:0] Exp_b_D;
  wire [12:0] Exp_z_D;
  wire FP16ALT_S;
  wire FP16_S;
  wire FP32_S;
  wire FP64_S;
  output [4:0] Fflags_SO;
  wire [4:0] Fflags_SO;
  input [1:0] Format_sel_SI;
  wire [1:0] Format_sel_SI;
  wire Full_precision_S;
  wire Inf_a_S;
  wire Inf_b_S;
  input Kill_SI;
  wire Kill_SI;
  wire [52:0] Mant_a_D;
  wire [52:0] Mant_b_D;
  wire [56:0] Mant_z_D;
  wire NaN_a_S;
  wire NaN_b_S;
  input [63:0] Operand_a_DI;
  wire [63:0] Operand_a_DI;
  input [63:0] Operand_b_DI;
  wire [63:0] Operand_b_DI;
  input [5:0] Precision_ctl_SI;
  wire [5:0] Precision_ctl_SI;
  input [2:0] RM_SI;
  wire [2:0] RM_SI;
  wire [2:0] RM_dly_S;
  output Ready_SO;
  wire Ready_SO;
  output [63:0] Result_DO;
  wire [63:0] Result_DO;
  input Rst_RBI;
  wire Rst_RBI;
  wire SNaN_S;
  wire Sign_z_D;
  wire Special_case_SB;
  wire Special_case_dly_SB;
  wire Sqrt_enable_S;
  input Sqrt_start_SI;
  wire Sqrt_start_SI;
  wire Start_S;
  wire Zero_a_S;
  wire Zero_b_S;
  norm_div_sqrt_mvp fpu_norm_U0 (
    .Div_enable_SI(Div_enable_S),
    .Exp_in_DI(Exp_z_D),
    .FP16ALT_SI(FP16ALT_S),
    .FP16_SI(FP16_S),
    .FP32_SI(FP32_S),
    .FP64_SI(FP64_S),
    .Fflags_SO(Fflags_SO),
    .Full_precision_SI(Full_precision_S),
    .Inf_a_SI(Inf_a_S),
    .Inf_b_SI(Inf_b_S),
    .Mant_in_DI(Mant_z_D),
    .NaN_a_SI(NaN_a_S),
    .NaN_b_SI(NaN_b_S),
    .RM_SI(RM_dly_S),
    .Result_DO(Result_DO),
    .SNaN_SI(SNaN_S),
    .Sign_in_DI(Sign_z_D),
    .Sqrt_enable_SI(Sqrt_enable_S),
    .Zero_a_SI(Zero_a_S),
    .Zero_b_SI(Zero_b_S)
  );
  nrbd_nrsc_mvp nrbd_nrsc_U0 (
    .Clk_CI(Clk_CI),
    .Div_enable_SO(Div_enable_S),
    .Div_start_SI(Div_start_SI),
    .Done_SO(Done_SO),
    .Exp_a_DI(Exp_a_D),
    .Exp_b_DI(Exp_b_D),
    .Exp_z_DO(Exp_z_D),
    .FP16ALT_SO(FP16ALT_S),
    .FP16_SO(FP16_S),
    .FP32_SO(FP32_S),
    .FP64_SO(FP64_S),
    .Format_sel_SI(Format_sel_SI),
    .Full_precision_SO(Full_precision_S),
    .Kill_SI(Kill_SI),
    .Mant_a_DI(Mant_a_D),
    .Mant_b_DI(Mant_b_D),
    .Mant_z_DO(Mant_z_D),
    .Precision_ctl_SI(Precision_ctl_SI),
    .Ready_SO(Ready_SO),
    .Rst_RBI(Rst_RBI),
    .Special_case_SBI(Special_case_SB),
    .Special_case_dly_SBI(Special_case_dly_SB),
    .Sqrt_enable_SO(Sqrt_enable_S),
    .Sqrt_start_SI(Sqrt_start_SI),
    .Start_SI(Start_S)
  );
  preprocess_mvp preprocess_U0 (
    .Clk_CI(Clk_CI),
    .Div_start_SI(Div_start_SI),
    .Exp_a_DO_norm(Exp_a_D),
    .Exp_b_DO_norm(Exp_b_D),
    .Format_sel_SI(Format_sel_SI),
    .Inf_a_SO(Inf_a_S),
    .Inf_b_SO(Inf_b_S),
    .Mant_a_DO_norm(Mant_a_D),
    .Mant_b_DO_norm(Mant_b_D),
    .NaN_a_SO(NaN_a_S),
    .NaN_b_SO(NaN_b_S),
    .Operand_a_DI(Operand_a_DI),
    .Operand_b_DI(Operand_b_DI),
    .RM_SI(RM_SI),
    .RM_dly_SO(RM_dly_S),
    .Ready_SI(Ready_SO),
    .Rst_RBI(Rst_RBI),
    .SNaN_SO(SNaN_S),
    .Sign_z_DO(Sign_z_D),
    .Special_case_SBO(Special_case_SB),
    .Special_case_dly_SBO(Special_case_dly_SB),
    .Sqrt_start_SI(Sqrt_start_SI),
    .Start_SO(Start_S),
    .Zero_a_SO(Zero_a_S),
    .Zero_b_SO(Zero_b_S)
  );
endmodule

module norm_div_sqrt_mvp(Mant_in_DI, Exp_in_DI, Sign_in_DI, Div_enable_SI, Sqrt_enable_SI, Inf_a_SI, Inf_b_SI, Zero_a_SI, Zero_b_SI, NaN_a_SI, NaN_b_SI, SNaN_SI, RM_SI, Full_precision_SI, FP32_SI, FP64_SI, FP16_SI, FP16ALT_SI, Result_DO, Fflags_SO);
  wire _000_;
  wire _001_;
  wire [10:0] _002_;
  wire [56:0] _003_;
  wire [52:0] _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire [10:0] _009_;
  wire [56:0] _010_;
  wire [52:0] _011_;
  wire _012_;
  wire [56:0] _013_;
  wire [52:0] _014_;
  wire _015_;
  wire _016_;
  wire [10:0] _017_;
  wire [56:0] _018_;
  wire [52:0] _019_;
  wire _020_;
  wire _021_;
  wire [10:0] _022_;
  wire [56:0] _023_;
  wire [52:0] _024_;
  wire _025_;
  wire [10:0] _026_;
  wire [56:0] _027_;
  wire [52:0] _028_;
  wire _029_;
  wire [10:0] _030_;
  wire [56:0] _031_;
  wire [52:0] _032_;
  wire _033_;
  wire [10:0] _034_;
  wire [56:0] _035_;
  wire [52:0] _036_;
  wire [10:0] _037_;
  wire [56:0] _038_;
  wire [52:0] _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire [10:0] _043_;
  wire [56:0] _044_;
  wire [1:0] _045_;
  wire [52:0] _046_;
  wire _047_;
  wire [52:0] _048_;
  wire _049_;
  wire [63:0] _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire [10:0] _055_;
  wire [56:0] _056_;
  wire [1:0] _057_;
  wire [52:0] _058_;
  wire _059_;
  wire [52:0] _060_;
  wire _061_;
  wire [63:0] _062_;
  wire _063_;
  wire _064_;
  wire [52:0] _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire [52:0] _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire [10:0] _073_;
  wire [56:0] _074_;
  wire [52:0] _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire [10:0] _081_;
  wire [56:0] _082_;
  wire [52:0] _083_;
  wire _084_;
  wire _085_;
  wire [10:0] _086_;
  wire [52:0] _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire [10:0] _091_;
  wire [56:0] _092_;
  wire [52:0] _093_;
  wire _094_;
  wire _095_;
  wire [31:0] _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire _120_;
  wire _121_;
  wire [31:0] _122_;
  wire _123_;
  wire _124_;
  wire _125_;
  wire _126_;
  wire _127_;
  wire _128_;
  wire _129_;
  wire _130_;
  wire _131_;
  wire _132_;
  wire _133_;
  wire _134_;
  wire _135_;
  wire _136_;
  wire _137_;
  wire _138_;
  wire _139_;
  wire _140_;
  wire _141_;
  wire _142_;
  wire _143_;
  wire _144_;
  wire [31:0] _145_;
  wire [52:0] _146_;
  wire Div_Zero_S;
  input Div_enable_SI;
  wire Div_enable_SI;
  wire Exp_OF_S;
  wire Exp_UF_S;
  wire [10:0] Exp_before_format_ctl_D;
  input [12:0] Exp_in_DI;
  wire [12:0] Exp_in_DI;
  wire [10:0] Exp_res_norm_D;
  wire [10:0] Exp_res_round_D;
  wire [12:0] Exp_subOne_D;
  input FP16ALT_SI;
  wire FP16ALT_SI;
  input FP16_SI;
  wire FP16_SI;
  input FP32_SI;
  wire FP32_SI;
  input FP64_SI;
  wire FP64_SI;
  output [4:0] Fflags_SO;
  wire [4:0] Fflags_SO;
  input Full_precision_SI;
  wire Full_precision_SI;
  wire In_Exact_S;
  input Inf_a_SI;
  wire Inf_a_SI;
  input Inf_b_SI;
  wire Inf_b_SI;
  wire [52:0] Mant_RS_D;
  wire [51:0] Mant_before_format_ctl_D;
  wire [56:0] Mant_forround_D;
  wire [56:0] Mant_forsticky_D;
  input [56:0] Mant_in_DI;
  wire [56:0] Mant_in_DI;
  wire [1:0] Mant_lower_D;
  wire Mant_renorm_S;
  wire [52:0] Mant_res_norm_D;
  wire [51:0] Mant_res_round_D;
  wire Mant_roundUp_S;
  wire [52:0] Mant_roundUp_Vector_S;
  wire Mant_rounded_S;
  wire Mant_sticky_bit_D;
  wire [53:0] Mant_upperRounded_D;
  wire [52:0] Mant_upper_D;
  wire NV_OP_S;
  input NaN_a_SI;
  wire NaN_a_SI;
  input NaN_b_SI;
  wire NaN_b_SI;
  wire [12:0] Num_RS_D;
  input [2:0] RM_SI;
  wire [2:0] RM_SI;
  output [63:0] Result_DO;
  wire [63:0] Result_DO;
  input SNaN_SI;
  wire SNaN_SI;
  input Sign_in_DI;
  wire Sign_in_DI;
  wire Sign_res_D;
  input Sqrt_enable_SI;
  wire Sqrt_enable_SI;
  input Zero_a_SI;
  wire Zero_a_SI;
  input Zero_b_SI;
  wire Zero_b_SI;
  assign { _096_[31:13], Num_RS_D } = $signed(_122_) + $signed(32'd2);
  assign Mant_upperRounded_D = Mant_upper_D + { 7'h00, Mant_roundUp_Vector_S[45], 2'h0, Mant_roundUp_Vector_S[42], 12'h000, Mant_roundUp_Vector_S[29], 28'h0000000, Mant_roundUp_Vector_S[0] };
  assign Exp_res_round_D = Exp_res_norm_D + Mant_upperRounded_D[53];
  assign _097_ = Mant_rounded_S & _124_;
  assign _098_ = Mant_rounded_S & Sign_in_DI;
  assign _099_ = ! Exp_in_DI[11:0];
  assign _100_ = Exp_in_DI[11:0] == 12'h001;
  assign _102_ = Exp_in_DI[10:0] == 11'h7ff;
  assign _103_ = Exp_in_DI[4:0] == 5'h1f;
  assign _101_ = Exp_in_DI[7:0] == 8'hff;
  assign _104_ = Div_enable_SI && Inf_b_SI;
  assign _106_ = Div_enable_SI && Zero_b_SI;
  assign _105_ = Sign_in_DI && Sqrt_enable_SI;
  assign _107_ = _100_ && _123_;
  assign _108_ = Exp_in_DI[8] && FP32_SI;
  assign _109_ = Exp_in_DI[11] && FP64_SI;
  assign _110_ = Exp_in_DI[5] && FP16_SI;
  assign _111_ = Exp_in_DI[8] && FP16ALT_SI;
  assign _112_ = _101_ && FP32_SI;
  assign _113_ = _102_ && FP64_SI;
  assign _114_ = _103_ && FP16_SI;
  assign _115_ = _101_ && FP16ALT_SI;
  assign _116_ = FP32_SI && Mant_upper_D[29];
  assign _117_ = FP64_SI && Mant_upper_D[0];
  assign _118_ = FP16_SI && Mant_upper_D[42];
  assign _119_ = FP16ALT_SI && Mant_upper_D[45];
  assign _120_ = Mant_lower_D[1] && _136_;
  assign Mant_roundUp_Vector_S[0] = FP64_SI && Mant_roundUp_S;
  assign Mant_roundUp_Vector_S[29] = FP32_SI && Mant_roundUp_S;
  assign Mant_roundUp_Vector_S[42] = FP16_SI && Mant_roundUp_S;
  assign Mant_roundUp_Vector_S[45] = FP16ALT_SI && Mant_roundUp_S;
  assign _121_ = | Mant_in_DI;
  assign _122_ = ~ $signed({ Exp_in_DI[12], Exp_in_DI[12], Exp_in_DI[12], Exp_in_DI[12], Exp_in_DI[12], Exp_in_DI[12], Exp_in_DI[12], Exp_in_DI[12], Exp_in_DI[12], Exp_in_DI[12], Exp_in_DI[12], Exp_in_DI[12], Exp_in_DI[12], Exp_in_DI[12], Exp_in_DI[12], Exp_in_DI[12], Exp_in_DI[12], Exp_in_DI[12], Exp_in_DI[12], Exp_in_DI });
  assign _123_ = ~ Mant_in_DI[56];
  assign _124_ = ~ Sign_in_DI;
  assign _125_ = ~ Full_precision_SI;
  assign _126_ = _108_ | _109_;
  assign _127_ = _126_ | _110_;
  assign _128_ = _127_ | _111_;
  assign _129_ = _112_ | _113_;
  assign _130_ = _129_ | _114_;
  assign _131_ = _130_ | _115_;
  assign Mant_rounded_S = _144_ | Mant_sticky_bit_D;
  assign _132_ = Mant_lower_D[0] | Mant_sticky_bit_D;
  assign _133_ = _116_ | _117_;
  assign _134_ = _133_ | _118_;
  assign _135_ = _134_ | _119_;
  assign _136_ = _132_ | _135_;
  assign In_Exact_S = _125_ | Mant_rounded_S;
  assign _020_ = Exp_in_DI[12] ? 1'h0 : _025_;
  assign _018_ = _107_ ? { Mant_in_DI[3:0], 53'h00000000000000 } : _023_;
  assign _017_ = _107_ ? 11'h000 : _022_;
  assign _019_ = _107_ ? Mant_in_DI[56:4] : _024_;
  assign _016_ = _107_ ? 1'h1 : _021_;
  assign _015_ = _107_ ? 1'h0 : _020_;
  assign _013_ = _121_ ? { Mant_in_DI[4:0], 52'h0000000000000 } : 57'h000000000000000;
  assign _014_ = _121_ ? { 1'h0, Mant_in_DI[56:5] } : 53'h00000000000000;
  assign _012_ = _121_ ? 1'h1 : 1'h0;
  assign _010_ = _099_ ? _013_ : _018_;
  assign _009_ = _099_ ? 11'h000 : _017_;
  assign _011_ = _099_ ? _014_ : _019_;
  assign _008_ = _099_ ? _012_ : _016_;
  assign _007_ = _099_ ? 1'h0 : _015_;
  assign _005_ = _105_ ? 1'h1 : 1'h0;
  assign _003_ = _105_ ? 57'h000000000000000 : _010_;
  assign _002_ = _105_ ? 11'h7ff : _009_;
  assign _004_ = _105_ ? 53'h08000000000000 : _011_;
  assign _001_ = _105_ ? 1'h0 : _008_;
  assign _000_ = _105_ ? 1'h0 : _007_;
  assign _094_ = _106_ ? 1'h0 : _005_;
  assign _095_ = _106_ ? Sign_in_DI : _006_;
  assign _092_ = _106_ ? 57'h000000000000000 : _003_;
  assign _091_ = _106_ ? 11'h7ff : _002_;
  assign _093_ = _106_ ? 53'h00000000000000 : _004_;
  assign _090_ = _106_ ? 1'h0 : _001_;
  assign _089_ = _106_ ? 1'h0 : _000_;
  assign _078_ = _106_ ? 1'h1 : 1'h0;
  assign _088_ = _106_ ? 1'h0 : Sign_in_DI;
  assign _086_ = _106_ ? 11'h7ff : 11'h000;
  assign _087_ = _106_ ? 53'h08000000000000 : 53'h00000000000000;
  assign _082_ = Zero_a_SI ? 57'h000000000000000 : _092_;
  assign _081_ = Zero_a_SI ? _086_ : _091_;
  assign _083_ = Zero_a_SI ? _087_ : _093_;
  assign _080_ = Zero_a_SI ? 1'h0 : _090_;
  assign _079_ = Zero_a_SI ? 1'h0 : _089_;
  assign _084_ = Zero_a_SI ? _078_ : _094_;
  assign _085_ = Zero_a_SI ? _088_ : _095_;
  assign _076_ = _104_ ? 1'h0 : _084_;
  assign _077_ = _104_ ? Sign_in_DI : _085_;
  assign _074_ = _104_ ? 57'h000000000000000 : _082_;
  assign _073_ = _104_ ? 11'h000 : _081_;
  assign _075_ = _104_ ? 53'h00000000000000 : _083_;
  assign _072_ = _104_ ? 1'h0 : _080_;
  assign _071_ = _104_ ? 1'h1 : _079_;
  assign _070_ = _104_ ? 1'h0 : _078_;
  assign _006_ = _105_ ? 1'h0 : Sign_in_DI;
  assign _069_ = _105_ ? 53'h08000000000000 : 53'h00000000000000;
  assign _068_ = _105_ ? 1'h0 : 1'h1;
  assign _066_ = _104_ ? 1'h1 : _005_;
  assign _067_ = _104_ ? 1'h0 : _006_;
  assign _065_ = _104_ ? 53'h08000000000000 : _069_;
  assign _064_ = _104_ ? 1'h0 : _068_;
  assign _056_ = Inf_a_SI ? 57'h000000000000000 : _074_;
  assign _055_ = Inf_a_SI ? 11'h7ff : _073_;
  assign _058_ = Inf_a_SI ? _065_ : _075_;
  assign _052_ = Inf_a_SI ? 1'h0 : _070_;
  assign _054_ = Inf_a_SI ? 1'h0 : _072_;
  assign _053_ = Inf_a_SI ? _064_ : _071_;
  assign _061_ = Inf_a_SI ? _066_ : _076_;
  assign _063_ = Inf_a_SI ? _067_ : _077_;
  assign _049_ = NaN_b_SI ? SNaN_SI : _061_;
  assign _051_ = NaN_b_SI ? 1'h0 : _063_;
  assign _044_ = NaN_b_SI ? 57'h000000000000000 : _056_;
  assign _043_ = NaN_b_SI ? 11'h7ff : _055_;
  assign _046_ = NaN_b_SI ? 53'h08000000000000 : _058_;
  assign _042_ = NaN_b_SI ? 1'h0 : _054_;
  assign _041_ = NaN_b_SI ? 1'h0 : _053_;
  assign _040_ = NaN_b_SI ? 1'h0 : _052_;
  assign NV_OP_S = NaN_a_SI ? SNaN_SI : _049_;
  assign Sign_res_D = NaN_a_SI ? 1'h0 : _051_;
  assign Mant_forround_D = NaN_a_SI ? 57'h000000000000000 : _044_;
  assign Exp_res_norm_D = NaN_a_SI ? 11'h7ff : _043_;
  assign Mant_res_norm_D = NaN_a_SI ? 53'h08000000000000 : _046_;
  assign Exp_UF_S = NaN_a_SI ? 1'h0 : _042_;
  assign Exp_OF_S = NaN_a_SI ? 1'h0 : _041_;
  assign Div_Zero_S = NaN_a_SI ? 1'h0 : _040_;
  assign _062_ = FP16_SI ? { 48'hffffffffffff, Sign_res_D, Exp_before_format_ctl_D[4:0], Mant_before_format_ctl_D[51:42] } : { 48'hffffffffffff, Sign_res_D, Exp_before_format_ctl_D[7:0], Mant_before_format_ctl_D[51:45] };
  assign _050_ = FP64_SI ? { Sign_res_D, Exp_before_format_ctl_D, Mant_before_format_ctl_D } : _062_;
  assign Result_DO = FP32_SI ? { 32'hffffffff, Sign_res_D, Exp_before_format_ctl_D[7:0], Mant_before_format_ctl_D[51:29] } : _050_;
  function [0:0] _276_;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _276_ = b[0:0];
      3'b?1?:
        _276_ = b[1:1];
      3'b1??:
        _276_ = b[2:2];
      default:
        _276_ = a;
    endcase
  endfunction
  assign Mant_roundUp_S = _276_(1'h0, { _120_, _097_, _098_ }, { _139_, _138_, _137_ });
  assign _137_ = RM_SI == 3'h3;
  assign _138_ = RM_SI == 3'h2;
  assign _139_ = ! RM_SI;
  assign _059_ = FP16_SI ? _142_ : _143_;
  assign _057_ = FP16_SI ? Mant_res_norm_D[41:40] : Mant_res_norm_D[44:43];
  assign _060_ = FP16_SI ? { Mant_res_norm_D[52:42], 42'h00000000000 } : { Mant_res_norm_D[52:45], 45'h000000000000 };
  assign _047_ = FP64_SI ? _141_ : _059_;
  assign _045_ = FP64_SI ? Mant_forround_D[56:55] : _057_;
  assign _048_ = FP64_SI ? Mant_res_norm_D : _060_;
  assign Mant_sticky_bit_D = FP32_SI ? _140_ : _047_;
  assign Mant_lower_D = FP32_SI ? Mant_res_norm_D[28:27] : _045_;
  assign Mant_upper_D = FP32_SI ? { Mant_res_norm_D[52:29], 29'h00000000 } : _048_;
  assign _038_ = Mant_in_DI[56] ? { Mant_in_DI[3:0], 53'h00000000000000 } : { Mant_in_DI[2:0], 54'h00000000000000 };
  assign _037_ = Mant_in_DI[56] ? Exp_in_DI[10:0] : Exp_subOne_D[10:0];
  assign _039_ = Mant_in_DI[56] ? { 1'h1, Mant_in_DI[55:4] } : Mant_in_DI[55:3];
  assign _035_ = Mant_in_DI[56] ? 57'h000000000000000 : { Mant_in_DI[2:0], 54'h00000000000000 };
  assign _034_ = Mant_in_DI[56] ? 11'h7ff : Exp_subOne_D[10:0];
  assign _036_ = Mant_in_DI[56] ? 53'h00000000000000 : Mant_in_DI[55:3];
  assign _033_ = Mant_in_DI[56] ? 1'h1 : 1'h0;
  assign _031_ = _131_ ? _035_ : _038_;
  assign _030_ = _131_ ? _034_ : _037_;
  assign _032_ = _131_ ? _036_ : _039_;
  assign _029_ = _131_ ? _033_ : 1'h0;
  assign _027_ = _128_ ? 57'h000000000000000 : _031_;
  assign _026_ = _128_ ? 11'h7ff : _030_;
  assign _028_ = _128_ ? 53'h00000000000000 : _032_;
  assign _025_ = _128_ ? 1'h1 : _029_;
  assign _023_ = Exp_in_DI[12] ? Mant_forsticky_D : _027_;
  assign _022_ = Exp_in_DI[12] ? 11'h000 : _026_;
  assign _024_ = Exp_in_DI[12] ? Mant_RS_D : _028_;
  assign _021_ = Exp_in_DI[12] ? 1'h1 : 1'h0;
  assign _140_ = | Mant_res_norm_D[26:0];
  assign _141_ = | Mant_forround_D[55:0];
  assign _142_ = | Mant_res_norm_D[39:30];
  assign _143_ = | Mant_res_norm_D[42:30];
  assign _144_ = | Mant_lower_D;
  assign { Mant_RS_D, Mant_forsticky_D } = { Mant_in_DI, 53'h00000000000000 } >> Num_RS_D;
  assign { _145_[31:13], Exp_subOne_D } = $signed(Exp_in_DI) - $signed(32'd1);
  assign Mant_res_round_D = Mant_upperRounded_D[53] ? Mant_upperRounded_D[52:1] : Mant_upperRounded_D[51:0];
  assign { _146_[52], Mant_before_format_ctl_D } = Full_precision_SI ? { 1'h0, Mant_res_round_D } : Mant_res_norm_D;
  assign Exp_before_format_ctl_D = Full_precision_SI ? Exp_res_round_D : Exp_res_norm_D;
  assign _096_[12:0] = Num_RS_D;
  assign _145_[12:0] = Exp_subOne_D;
  assign _146_[51:0] = Mant_before_format_ctl_D;
  assign Fflags_SO = { NV_OP_S, Div_Zero_S, Exp_OF_S, Exp_UF_S, In_Exact_S };
  assign Mant_renorm_S = Mant_upperRounded_D[53];
  assign { Mant_roundUp_Vector_S[52:46], Mant_roundUp_Vector_S[44:43], Mant_roundUp_Vector_S[41:30], Mant_roundUp_Vector_S[28:1] } = 49'h0000000000000;
endmodule

module nrbd_nrsc_mvp(Clk_CI, Rst_RBI, Div_start_SI, Sqrt_start_SI, Start_SI, Kill_SI, Special_case_SBI, Special_case_dly_SBI, Precision_ctl_SI, Format_sel_SI, Mant_a_DI, Mant_b_DI, Exp_a_DI, Exp_b_DI, Div_enable_SO, Sqrt_enable_SO, Full_precision_SO, FP32_SO, FP64_SO, FP16_SO, FP16ALT_SO
, Ready_SO, Done_SO, Mant_z_DO, Exp_z_DO);
  input Clk_CI;
  wire Clk_CI;
  output Div_enable_SO;
  wire Div_enable_SO;
  input Div_start_SI;
  wire Div_start_SI;
  wire Div_start_dly_S;
  output Done_SO;
  wire Done_SO;
  input [11:0] Exp_a_DI;
  wire [11:0] Exp_a_DI;
  input [11:0] Exp_b_DI;
  wire [11:0] Exp_b_DI;
  output [12:0] Exp_z_DO;
  wire [12:0] Exp_z_DO;
  output FP16ALT_SO;
  wire FP16ALT_SO;
  output FP16_SO;
  wire FP16_SO;
  output FP32_SO;
  wire FP32_SO;
  output FP64_SO;
  wire FP64_SO;
  input [1:0] Format_sel_SI;
  wire [1:0] Format_sel_SI;
  output Full_precision_SO;
  wire Full_precision_SO;
  input Kill_SI;
  wire Kill_SI;
  input [52:0] Mant_a_DI;
  wire [52:0] Mant_a_DI;
  input [52:0] Mant_b_DI;
  wire [52:0] Mant_b_DI;
  output [56:0] Mant_z_DO;
  wire [56:0] Mant_z_DO;
  input [5:0] Precision_ctl_SI;
  wire [5:0] Precision_ctl_SI;
  output Ready_SO;
  wire Ready_SO;
  input Rst_RBI;
  wire Rst_RBI;
  input Special_case_SBI;
  wire Special_case_SBI;
  input Special_case_dly_SBI;
  wire Special_case_dly_SBI;
  output Sqrt_enable_SO;
  wire Sqrt_enable_SO;
  input Sqrt_start_SI;
  wire Sqrt_start_SI;
  wire Sqrt_start_dly_S;
  input Start_SI;
  wire Start_SI;
  control_mvp control_U0 (
    .Clk_CI(Clk_CI),
    .Denominator_DI(Mant_b_DI),
    .Div_enable_SO(Div_enable_SO),
    .Div_start_SI(Div_start_SI),
    .Div_start_dly_SO(Div_start_dly_S),
    .Done_SO(Done_SO),
    .Exp_den_DI(Exp_b_DI),
    .Exp_num_DI(Exp_a_DI),
    .Exp_result_prenorm_DO(Exp_z_DO),
    .FP16ALT_SO(FP16ALT_SO),
    .FP16_SO(FP16_SO),
    .FP32_SO(FP32_SO),
    .FP64_SO(FP64_SO),
    .Format_sel_SI(Format_sel_SI),
    .Full_precision_SO(Full_precision_SO),
    .Kill_SI(Kill_SI),
    .Mant_result_prenorm_DO(Mant_z_DO),
    .Numerator_DI(Mant_a_DI),
    .Precision_ctl_SI(Precision_ctl_SI),
    .Ready_SO(Ready_SO),
    .Rst_RBI(Rst_RBI),
    .Special_case_SBI(Special_case_SBI),
    .Special_case_dly_SBI(Special_case_dly_SBI),
    .Sqrt_enable_SO(Sqrt_enable_SO),
    .Sqrt_start_SI(Sqrt_start_SI),
    .Sqrt_start_dly_SO(Sqrt_start_dly_S),
    .Start_SI(Start_SI)
  );
endmodule

module preprocess_mvp(Clk_CI, Rst_RBI, Div_start_SI, Sqrt_start_SI, Ready_SI, Operand_a_DI, Operand_b_DI, RM_SI, Format_sel_SI, Start_SO, Exp_a_DO_norm, Exp_b_DO_norm, Mant_a_DO_norm, Mant_b_DO_norm, RM_dly_SO, Sign_z_DO, Inf_a_SO, Inf_b_SO, Zero_a_SO, Zero_b_SO, NaN_a_SO
, NaN_b_SO, SNaN_SO, Special_case_SBO, Special_case_dly_SBO);
  wire _000_;
  wire _001_;
  wire [11:0] _002_;
  wire [11:0] _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire [11:0] _054_;
  wire [11:0] _055_;
  wire [52:0] _056_;
  wire [52:0] _057_;
  wire [11:0] _058_;
  wire [11:0] _059_;
  wire _060_;
  wire _061_;
  input Clk_CI;
  wire Clk_CI;
  input Div_start_SI;
  wire Div_start_SI;
  wire [10:0] Exp_a_D;
  output [11:0] Exp_a_DO_norm;
  wire [11:0] Exp_a_DO_norm;
  reg [11:0] Exp_a_norm_DP;
  wire Exp_a_prenorm_Inf_NaN_S;
  wire Exp_a_prenorm_zero_S;
  wire [10:0] Exp_b_D;
  output [11:0] Exp_b_DO_norm;
  wire [11:0] Exp_b_DO_norm;
  reg [11:0] Exp_b_norm_DP;
  wire Exp_b_prenorm_Inf_NaN_S;
  wire Exp_b_prenorm_zero_S;
  input [1:0] Format_sel_SI;
  wire [1:0] Format_sel_SI;
  wire Hb_a_D;
  wire Hb_b_D;
  wire Inf_a_SN;
  output Inf_a_SO;
  wire Inf_a_SO;
  reg Inf_a_SP;
  wire Inf_b_SN;
  output Inf_b_SO;
  wire Inf_b_SO;
  reg Inf_b_SP;
  wire [52:0] Mant_a_D;
  output [52:0] Mant_a_DO_norm;
  wire [52:0] Mant_a_DO_norm;
  wire [51:0] Mant_a_NonH_D;
  reg [52:0] Mant_a_norm_DP;
  wire Mant_a_prenorm_SNaN_S;
  wire Mant_a_prenorm_zero_S;
  wire [52:0] Mant_b_D;
  output [52:0] Mant_b_DO_norm;
  wire [52:0] Mant_b_DO_norm;
  wire [51:0] Mant_b_NonH_D;
  reg [52:0] Mant_b_norm_DP;
  wire Mant_b_prenorm_SNaN_S;
  wire Mant_b_prenorm_zero_S;
  wire [5:0] Mant_leadingOne_a;
  wire [5:0] Mant_leadingOne_b;
  wire Mant_zero_S_a;
  wire Mant_zero_S_b;
  wire NaN_a_SN;
  output NaN_a_SO;
  wire NaN_a_SO;
  reg NaN_a_SP;
  wire NaN_b_SN;
  output NaN_b_SO;
  wire NaN_b_SO;
  reg NaN_b_SP;
  input [63:0] Operand_a_DI;
  wire [63:0] Operand_a_DI;
  input [63:0] Operand_b_DI;
  wire [63:0] Operand_b_DI;
  reg [2:0] RM_DP;
  input [2:0] RM_SI;
  wire [2:0] RM_SI;
  output [2:0] RM_dly_SO;
  wire [2:0] RM_dly_SO;
  input Ready_SI;
  wire Ready_SI;
  input Rst_RBI;
  wire Rst_RBI;
  output SNaN_SO;
  wire SNaN_SO;
  reg SNaN_SP;
  wire Sign_a_D;
  wire Sign_b_D;
  wire Sign_z_DN;
  output Sign_z_DO;
  wire Sign_z_DO;
  reg Sign_z_DP;
  output Special_case_SBO;
  wire Special_case_SBO;
  output Special_case_dly_SBO;
  reg Special_case_dly_SBO;
  input Sqrt_start_SI;
  wire Sqrt_start_SI;
  wire Start_S;
  output Start_SO;
  wire Start_SO;
  wire Zero_a_SN;
  output Zero_a_SO;
  wire Zero_a_SO;
  reg Zero_a_SP;
  wire Zero_b_SN;
  output Zero_b_SO;
  wire Zero_b_SO;
  reg Zero_b_SP;
  assign _002_ = _058_ + _054_;
  assign _003_ = _059_ + _055_;
  always @(posedge Clk_CI, negedge Rst_RBI)
    if (!Rst_RBI) RM_DP <= 3'h0;
    else if (_022_) RM_DP <= RM_SI;
  always @(posedge Clk_CI, negedge Rst_RBI)
    if (!Rst_RBI) Sign_z_DP <= 1'h0;
    else if (_004_) Sign_z_DP <= Sign_z_DN;
  always @(posedge Clk_CI, negedge Rst_RBI)
    if (!Rst_RBI) SNaN_SP <= 1'h0;
    else if (_022_) SNaN_SP <= _038_;
  always @(posedge Clk_CI, negedge Rst_RBI)
    if (!Rst_RBI) Mant_a_norm_DP <= 53'h00000000000000;
    else if (_022_) Mant_a_norm_DP <= _056_;
  always @(posedge Clk_CI, negedge Rst_RBI)
    if (!Rst_RBI) Exp_b_norm_DP <= 12'h000;
    else if (_022_) Exp_b_norm_DP <= _003_;
  always @(posedge Clk_CI, negedge Rst_RBI)
    if (!Rst_RBI) Mant_b_norm_DP <= 53'h00000000000000;
    else if (_022_) Mant_b_norm_DP <= _057_;
  always @(posedge Clk_CI, negedge Rst_RBI)
    if (!Rst_RBI) Exp_a_norm_DP <= 12'h000;
    else if (_022_) Exp_a_norm_DP <= _002_;
  assign _004_ = | { _032_, _031_ };
  assign _005_ = | { _048_, _049_ };
  assign _006_ = ! Operand_a_DI[22:0];
  assign _007_ = ! Operand_b_DI[22:0];
  assign _008_ = Operand_a_DI[30:23] == 8'hff;
  assign _009_ = Operand_b_DI[30:23] == 8'hff;
  assign _010_ = ! Operand_a_DI[51:0];
  assign _011_ = ! Operand_b_DI[51:0];
  assign _012_ = Operand_a_DI[62:52] == 11'h7ff;
  assign _013_ = Operand_b_DI[62:52] == 11'h7ff;
  assign _014_ = ! Operand_a_DI[9:0];
  assign _015_ = ! Operand_b_DI[9:0];
  assign _016_ = Operand_a_DI[14:10] == 5'h1f;
  assign _017_ = Operand_b_DI[14:10] == 5'h1f;
  assign _018_ = ! Operand_a_DI[6:0];
  assign _019_ = ! Operand_b_DI[6:0];
  assign _020_ = Operand_a_DI[14:7] == 8'hff;
  assign _021_ = Operand_b_DI[14:7] == 8'hff;
  assign Mant_a_prenorm_SNaN_S = _033_ && _052_;
  assign Mant_b_prenorm_SNaN_S = _034_ && _053_;
  assign _023_ = Exp_a_prenorm_zero_S && Mant_a_prenorm_zero_S;
  assign _024_ = Exp_b_prenorm_zero_S && Mant_b_prenorm_zero_S;
  assign _025_ = Exp_a_prenorm_Inf_NaN_S && Mant_a_prenorm_zero_S;
  assign _026_ = Exp_b_prenorm_Inf_NaN_S && Mant_b_prenorm_zero_S;
  assign _027_ = Exp_a_prenorm_Inf_NaN_S && _035_;
  assign _028_ = Exp_b_prenorm_Inf_NaN_S && _036_;
  assign _029_ = Mant_a_prenorm_SNaN_S && NaN_a_SN;
  assign _030_ = Mant_b_prenorm_SNaN_S && NaN_b_SN;
  assign Special_case_SBO = _037_ && _022_;
  assign _031_ = Div_start_SI && Ready_SI;
  assign _032_ = Sqrt_start_SI && Ready_SI;
  assign _022_ = Start_S && Ready_SI;
  assign Exp_a_prenorm_zero_S = ~ Hb_a_D;
  assign Exp_b_prenorm_zero_S = ~ Hb_b_D;
  assign _033_ = ~ Mant_a_NonH_D[51];
  assign _034_ = ~ Mant_b_NonH_D[51];
  assign _035_ = ~ Mant_a_prenorm_zero_S;
  assign _036_ = ~ Mant_b_prenorm_zero_S;
  assign _037_ = ~ _060_;
  assign Start_S = Div_start_SI | Sqrt_start_SI;
  assign _038_ = _029_ | _030_;
  assign _039_ = Zero_a_SN | Zero_b_SN;
  assign _040_ = _039_ | Inf_a_SN;
  assign _041_ = _040_ | Inf_b_SN;
  assign _042_ = _041_ | NaN_a_SN;
  assign _043_ = _042_ | NaN_b_SN;
  assign _044_ = Zero_a_SN | Inf_a_SN;
  assign _045_ = _044_ | NaN_a_SN;
  assign _046_ = _045_ | Sign_a_D;
  always @(posedge Clk_CI, negedge Rst_RBI)
    if (!Rst_RBI) Special_case_dly_SBO <= 1'h0;
    else Special_case_dly_SBO <= _000_;
  always @(posedge Clk_CI, negedge Rst_RBI)
    if (!Rst_RBI) Zero_a_SP <= 1'h0;
    else Zero_a_SP <= Zero_a_SN;
  always @(posedge Clk_CI, negedge Rst_RBI)
    if (!Rst_RBI) Zero_b_SP <= 1'h0;
    else Zero_b_SP <= Zero_b_SN;
  always @(posedge Clk_CI, negedge Rst_RBI)
    if (!Rst_RBI) Inf_a_SP <= 1'h0;
    else Inf_a_SP <= Inf_a_SN;
  always @(posedge Clk_CI, negedge Rst_RBI)
    if (!Rst_RBI) Inf_b_SP <= 1'h0;
    else Inf_b_SP <= Inf_b_SN;
  always @(posedge Clk_CI, negedge Rst_RBI)
    if (!Rst_RBI) NaN_a_SP <= 1'h0;
    else NaN_a_SP <= NaN_a_SN;
  always @(posedge Clk_CI, negedge Rst_RBI)
    if (!Rst_RBI) NaN_b_SP <= 1'h0;
    else NaN_b_SP <= NaN_b_SN;
  assign _001_ = _032_ ? Sign_a_D : 1'hx;
  assign Sign_z_DN = _031_ ? _061_ : _001_;
  assign _047_ = Special_case_dly_SBO ? 1'h1 : 1'h0;
  assign _000_ = _022_ ? Special_case_SBO : _047_;
  function [0:0] _131_;
    input [0:0] a;
    input [3:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _131_ = b[0:0];
      4'b??1?:
        _131_ = b[1:1];
      4'b?1??:
        _131_ = b[2:2];
      4'b1???:
        _131_ = b[3:3];
      default:
        _131_ = a;
    endcase
  endfunction
  assign Exp_b_prenorm_Inf_NaN_S = _131_(1'hx, { _009_, _013_, _017_, _021_ }, { _051_, _050_, _049_, _048_ });
  function [0:0] _132_;
    input [0:0] a;
    input [3:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _132_ = b[0:0];
      4'b??1?:
        _132_ = b[1:1];
      4'b?1??:
        _132_ = b[2:2];
      4'b1???:
        _132_ = b[3:3];
      default:
        _132_ = a;
    endcase
  endfunction
  assign Exp_a_prenorm_Inf_NaN_S = _132_(1'hx, { _008_, _012_, _016_, _020_ }, { _051_, _050_, _049_, _048_ });
  function [0:0] _133_;
    input [0:0] a;
    input [3:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _133_ = b[0:0];
      4'b??1?:
        _133_ = b[1:1];
      4'b?1??:
        _133_ = b[2:2];
      4'b1???:
        _133_ = b[3:3];
      default:
        _133_ = a;
    endcase
  endfunction
  assign Mant_b_prenorm_zero_S = _133_(1'hx, { _007_, _011_, _015_, _019_ }, { _051_, _050_, _049_, _048_ });
  function [0:0] _134_;
    input [0:0] a;
    input [3:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _134_ = b[0:0];
      4'b??1?:
        _134_ = b[1:1];
      4'b?1??:
        _134_ = b[2:2];
      4'b1???:
        _134_ = b[3:3];
      default:
        _134_ = a;
    endcase
  endfunction
  assign Mant_a_prenorm_zero_S = _134_(1'hx, { _006_, _010_, _014_, _018_ }, { _051_, _050_, _049_, _048_ });
  function [51:0] _135_;
    input [51:0] a;
    input [207:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _135_ = b[51:0];
      4'b??1?:
        _135_ = b[103:52];
      4'b?1??:
        _135_ = b[155:104];
      4'b1???:
        _135_ = b[207:156];
      default:
        _135_ = a;
    endcase
  endfunction
  assign Mant_b_NonH_D = _135_(52'hxxxxxxxxxxxxx, { Operand_b_DI[22:0], 29'h00000000, Operand_b_DI[51:0], Operand_b_DI[9:0], 42'h00000000000, Operand_b_DI[6:0], 45'h000000000000 }, { _051_, _050_, _049_, _048_ });
  function [51:0] _136_;
    input [51:0] a;
    input [207:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _136_ = b[51:0];
      4'b??1?:
        _136_ = b[103:52];
      4'b?1??:
        _136_ = b[155:104];
      4'b1???:
        _136_ = b[207:156];
      default:
        _136_ = a;
    endcase
  endfunction
  assign Mant_a_NonH_D = _136_(52'hxxxxxxxxxxxxx, { Operand_a_DI[22:0], 29'h00000000, Operand_a_DI[51:0], Operand_a_DI[9:0], 42'h00000000000, Operand_a_DI[6:0], 45'h000000000000 }, { _051_, _050_, _049_, _048_ });
  function [10:0] _137_;
    input [10:0] a;
    input [43:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _137_ = b[10:0];
      4'b??1?:
        _137_ = b[21:11];
      4'b?1??:
        _137_ = b[32:22];
      4'b1???:
        _137_ = b[43:33];
      default:
        _137_ = a;
    endcase
  endfunction
  assign Exp_b_D = _137_(11'hxxx, { 3'h0, Operand_b_DI[30:23], Operand_b_DI[62:52], 6'h00, Operand_b_DI[14:10], 3'h0, Operand_b_DI[14:7] }, { _051_, _050_, _049_, _048_ });
  function [10:0] _138_;
    input [10:0] a;
    input [43:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _138_ = b[10:0];
      4'b??1?:
        _138_ = b[21:11];
      4'b?1??:
        _138_ = b[32:22];
      4'b1???:
        _138_ = b[43:33];
      default:
        _138_ = a;
    endcase
  endfunction
  assign Exp_a_D = _138_(11'hxxx, { 3'h0, Operand_a_DI[30:23], Operand_a_DI[62:52], 6'h00, Operand_a_DI[14:10], 3'h0, Operand_a_DI[14:7] }, { _051_, _050_, _049_, _048_ });
  function [0:0] _139_;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _139_ = b[0:0];
      3'b?1?:
        _139_ = b[1:1];
      3'b1??:
        _139_ = b[2:2];
      default:
        _139_ = a;
    endcase
  endfunction
  assign Sign_b_D = _139_(1'hx, { Operand_b_DI[31], Operand_b_DI[63], Operand_b_DI[15] }, { _051_, _050_, _005_ });
  function [0:0] _140_;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _140_ = b[0:0];
      3'b?1?:
        _140_ = b[1:1];
      3'b1??:
        _140_ = b[2:2];
      default:
        _140_ = a;
    endcase
  endfunction
  assign Sign_a_D = _140_(1'hx, { Operand_a_DI[31], Operand_a_DI[63], Operand_a_DI[15] }, { _051_, _050_, _005_ });
  assign _048_ = Format_sel_SI == 2'h3;
  assign _049_ = Format_sel_SI == 2'h2;
  assign _050_ = Format_sel_SI == 2'h1;
  assign _051_ = ! Format_sel_SI;
  assign Hb_a_D = | Exp_a_D;
  assign Hb_b_D = | Exp_b_D;
  assign _052_ = | Mant_a_NonH_D[50:0];
  assign _053_ = | Mant_b_NonH_D[50:0];
  assign _054_ = | Mant_leadingOne_a;
  assign _055_ = | Mant_leadingOne_b;
  assign _056_ = { Hb_a_D, Mant_a_NonH_D } << Mant_leadingOne_a;
  assign _057_ = { Hb_b_D, Mant_b_NonH_D } << Mant_leadingOne_b;
  assign _058_ = Exp_a_D - Mant_leadingOne_a;
  assign _059_ = Exp_b_D - Mant_leadingOne_b;
  assign Zero_a_SN = _022_ ? _023_ : Zero_a_SP;
  assign Zero_b_SN = _022_ ? _024_ : Zero_b_SP;
  assign Inf_a_SN = _022_ ? _025_ : Inf_a_SP;
  assign Inf_b_SN = _022_ ? _026_ : Inf_b_SP;
  assign NaN_a_SN = _022_ ? _027_ : NaN_a_SP;
  assign NaN_b_SN = _022_ ? _028_ : NaN_b_SP;
  assign _060_ = Div_start_SI ? _043_ : _046_;
  assign _061_ = Sign_a_D ^ Sign_b_D;
  \$paramod$f63662f9b52d30dc01537496e32d795d2895a3c6\lzc  LOD_Ua (
    .cnt_o(Mant_leadingOne_a),
    .empty_o(Mant_zero_S_a),
    .in_i({ Hb_a_D, Mant_a_NonH_D })
  );
  \$paramod$f63662f9b52d30dc01537496e32d795d2895a3c6\lzc  LOD_Ub (
    .cnt_o(Mant_leadingOne_b),
    .empty_o(Mant_zero_S_b),
    .in_i({ Hb_b_D, Mant_b_NonH_D })
  );
  assign Exp_a_DO_norm = Exp_a_norm_DP;
  assign Exp_b_DO_norm = Exp_b_norm_DP;
  assign Inf_a_SO = Inf_a_SP;
  assign Inf_b_SO = Inf_b_SP;
  assign Mant_a_D = { Hb_a_D, Mant_a_NonH_D };
  assign Mant_a_DO_norm = Mant_a_norm_DP;
  assign Mant_b_D = { Hb_b_D, Mant_b_NonH_D };
  assign Mant_b_DO_norm = Mant_b_norm_DP;
  assign NaN_a_SO = NaN_a_SP;
  assign NaN_b_SO = NaN_b_SP;
  assign RM_dly_SO = RM_DP;
  assign SNaN_SO = SNaN_SP;
  assign Sign_z_DO = Sign_z_DP;
  assign Start_SO = Start_S;
  assign Zero_a_SO = Zero_a_SP;
  assign Zero_b_SO = Zero_b_SP;
endmodule
