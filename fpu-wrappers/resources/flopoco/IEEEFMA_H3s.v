/* Generated by Yosys 0.10+51 (git sha1 bdf153d0, clang 11.0.1-2 -fPIC -Os) */

module FMA_H(clk, A, B, C, negateAB, negateC, RndMode, R);
  reg _000_;
  reg _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  reg _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  reg _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  reg _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  reg _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire [4:0] _055_;
  reg [4:0] _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire [6:0] _061_;
  wire [6:0] _062_;
  wire [6:0] _063_;
  wire [6:0] _064_;
  wire [6:0] _065_;
  wire [6:0] _066_;
  reg _067_;
  wire [6:0] _068_;
  wire [6:0] _069_;
  wire [5:0] _070_;
  wire [5:0] _071_;
  wire [5:0] _072_;
  wire [47:0] _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  reg [5:0] _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire [21:0] _085_;
  wire _086_;
  wire [37:0] _087_;
  wire [36:0] _088_;
  reg _089_;
  wire [37:0] _090_;
  wire [37:0] _091_;
  wire [37:0] _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire [36:0] _098_;
  wire [4:0] _099_;
  reg _100_;
  wire [6:0] _101_;
  wire [6:0] _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  reg _111_;
  reg _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire [5:0] _118_;
  wire [5:0] _119_;
  wire _120_;
  wire _121_;
  wire [5:0] _122_;
  reg _123_;
  wire _124_;
  wire [5:0] _125_;
  wire [72:0] _126_;
  wire [6:0] _127_;
  wire [6:0] _128_;
  wire [6:0] _129_;
  wire [6:0] _130_;
  wire _131_;
  wire _132_;
  wire [6:0] _133_;
  reg [6:0] _134_;
  wire [6:0] _135_;
  wire _136_;
  wire _137_;
  wire _138_;
  wire _139_;
  wire _140_;
  wire _141_;
  wire _142_;
  wire _143_;
  wire _144_;
  reg _145_;
  wire _146_;
  wire _147_;
  wire _148_;
  wire _149_;
  wire _150_;
  wire _151_;
  wire _152_;
  wire _153_;
  wire _154_;
  wire _155_;
  reg _156_;
  wire _157_;
  wire _158_;
  wire _159_;
  wire _160_;
  wire [1:0] _161_;
  wire _162_;
  wire [9:0] _163_;
  wire _164_;
  wire [9:0] _165_;
  wire _166_;
  reg _167_;
  wire _168_;
  wire _169_;
  wire _170_;
  wire _171_;
  wire _172_;
  wire _173_;
  wire _174_;
  wire _175_;
  wire _176_;
  wire _177_;
  reg _178_;
  wire _179_;
  wire _180_;
  wire _181_;
  wire _182_;
  wire _183_;
  wire [6:0] _184_;
  wire _185_;
  wire [6:0] _186_;
  wire _187_;
  wire [6:0] _188_;
  reg _189_;
  wire [6:0] _190_;
  wire [16:0] _191_;
  wire _192_;
  wire _193_;
  wire _194_;
  wire _195_;
  wire _196_;
  wire _197_;
  wire _198_;
  wire _199_;
  reg _200_;
  wire _201_;
  wire [15:0] _202_;
  wire [15:0] _203_;
  reg [5:0] _204_;
  reg _205_;
  reg [6:0] _206_;
  reg [6:0] _207_;
  reg [14:0] _208_;
  reg [14:0] _209_;
  reg [14:0] _210_;
  reg [14:0] _211_;
  reg [14:0] _212_;
  reg [14:0] _213_;
  reg _214_;
  reg _215_;
  reg _216_;
  wire _217_;
  wire _218_;
  wire _219_;
  wire _220_;
  wire _221_;
  wire _222_;
  wire _223_;
  wire _224_;
  wire _225_;
  wire _226_;
  reg [5:0] _227_;
  wire _228_;
  wire _229_;
  wire _230_;
  wire _231_;
  wire _232_;
  wire _233_;
  wire _234_;
  wire _235_;
  wire _236_;
  wire _237_;
  reg _238_;
  wire _239_;
  wire _240_;
  wire _241_;
  wire _242_;
  wire _243_;
  wire _244_;
  wire _245_;
  wire _246_;
  wire _247_;
  wire _248_;
  reg _249_;
  wire _250_;
  wire _251_;
  wire _252_;
  wire _253_;
  wire _254_;
  wire _255_;
  wire _256_;
  wire _257_;
  wire _258_;
  wire _259_;
  reg _260_;
  wire _261_;
  wire _262_;
  wire _263_;
  wire _264_;
  wire _265_;
  wire _266_;
  wire [4:0] _267_;
  wire [4:0] _268_;
  wire [5:0] _269_;
  wire _270_;
  reg _271_;
  wire _272_;
  wire _273_;
  wire _274_;
  wire _275_;
  wire _276_;
  wire _277_;
  wire _278_;
  wire _279_;
  wire _280_;
  wire _281_;
  input [15:0] A;
  input [15:0] B;
  input [15:0] C;
  output [15:0] R;
  input [1:0] RndMode;
  wire [4:0] aexp;
  wire [4:0] aexpfield;
  wire [5:0] aexpplusbexp;
  wire [5:0] aexpplusbexp_d1;
  wire ahasnonnullsig;
  wire aisinf;
  wire aisinfornan;
  wire aisnan;
  wire aisnormal;
  wire aiszero;
  wire aiszero_d1;
  wire asgn;
  wire asgn_d1;
  wire [10:0] asig;
  wire [9:0] asigfield;
  wire [4:0] bexp;
  wire [4:0] bexpfield;
  wire bhasnonnullsig;
  wire [37:0] bigsum;
  wire [37:0] bigsum2;
  wire [36:0] bigsumabs;
  wire [25:0] bigsumabslowerbits;
  wire [72:0] bigsumnormd;
  wire bisinf;
  wire bisinfornan;
  wire bisnan;
  wire bisnormal;
  wire biszero;
  wire biszero_d1;
  wire bsgn;
  wire bsgn_d1;
  wire [10:0] bsig;
  wire [9:0] bsigfield;
  wire [4:0] cexp;
  wire [4:0] cexp_d1;
  wire [4:0] cexpfield;
  wire chasnonnullsig;
  wire cisinf;
  wire cisinfornan;
  wire cisnan;
  wire cisnormal;
  wire cisnormal_d1;
  wire ciszero;
  wire ciszero_d1;
  input clk;
  wire csgn;
  wire csgn_d1;
  wire [10:0] csig;
  wire [9:0] csigfield;
  wire [37:0] csiginverted;
  wire [47:0] csigshifted;
  wire [36:0] csigshiftedt;
  wire effectivesub;
  wire [6:0] expdiff;
  wire expdiffnotlarge;
  wire [6:0] expdiffprepare;
  wire expdiffsmall;
  wire expdiffsmall_d1;
  wire expdiffverysmall;
  wire [6:0] exponentresult1;
  wire [6:0] exptentative;
  wire [6:0] exptentative_d1;
  wire [6:0] exptentative_d2;
  wire [6:0] expupdate;
  wire finalrisinf;
  wire [1:0] fracleadingbits;
  wire [1:0] fracleadingbitsnormal;
  wire [9:0] fracresultnormd;
  wire fracresultroundbit;
  wire fracresultstickybit;
  wire [13:0] fractentative;
  wire [4:0] \ieeefma_5_10_f250_uid2leadingzerocounter:454 ;
  wire [14:0] inf;
  wire [14:0] inf_d1;
  wire [14:0] inf_d2;
  wire [14:0] inf_d3;
  wire [4:0] l;
  wire [14:0] nan;
  wire [14:0] nan_d1;
  wire [14:0] nan_d2;
  wire [14:0] nan_d3;
  input negateAB;
  input negateC;
  wire negateab_d1;
  wire negatec_d1;
  wire [72:0] \normalizationshifter:517 ;
  wire [5:0] normshiftvalue;
  wire [21:0] p;
  wire [36:0] paligned;
  wire [16:0] resultbeforeround;
  wire [16:0] resultrounded;
  wire [47:0] \rightshiftercomponent:375 ;
  wire risnan;
  wire risnan_d1;
  wire risnan_d2;
  wire risnan_d3;
  wire rissubnormal;
  wire rissubnormal_d1;
  wire rissubnormal_d2;
  wire riszero;
  wire riszero_d1;
  wire riszero_d2;
  wire round;
  wire roverflowed;
  wire rsgn;
  wire rsgn_d1;
  wire rsgn_d2;
  wire rsgntentative;
  wire rsgntentative_d1;
  wire [5:0] shiftvalue;
  wire [5:0] shiftvalue_d1;
  wire [5:0] shiftvaluecasesubnormal;
  wire [5:0] shiftvaluecasesubnormal_d1;
  wire sticky1;
  wire sticky1_d1;
  wire sticky1_d2;
  wire sticky1_d3;
  wire sticky2;
  wire tentativerisinf;
  wire tentativerisinf_d1;
  wire tentativerisinf_d2;
  wire tentativerisinf_d3;
  wire [6:0] tmpexpcomp1;
  wire [6:0] tmpexpcomp2;
  wire [6:0] tmpexpcomp3;
  wire [6:0] tmpexpcompres1;
  wire [6:0] tmpexpcompres1_d1;
  wire [6:0] tmpexpcompres2;
  assign _223_ = _222_ & A[13];
  assign _224_ = _223_ & A[14];
  assign _225_ = A[0] | A[1];
  assign _226_ = _225_ | A[2];
  assign _228_ = _226_ | A[3];
  assign _229_ = _228_ | A[4];
  assign _230_ = _229_ | A[5];
  assign _231_ = _230_ | A[6];
  assign _232_ = _231_ | A[7];
  assign _233_ = _232_ | A[8];
  assign _234_ = _233_ | A[9];
  assign _235_ = ~ aisnormal;
  assign _236_ = ~ ahasnonnullsig;
  assign _237_ = _235_ & _236_;
  assign _239_ = ~ ahasnonnullsig;
  assign _240_ = aisinfornan & _239_;
  assign _241_ = aisinfornan & ahasnonnullsig;
  assign _242_ = B[10] | B[11];
  assign _243_ = _242_ | B[12];
  assign _244_ = _243_ | B[13];
  assign _245_ = _244_ | B[14];
  assign _246_ = B[10] & B[11];
  assign _247_ = _246_ & B[12];
  assign _248_ = _247_ & B[13];
  assign _250_ = _248_ & B[14];
  assign _251_ = B[0] | B[1];
  assign _252_ = _251_ | B[2];
  assign _253_ = _252_ | B[3];
  assign _254_ = _253_ | B[4];
  assign _255_ = _254_ | B[5];
  assign _256_ = _255_ | B[6];
  assign _257_ = _256_ | B[7];
  assign _258_ = _257_ | B[8];
  assign _259_ = _258_ | B[9];
  assign _261_ = ~ bisnormal;
  assign _262_ = ~ bhasnonnullsig;
  assign _263_ = _261_ & _262_;
  assign _264_ = ~ bhasnonnullsig;
  assign _265_ = bisinfornan & _264_;
  assign _266_ = bisinfornan & bhasnonnullsig;
  assign _267_ = aexpfield - { 4'h7, aisnormal };
  assign _268_ = bexpfield - { 4'h7, bisnormal };
  assign _269_ = { aexp[4], aexp } + { bexp[4], bexp };
  assign _270_ = C[10] | C[11];
  assign _272_ = _270_ | C[12];
  assign _273_ = _272_ | C[13];
  assign _274_ = _273_ | C[14];
  assign _275_ = C[10] & C[11];
  assign _276_ = _275_ & C[12];
  assign _277_ = _276_ & C[13];
  assign _278_ = _277_ & C[14];
  assign _279_ = C[0] | C[1];
  assign _280_ = _279_ | C[2];
  assign _281_ = _280_ | C[3];
  assign _002_ = _281_ | C[4];
  assign _003_ = _002_ | C[5];
  assign _004_ = _003_ | C[6];
  assign _005_ = _004_ | C[7];
  assign _006_ = _005_ | C[8];
  assign _007_ = _006_ | C[9];
  assign _008_ = ~ cisnormal;
  assign _009_ = ~ chasnonnullsig;
  assign _010_ = _008_ & _009_;
  assign _011_ = ~ chasnonnullsig;
  assign _013_ = cisinfornan & _011_;
  assign _014_ = cisinfornan & chasnonnullsig;
  assign _015_ = aisnan | bisnan;
  assign _016_ = _015_ | cisnan;
  assign _017_ = aisinf | bisinf;
  assign _018_ = _017_ & cisinf;
  assign _019_ = asgn ^ bsgn;
  assign _020_ = _019_ ^ csgn;
  assign _021_ = _018_ & _020_;
  assign _022_ = _016_ | _021_;
  assign _024_ = biszero | bisnan;
  assign _025_ = ~ _024_;
  assign _026_ = aisinf & _025_;
  assign _027_ = aiszero | aisnan;
  assign _028_ = ~ _027_;
  assign _029_ = bisinf & _028_;
  assign _030_ = _026_ | _029_;
  assign _031_ = ~ cisnan;
  assign _032_ = _030_ & _031_;
  assign _033_ = asgn ^ bsgn;
  assign _035_ = _033_ ^ csgn;
  assign _036_ = ~ _035_;
  assign _037_ = cisinf & _036_;
  assign _038_ = ~ cisinf;
  assign _039_ = _037_ | _038_;
  assign _040_ = _032_ & _039_;
  assign _041_ = aisnan | bisnan;
  assign _042_ = ~ _041_;
  assign _043_ = cisinf & _042_;
  assign _044_ = aisinf | bisinf;
  assign _046_ = asgn ^ bsgn;
  assign _047_ = _046_ ^ csgn;
  assign _048_ = ~ _047_;
  assign _049_ = _044_ & _048_;
  assign _050_ = aisinf | bisinf;
  assign _051_ = ~ _050_;
  assign _052_ = _049_ | _051_;
  assign _053_ = _043_ & _052_;
  assign _054_ = _040_ | _053_;
  assign _055_ = cexpfield - { 4'h7, cisnormal };
  assign _057_ = negateAB ^ asgn;
  assign _058_ = _057_ ^ bsgn;
  assign _059_ = negateC ^ csgn;
  assign _060_ = _058_ ^ _059_;
  assign _061_ = { 2'h0, aexpfield } + { 2'h0, bexpfield };
  assign _062_ = _061_ - { 6'h07, aisnormal };
  assign _063_ = _062_ - { 6'h00, bisnormal };
  assign _064_ = { 2'h0, cexpfield } - expdiffprepare;
  assign _065_ = _064_ - { 6'h00, cisnormal };
  assign _066_ = expdiff + 7'h16;
  assign _068_ = expdiff - 7'h03;
  assign _069_ = expdiff - 7'h0e;
  assign _070_ = expdiffverysmall ? 6'h25 : _072_;
  assign _071_ = 6'h0e - expdiff[5:0];
  assign _072_ = expdiffnotlarge ? _071_ : 6'h00;
  assign _074_ = csigshifted[0] | csigshifted[1];
  assign _075_ = _074_ | csigshifted[2];
  assign _076_ = _075_ | csigshifted[3];
  assign _077_ = _076_ | csigshifted[4];
  assign _079_ = _077_ | csigshifted[5];
  assign _080_ = _079_ | csigshifted[6];
  assign _081_ = _080_ | csigshifted[7];
  assign _082_ = _081_ | csigshifted[8];
  assign _083_ = _082_ | csigshifted[9];
  assign _084_ = _083_ | csigshifted[10];
  assign _085_ = $signed({ 11'h000, asig }) * $signed({ 11'h000, bsig });
  assign _086_ = ~ effectivesub;
  assign _087_ = _086_ ? { 1'h0, csigshiftedt } : { 1'h1, _088_ };
  assign _088_ = ~ csigshiftedt;
  assign _090_ = csiginverted + { 1'h0, paligned };
  assign _091_ = _090_ + { 37'h0000000000, effectivesub };
  always @(posedge clk)
    _000_ <= asgn;
  assign _092_ = { 1'h0, csigshiftedt } - { 1'h0, paligned };
  assign _093_ = asgn ^ bsgn;
  assign _094_ = _093_ ^ negateAB;
  assign _095_ = _094_ ^ bigsum[37];
  assign _096_ = ~ effectivesub;
  always @(posedge clk)
    _111_ <= aiszero;
  assign _097_ = bigsum2[37] | _096_;
  assign _098_ = _097_ ? bigsum[36:0] : bigsum2[36:0];
  always @(posedge clk)
    _205_ <= bsgn;
  assign _101_ = { aexpplusbexp[5], aexpplusbexp } + 7'h11;
  always @(posedge clk)
    _216_ <= biszero;
  assign _102_ = tmpexpcompres1_d1 - { 2'h0, l };
  assign _103_ = ~ cisnormal_d1;
  assign _104_ = expdiffsmall_d1 | _103_;
  assign _105_ = _104_ & tmpexpcompres2[6];
  always @(posedge clk)
    _227_ <= aexpplusbexp;
  assign _106_ = l == 5'h1a;
  assign _107_ = _106_ ? expdiffsmall_d1 : 1'h0;
  assign _108_ = asgn_d1 ^ bsgn_d1;
  assign _109_ = _108_ ^ negateab_d1;
  always @(posedge clk)
    _238_ <= csgn;
  assign _110_ = csgn_d1 ^ negatec_d1;
  assign _113_ = _109_ & _110_;
  assign _114_ = aiszero_d1 | biszero_d1;
  assign _115_ = _114_ & ciszero_d1;
  assign _116_ = _115_ ? _113_ : _117_;
  assign _117_ = riszero ? 1'h0 : rsgntentative_d1;
  always @(posedge clk)
    _249_ <= cisnormal;
  assign _118_ = aexpplusbexp + 6'h1c;
  always @(posedge clk)
    _260_ <= ciszero;
  assign _119_ = { 1'h0, l } + 6'h0c;
  assign _120_ = ~ rissubnormal;
  assign _121_ = expdiffsmall_d1 & _120_;
  assign _122_ = _121_ ? _119_ : _125_;
  assign _124_ = expdiffsmall_d1 & rissubnormal;
  assign _125_ = _124_ ? shiftvaluecasesubnormal_d1 : shiftvalue_d1;
  always @(posedge clk)
    _271_ <= risnan;
  assign _127_ = riszero ? 7'h73 : _128_;
  assign _128_ = rissubnormal ? 7'h72 : _133_;
  always @(posedge clk)
    _001_ <= risnan_d1;
  assign _129_ = { aexpplusbexp_d1[5], aexpplusbexp_d1 } - { 2'h0, l };
  always @(posedge clk)
    _012_ <= risnan_d2;
  assign _130_ = _129_ + 7'h03;
  assign _131_ = ~ rissubnormal;
  assign _132_ = expdiffsmall_d1 & _131_;
  assign _133_ = _132_ ? _130_ : _135_;
  always @(posedge clk)
    _023_ <= tentativerisinf;
  assign _135_ = { cexp_d1[4], cexp_d1[4], cexp_d1 } + 7'h01;
  assign _136_ = bigsumnormd[0] | bigsumnormd[1];
  assign _137_ = _136_ | bigsumnormd[2];
  always @(posedge clk)
    _034_ <= tentativerisinf_d1;
  assign _138_ = _137_ | bigsumnormd[3];
  assign _139_ = _138_ | bigsumnormd[4];
  assign _140_ = _139_ | bigsumnormd[5];
  assign _141_ = _140_ | bigsumnormd[6];
  assign _142_ = _141_ | bigsumnormd[7];
  always @(posedge clk)
    _045_ <= tentativerisinf_d2;
  assign _143_ = _142_ | bigsumnormd[8];
  assign _144_ = _143_ | bigsumnormd[9];
  assign _146_ = _144_ | bigsumnormd[10];
  assign _147_ = _146_ | bigsumnormd[11];
  assign _148_ = _147_ | bigsumnormd[12];
  always @(posedge clk)
    _056_ <= cexp;
  assign _149_ = _148_ | bigsumnormd[13];
  assign _150_ = _149_ | bigsumnormd[14];
  assign _151_ = _150_ | bigsumnormd[15];
  assign _152_ = _151_ | bigsumnormd[16];
  assign _153_ = _152_ | bigsumnormd[17];
  always @(posedge clk)
    _067_ <= expdiffsmall;
  assign _154_ = _153_ | bigsumnormd[18];
  assign _155_ = _154_ | bigsumnormd[19];
  assign _157_ = _155_ | bigsumnormd[20];
  assign _158_ = _157_ | bigsumnormd[21];
  assign _159_ = _158_ | bigsumnormd[22];
  always @(posedge clk)
    _078_ <= shiftvalue;
  assign _160_ = _159_ | bigsumnormd[23];
  assign _161_ = rissubnormal_d2 ? 2'h1 : fracleadingbitsnormal;
  always @(posedge clk)
    _089_ <= sticky1;
  assign _162_ = fracleadingbits == 2'h0;
  assign _163_ = _162_ ? fractentative[10:1] : _165_;
  always @(posedge clk)
    _100_ <= sticky1_d1;
  assign _164_ = fracleadingbits == 2'h1;
  assign _165_ = _164_ ? fractentative[11:2] : fractentative[12:3];
  always @(posedge clk)
    _112_ <= sticky1_d2;
  assign _166_ = fracleadingbits == 2'h0;
  assign _168_ = _166_ ? fractentative[0] : _170_;
  always @(posedge clk)
    _123_ <= rsgntentative;
  assign _169_ = fracleadingbits == 2'h1;
  assign _170_ = _169_ ? fractentative[1] : fractentative[2];
  assign _171_ = sticky1_d3 | sticky2;
  always @(posedge clk)
    _134_ <= tmpexpcompres1;
  assign _172_ = fracleadingbits == 2'h0;
  assign _173_ = _172_ ? _171_ : _177_;
  assign _174_ = fractentative[0] | sticky1_d3;
  assign _175_ = _174_ | sticky2;
  always @(posedge clk)
    _145_ <= rissubnormal;
  assign _176_ = fracleadingbits == 2'h1;
  assign _177_ = _176_ ? _175_ : _181_;
  assign _179_ = fractentative[1] | fractentative[0];
  assign _180_ = _179_ | sticky1_d3;
  assign _181_ = _180_ | sticky2;
  always @(posedge clk)
    _156_ <= rissubnormal_d1;
  assign _182_ = fracresultstickybit | fracresultnormd[0];
  assign _183_ = fracresultroundbit & _182_;
  assign _184_ = riszero_d2 ? 7'h0d : _186_;
  always @(posedge clk)
    _167_ <= riszero;
  assign _185_ = fracleadingbits == 2'h0;
  assign _186_ = _185_ ? 7'h0d : _188_;
  always @(posedge clk)
    _178_ <= riszero_d1;
  assign _187_ = fracleadingbits == 2'h1;
  assign _188_ = _187_ ? 7'h0e : 7'h0f;
  assign _190_ = exptentative_d2 + expupdate;
  always @(posedge clk)
    _189_ <= rsgn;
  assign _191_ = resultbeforeround + { 16'h0000, round };
  always @(posedge clk)
    _200_ <= rsgn_d1;
  assign _192_ = resultrounded[16] | resultrounded[15];
  assign _193_ = resultrounded[14] & resultrounded[13];
  assign _194_ = _193_ & resultrounded[12];
  assign _195_ = _194_ & resultrounded[11];
  assign _196_ = _195_ & resultrounded[10];
  always @(posedge clk)
    _204_ <= shiftvaluecasesubnormal;
  assign _197_ = _192_ | _196_;
  assign _198_ = tentativerisinf_d3 | roverflowed;
  assign _199_ = ~ risnan_d3;
  assign _201_ = _199_ & finalrisinf;
  assign _202_ = _201_ ? { rsgn_d2, inf_d3 } : _203_;
  always @(posedge clk)
    _206_ <= exptentative;
  assign _203_ = risnan_d3 ? { 1'h0, nan_d3 } : { rsgn_d2, resultrounded[14:0] };
  always @(posedge clk)
    _207_ <= exptentative_d1;
  always @(posedge clk)
    _208_ <= inf;
  always @(posedge clk)
    _209_ <= inf_d1;
  always @(posedge clk)
    _210_ <= inf_d2;
  always @(posedge clk)
    _211_ <= nan;
  always @(posedge clk)
    _212_ <= nan_d1;
  always @(posedge clk)
    _213_ <= nan_d2;
  always @(posedge clk)
    _214_ <= negateAB;
  always @(posedge clk)
    _215_ <= negateC;
  assign _217_ = A[10] | A[11];
  assign _218_ = _217_ | A[12];
  assign _219_ = _218_ | A[13];
  assign _220_ = _219_ | A[14];
  assign _221_ = A[10] & A[11];
  assign _222_ = _221_ & A[12];
  lzc_26_f250_uid6 ieeefma_5_10_f250_uid2leadingzerocounter (
    .clk(clk),
    .i(bigsumabslowerbits),
    .o(_099_)
  );
  leftshifter37_by_max_36_f250_uid8 normalizationshifter (
    .clk(clk),
    .r(_126_),
    .s(normshiftvalue),
    .x(bigsumabs)
  );
  rightshifter11_by_max_37_f250_uid4 rightshiftercomponent (
    .clk(clk),
    .r(_073_),
    .s(shiftvalue),
    .x(csig)
  );
  assign asgn = A[15];
  assign asgn_d1 = _000_;
  assign aexpfield = A[14:10];
  assign asigfield = A[9:0];
  assign aisnormal = _220_;
  assign aisinfornan = _224_;
  assign ahasnonnullsig = _234_;
  assign aiszero = _237_;
  assign aiszero_d1 = _111_;
  assign aisinf = _240_;
  assign aisnan = _241_;
  assign bsgn = B[15];
  assign bsgn_d1 = _205_;
  assign bexpfield = B[14:10];
  assign bsigfield = B[9:0];
  assign bisnormal = _245_;
  assign bisinfornan = _250_;
  assign bhasnonnullsig = _259_;
  assign biszero = _263_;
  assign biszero_d1 = _216_;
  assign bisinf = _265_;
  assign bisnan = _266_;
  assign aexp = _267_;
  assign bexp = _268_;
  assign asig = { aisnormal, asigfield };
  assign bsig = { bisnormal, bsigfield };
  assign aexpplusbexp = _269_;
  assign aexpplusbexp_d1 = _227_;
  assign csgn = C[15];
  assign csgn_d1 = _238_;
  assign cexpfield = C[14:10];
  assign csigfield = C[9:0];
  assign cisnormal = _274_;
  assign cisnormal_d1 = _249_;
  assign cisinfornan = _278_;
  assign chasnonnullsig = _007_;
  assign ciszero = _010_;
  assign ciszero_d1 = _260_;
  assign cisinf = _013_;
  assign cisnan = _014_;
  assign risnan = _022_;
  assign risnan_d1 = _271_;
  assign risnan_d2 = _001_;
  assign risnan_d3 = _012_;
  assign tentativerisinf = _054_;
  assign tentativerisinf_d1 = _023_;
  assign tentativerisinf_d2 = _034_;
  assign tentativerisinf_d3 = _045_;
  assign cexp = _055_;
  assign cexp_d1 = _056_;
  assign effectivesub = _060_;
  assign csig = { cisnormal, csigfield };
  assign expdiffprepare = _063_;
  assign expdiff = _065_;
  assign tmpexpcomp1 = _066_;
  assign expdiffverysmall = tmpexpcomp1[6];
  assign tmpexpcomp2 = _068_;
  assign expdiffsmall = tmpexpcomp2[6];
  assign expdiffsmall_d1 = _067_;
  assign tmpexpcomp3 = _069_;
  assign expdiffnotlarge = tmpexpcomp3[6];
  assign shiftvalue = _070_;
  assign shiftvalue_d1 = _078_;
  assign csigshifted = \rightshiftercomponent:375 ;
  assign sticky1 = _084_;
  assign sticky1_d1 = _089_;
  assign sticky1_d2 = _100_;
  assign sticky1_d3 = _112_;
  assign csigshiftedt = csigshifted[47:11];
  assign p = _085_;
  assign paligned = { 13'h0000, p, 2'h0 };
  assign csiginverted = _087_;
  assign bigsum = _091_;
  assign bigsum2 = _092_;
  assign rsgntentative = _095_;
  assign rsgntentative_d1 = _123_;
  assign bigsumabs = _098_;
  assign bigsumabslowerbits = bigsumabs[25:0];
  assign l = \ieeefma_5_10_f250_uid2leadingzerocounter:454 ;
  assign tmpexpcompres1 = _101_;
  assign tmpexpcompres1_d1 = _134_;
  assign tmpexpcompres2 = _102_;
  assign rissubnormal = _105_;
  assign rissubnormal_d1 = _145_;
  assign rissubnormal_d2 = _156_;
  assign riszero = _107_;
  assign riszero_d1 = _167_;
  assign riszero_d2 = _178_;
  assign rsgn = _116_;
  assign rsgn_d1 = _189_;
  assign rsgn_d2 = _200_;
  assign shiftvaluecasesubnormal = _118_;
  assign shiftvaluecasesubnormal_d1 = _204_;
  assign normshiftvalue = _122_;
  assign bigsumnormd = \normalizationshifter:517 ;
  assign exptentative = _127_;
  assign exptentative_d1 = _206_;
  assign exptentative_d2 = _207_;
  assign sticky2 = _160_;
  assign fractentative = bigsumnormd[37:24];
  assign fracleadingbitsnormal = fractentative[13:12];
  assign fracleadingbits = _161_;
  assign fracresultnormd = _163_;
  assign fracresultroundbit = _168_;
  assign fracresultstickybit = _173_;
  assign round = _183_;
  assign expupdate = _184_;
  assign exponentresult1 = _190_;
  assign resultbeforeround = { exponentresult1, fracresultnormd };
  assign resultrounded = _191_;
  assign roverflowed = _197_;
  assign finalrisinf = _198_;
  assign inf = 15'h7c00;
  assign inf_d1 = _208_;
  assign inf_d2 = _209_;
  assign inf_d3 = _210_;
  assign nan = 15'h7fff;
  assign nan_d1 = _211_;
  assign nan_d2 = _212_;
  assign nan_d3 = _213_;
  assign negateab_d1 = _214_;
  assign negatec_d1 = _215_;
  assign \rightshiftercomponent:375  = _073_;
  assign \ieeefma_5_10_f250_uid2leadingzerocounter:454  = _099_;
  assign \normalizationshifter:517  = _126_;
  assign R = _202_;
endmodule

module leftshifter37_by_max_36_f250_uid8(clk, x, s, r);
  reg [5:0] _00_;
  reg [5:0] _01_;
  reg [36:0] _02_;
  reg [37:0] _03_;
  reg [67:0] _04_;
  wire [37:0] _05_;
  wire [39:0] _06_;
  wire [43:0] _07_;
  wire [51:0] _08_;
  wire [67:0] _09_;
  wire [99:0] _10_;
  input clk;
  wire [36:0] level0;
  wire [36:0] level0_d1;
  wire [37:0] level1;
  wire [37:0] level1_d1;
  wire [39:0] level2;
  wire [43:0] level3;
  wire [51:0] level4;
  wire [67:0] level5;
  wire [67:0] level5_d1;
  wire [99:0] level6;
  wire [5:0] ps;
  wire [5:0] ps_d1;
  wire [5:0] ps_d2;
  output [72:0] r;
  input [5:0] s;
  input [36:0] x;
  always @(posedge clk)
    _00_ <= ps;
  always @(posedge clk)
    _01_ <= ps_d1;
  always @(posedge clk)
    _02_ <= level0;
  always @(posedge clk)
    _03_ <= level1;
  always @(posedge clk)
    _04_ <= level5;
  assign _05_ = ps[0] ? { level0_d1, 1'h0 } : { 1'h0, level0_d1 };
  assign _06_ = ps_d1[1] ? { level1_d1, 2'h0 } : { 2'h0, level1_d1 };
  assign _07_ = ps_d1[2] ? { level2, 4'h0 } : { 4'h0, level2 };
  assign _08_ = ps_d1[3] ? { level3, 8'h00 } : { 8'h00, level3 };
  assign _09_ = ps_d1[4] ? { level4, 16'h0000 } : { 16'h0000, level4 };
  assign _10_ = ps_d2[5] ? { level5_d1, 32'h00000000 } : { 32'h00000000, level5_d1 };
  assign ps = s;
  assign ps_d1 = _00_;
  assign ps_d2 = _01_;
  assign level0 = x;
  assign level0_d1 = _02_;
  assign level1 = _05_;
  assign level1_d1 = _03_;
  assign level2 = _06_;
  assign level3 = _07_;
  assign level4 = _08_;
  assign level5 = _09_;
  assign level5_d1 = _04_;
  assign level6 = _10_;
  assign r = level6[72:0];
endmodule

module lzc_26_f250_uid6(clk, i, o);
  reg [30:0] _00_;
  wire _01_;
  wire _02_;
  wire [14:0] _03_;
  wire _04_;
  wire _05_;
  wire [6:0] _06_;
  wire _07_;
  wire _08_;
  wire [2:0] _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire [1:0] _14_;
  input clk;
  wire digit2;
  wire digit3;
  wire digit4;
  input [25:0] i;
  wire [2:0] level2;
  wire [6:0] level3;
  wire [14:0] level4;
  wire [30:0] level5;
  wire [30:0] level5_d1;
  wire [1:0] lowbits;
  output [4:0] o;
  wire [2:0] outhighbits;
  always @(posedge clk)
    _00_ <= level5;
  assign _01_ = level5_d1[30:15] == 16'h0000;
  assign _02_ = _01_ ? 1'h1 : 1'h0;
  assign _03_ = digit4 ? level5_d1[14:0] : level5_d1[30:16];
  assign _04_ = level4[14:7] == 8'h00;
  assign _05_ = _04_ ? 1'h1 : 1'h0;
  assign _06_ = digit3 ? level4[6:0] : level4[14:8];
  assign _07_ = level3[6:3] == 4'h0;
  assign _08_ = _07_ ? 1'h1 : 1'h0;
  assign _09_ = digit2 ? level3[2:0] : level3[6:4];
  assign _10_ = level2 == 3'h0;
  assign _11_ = level2 == 3'h1;
  assign _12_ = level2 == 3'h2;
  assign _13_ = level2 == 3'h3;
  function [1:0] \836 ;
    input [1:0] a;
    input [7:0] b;
    input [3:0] s;
    (* parallel_case *)
    casez (s)
      4'b???1:
        \836  = b[1:0];
      4'b??1?:
        \836  = b[3:2];
      4'b?1??:
        \836  = b[5:4];
      4'b1???:
        \836  = b[7:6];
      default:
        \836  = a;
    endcase
  endfunction
  assign _14_ = \836 (2'h0, 8'h5b, { _13_, _12_, _11_, _10_ });
  assign level5 = { i, 5'h1f };
  assign level5_d1 = _00_;
  assign digit4 = _02_;
  assign level4 = _03_;
  assign digit3 = _05_;
  assign level3 = _06_;
  assign digit2 = _08_;
  assign level2 = _09_;
  assign lowbits = _14_;
  assign outhighbits = { digit4, digit3, digit2 };
  assign o = { outhighbits, lowbits };
endmodule

module rightshifter11_by_max_37_f250_uid4(clk, x, s, r);
  wire [11:0] _0_;
  wire [13:0] _1_;
  wire [17:0] _2_;
  wire [25:0] _3_;
  wire [41:0] _4_;
  wire [73:0] _5_;
  input clk;
  wire [10:0] level0;
  wire [11:0] level1;
  wire [13:0] level2;
  wire [17:0] level3;
  wire [25:0] level4;
  wire [41:0] level5;
  wire [73:0] level6;
  wire [5:0] ps;
  output [47:0] r;
  input [5:0] s;
  input [10:0] x;
  assign _0_ = ps[0] ? { 1'h0, level0 } : { level0, 1'h0 };
  assign _1_ = ps[1] ? { 2'h0, level1 } : { level1, 2'h0 };
  assign _2_ = ps[2] ? { 4'h0, level2 } : { level2, 4'h0 };
  assign _3_ = ps[3] ? { 8'h00, level3 } : { level3, 8'h00 };
  assign _4_ = ps[4] ? { 16'h0000, level4 } : { level4, 16'h0000 };
  assign _5_ = ps[5] ? { 32'h00000000, level5 } : { level5, 32'h00000000 };
  assign ps = s;
  assign level0 = x;
  assign level1 = _0_;
  assign level2 = _1_;
  assign level3 = _2_;
  assign level4 = _3_;
  assign level5 = _4_;
  assign level6 = _5_;
  assign r = level6[73:26];
endmodule
